// Generated from PythonParser.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';
import PythonParserListener from './PythonParserListener.js';
import PythonParserVisitor from './PythonParserVisitor.js';

import PythonParserBase from './PythonParserBase.js';

const serializedATN = [4,1,97,2187,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,1,0,3,0,398,8,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,406,
8,2,10,2,12,2,409,9,2,1,2,1,2,1,3,1,3,3,3,415,8,3,1,3,1,3,1,3,1,3,5,3,421,
8,3,10,3,12,3,424,9,3,1,3,1,3,1,4,1,4,1,5,4,5,431,8,5,11,5,12,5,432,1,6,
1,6,3,6,437,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,445,8,7,1,8,1,8,1,8,5,8,450,
8,8,10,8,12,8,453,9,8,1,8,3,8,456,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,474,8,9,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,3,10,484,8,10,1,11,1,11,1,11,1,11,1,11,3,11,491,8,11,1,11,1,11,
1,11,1,11,1,11,3,11,498,8,11,1,11,1,11,1,11,1,11,3,11,504,8,11,1,11,1,11,
1,11,4,11,509,8,11,11,11,12,11,510,1,11,1,11,3,11,515,8,11,1,11,3,11,518,
8,11,1,11,1,11,1,11,1,11,3,11,524,8,11,3,11,526,8,11,1,12,1,12,3,12,530,
8,12,1,13,1,13,1,14,1,14,3,14,536,8,14,1,15,1,15,1,15,1,15,3,15,542,8,15,
3,15,544,8,15,1,16,1,16,1,16,1,16,5,16,550,8,16,10,16,12,16,553,9,16,1,17,
1,17,1,17,1,17,5,17,559,8,17,10,17,12,17,562,9,17,1,18,1,18,1,18,1,19,1,
19,1,20,1,20,1,20,1,20,3,20,573,8,20,1,21,1,21,3,21,577,8,21,1,22,1,22,1,
22,1,23,1,23,5,23,584,8,23,10,23,12,23,587,9,23,1,23,1,23,1,23,1,23,1,23,
1,23,4,23,595,8,23,11,23,12,23,596,1,23,1,23,3,23,601,8,23,1,24,1,24,1,24,
3,24,606,8,24,1,24,1,24,1,24,1,24,3,24,612,8,24,1,25,1,25,1,25,5,25,617,
8,25,10,25,12,25,620,9,25,1,26,1,26,1,26,3,26,625,8,26,1,27,1,27,1,27,5,
27,630,8,27,10,27,12,27,633,9,27,1,28,1,28,1,28,3,28,638,8,28,1,29,1,29,
1,29,1,29,1,29,1,29,5,29,646,8,29,10,29,12,29,649,9,29,1,30,1,30,1,30,1,
30,1,30,1,30,3,30,657,8,30,1,31,1,31,1,31,1,31,4,31,663,8,31,11,31,12,31,
664,1,32,1,32,1,32,1,32,3,32,671,8,32,1,33,1,33,1,33,3,33,676,8,33,1,33,
1,33,3,33,680,8,33,1,33,3,33,683,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
3,34,692,8,34,1,35,1,35,1,35,3,35,697,8,35,1,35,1,35,3,35,701,8,35,1,35,
1,35,1,35,3,35,706,8,35,1,35,1,35,3,35,710,8,35,1,35,1,35,1,35,1,35,1,35,
3,35,717,8,35,1,35,1,35,3,35,721,8,35,1,35,1,35,1,35,3,35,726,8,35,1,35,
1,35,3,35,730,8,35,1,35,3,35,733,8,35,1,36,1,36,1,37,1,37,5,37,739,8,37,
10,37,12,37,742,9,37,1,37,5,37,745,8,37,10,37,12,37,748,9,37,1,37,3,37,751,
8,37,1,37,1,37,5,37,755,8,37,10,37,12,37,758,9,37,1,37,3,37,761,8,37,1,37,
4,37,764,8,37,11,37,12,37,765,1,37,5,37,769,8,37,10,37,12,37,772,9,37,1,
37,3,37,775,8,37,1,37,4,37,778,8,37,11,37,12,37,779,1,37,3,37,783,8,37,1,
37,3,37,786,8,37,1,38,4,38,789,8,38,11,38,12,38,790,1,38,1,38,3,38,795,8,
38,1,39,5,39,798,8,39,10,39,12,39,801,9,39,1,39,4,39,804,8,39,11,39,12,39,
805,1,39,1,39,3,39,810,8,39,1,40,1,40,1,40,5,40,815,8,40,10,40,12,40,818,
9,40,1,40,3,40,821,8,40,1,40,1,40,1,40,5,40,826,8,40,10,40,12,40,829,9,40,
1,40,3,40,832,8,40,1,40,1,40,1,40,4,40,837,8,40,11,40,12,40,838,1,40,3,40,
842,8,40,1,40,3,40,845,8,40,1,41,1,41,1,41,1,42,1,42,3,42,852,8,42,1,42,
3,42,855,8,42,1,43,1,43,3,43,859,8,43,1,43,3,43,862,8,43,1,44,1,44,1,44,
3,44,867,8,44,1,44,3,44,870,8,44,1,45,1,45,3,45,874,8,45,1,45,3,45,877,8,
45,1,45,3,45,880,8,45,1,46,1,46,3,46,884,8,46,1,47,1,47,1,47,1,48,1,48,1,
48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,904,
8,51,3,51,906,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,914,8,52,3,52,916,
8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,927,8,54,1,55,3,55,
930,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,938,8,55,1,55,1,55,3,55,942,
8,55,1,56,3,56,945,8,56,1,56,1,56,1,56,1,56,1,56,5,56,952,8,56,10,56,12,
56,955,9,56,1,56,3,56,958,8,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,966,8,
56,10,56,12,56,969,9,56,1,56,1,56,3,56,973,8,56,3,56,975,8,56,1,56,1,56,
1,57,1,57,1,57,3,57,982,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
4,58,993,8,58,11,58,12,58,994,1,58,3,58,998,8,58,1,58,3,58,1001,8,58,1,58,
1,58,1,58,1,58,4,58,1007,8,58,11,58,12,58,1008,1,58,3,58,1012,8,58,1,58,
3,58,1015,8,58,3,58,1017,8,58,1,59,1,59,1,59,1,59,3,59,1023,8,59,3,59,1025,
8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,1035,8,60,1,60,1,60,1,
60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,4,62,1050,8,62,11,62,
12,62,1051,1,62,1,62,1,63,1,63,1,63,3,63,1059,8,63,1,63,3,63,1062,8,63,1,
64,1,64,1,64,3,64,1067,8,64,1,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,3,66,
1077,8,66,1,67,1,67,3,67,1081,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,
69,1090,8,69,10,69,12,69,1093,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,
70,3,70,1103,8,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1111,8,71,1,72,1,72,
1,72,1,72,1,72,1,72,3,72,1119,8,72,1,73,1,73,1,73,1,73,1,74,3,74,1126,8,
74,1,74,1,74,1,75,3,75,1131,8,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,
1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,4,82,1150,8,82,11,82,12,82,
1151,1,83,1,83,1,83,5,83,1157,8,83,10,83,12,83,1160,9,83,1,84,1,84,1,84,
1,84,1,85,1,85,3,85,1168,8,85,1,85,1,85,1,85,3,85,1173,8,85,1,85,3,85,1176,
8,85,1,86,1,86,1,86,3,86,1181,8,86,1,87,1,87,1,87,5,87,1186,8,87,10,87,12,
87,1189,9,87,1,87,3,87,1192,8,87,1,88,1,88,3,88,1196,8,88,1,89,1,89,1,89,
1,89,3,89,1202,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1209,8,90,1,90,1,90,1,
90,1,90,1,90,1,90,3,90,1217,8,90,1,90,3,90,1220,8,90,1,90,1,90,3,90,1224,
8,90,1,91,1,91,1,91,5,91,1229,8,91,10,91,12,91,1232,9,91,1,92,1,92,3,92,
1236,8,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,94,1249,
8,94,1,94,3,94,1252,8,94,1,94,3,94,1255,8,94,3,94,1257,8,94,1,94,1,94,1,
95,1,95,1,95,5,95,1264,8,95,10,95,12,95,1267,9,95,1,96,1,96,1,96,5,96,1272,
8,96,10,96,12,96,1275,9,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,3,98,1284,
8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,5,100,1296,8,100,
10,100,12,100,1299,9,100,1,100,3,100,1302,8,100,1,101,1,101,3,101,1306,8,
101,1,101,1,101,1,101,1,101,3,101,1312,8,101,1,101,1,101,1,101,1,101,3,101,
1318,8,101,3,101,1320,8,101,1,102,1,102,1,102,1,103,1,103,1,103,5,103,1328,
8,103,10,103,12,103,1331,9,103,1,103,3,103,1334,8,103,1,104,1,104,1,104,
1,104,1,104,1,104,3,104,1342,8,104,1,104,3,104,1345,8,104,1,105,1,105,1,
105,1,105,3,105,1351,8,105,3,105,1353,8,105,1,106,1,106,1,106,5,106,1358,
8,106,10,106,12,106,1361,9,106,1,106,3,106,1364,8,106,1,107,1,107,1,107,
3,107,1369,8,107,1,108,1,108,1,108,5,108,1374,8,108,10,108,12,108,1377,9,
108,1,108,3,108,1380,8,108,1,109,1,109,1,109,3,109,1385,8,109,1,110,1,110,
1,110,1,110,1,111,1,111,3,111,1393,8,111,1,112,1,112,1,112,5,112,1398,8,
112,10,112,12,112,1401,9,112,1,113,1,113,1,113,5,113,1406,8,113,10,113,12,
113,1409,9,113,1,114,1,114,1,114,3,114,1414,8,114,1,115,1,115,5,115,1418,
8,115,10,115,12,115,1421,9,115,1,116,1,116,1,116,1,116,1,116,1,116,1,116,
1,116,1,116,1,116,3,116,1433,8,116,1,117,1,117,1,117,1,118,1,118,1,118,1,
119,1,119,1,119,1,120,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,1,
123,1,123,1,123,1,123,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,
126,1,126,1,127,1,127,1,127,1,127,1,127,1,127,5,127,1473,8,127,10,127,12,
127,1476,9,127,1,128,1,128,1,128,1,128,1,128,1,128,5,128,1484,8,128,10,128,
12,128,1487,9,128,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1495,8,129,10,
129,12,129,1498,9,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,1506,8,130,
10,130,12,130,1509,9,130,1,131,1,131,1,131,1,131,1,131,1,131,5,131,1517,
8,131,10,131,12,131,1520,9,131,1,132,1,132,1,132,1,132,1,132,1,132,5,132,
1528,8,132,10,132,12,132,1531,9,132,1,133,1,133,1,133,1,133,1,133,1,133,
1,133,3,133,1540,8,133,1,134,1,134,1,134,3,134,1545,8,134,1,135,1,135,1,
135,3,135,1550,8,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
3,136,1561,8,136,1,136,1,136,1,136,1,136,1,136,3,136,1568,8,136,5,136,1570,
8,136,10,136,12,136,1573,9,136,1,137,1,137,1,137,3,137,1578,8,137,1,137,
1,137,1,137,3,137,1583,8,137,5,137,1585,8,137,10,137,12,137,1588,9,137,1,
137,3,137,1591,8,137,3,137,1593,8,137,1,138,3,138,1596,8,138,1,138,1,138,
3,138,1600,8,138,1,138,1,138,3,138,1604,8,138,3,138,1606,8,138,1,138,3,138,
1609,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,1620,
8,139,1,139,1,139,3,139,1624,8,139,1,139,1,139,1,139,1,139,3,139,1630,8,
139,1,139,3,139,1633,8,139,1,140,1,140,1,140,3,140,1638,8,140,1,140,1,140,
1,141,1,141,3,141,1644,8,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,5,
143,1653,8,143,10,143,12,143,1656,9,143,1,143,5,143,1659,8,143,10,143,12,
143,1662,9,143,1,143,3,143,1665,8,143,1,143,1,143,5,143,1669,8,143,10,143,
12,143,1672,9,143,1,143,3,143,1675,8,143,1,143,4,143,1678,8,143,11,143,12,
143,1679,1,143,5,143,1683,8,143,10,143,12,143,1686,9,143,1,143,3,143,1689,
8,143,1,143,4,143,1692,8,143,11,143,12,143,1693,1,143,3,143,1697,8,143,1,
143,3,143,1700,8,143,1,144,4,144,1703,8,144,11,144,12,144,1704,1,144,1,144,
3,144,1709,8,144,1,145,5,145,1712,8,145,10,145,12,145,1715,9,145,1,145,4,
145,1718,8,145,11,145,12,145,1719,1,145,1,145,3,145,1724,8,145,1,146,1,146,
1,146,5,146,1729,8,146,10,146,12,146,1732,9,146,1,146,3,146,1735,8,146,1,
146,1,146,1,146,4,146,1740,8,146,11,146,12,146,1741,1,146,3,146,1745,8,146,
1,146,3,146,1748,8,146,1,147,1,147,1,147,1,148,1,148,3,148,1755,8,148,1,
149,1,149,1,149,3,149,1760,8,149,1,150,1,150,3,150,1764,8,150,1,150,3,150,
1767,8,150,1,151,1,151,1,152,1,152,3,152,1773,8,152,1,153,1,153,1,153,3,
153,1778,8,153,1,153,3,153,1781,8,153,1,153,3,153,1784,8,153,1,153,3,153,
1787,8,153,1,153,1,153,1,154,1,154,1,154,1,155,1,155,5,155,1796,8,155,10,
155,12,155,1799,9,155,1,156,1,156,3,156,1803,8,156,1,157,1,157,5,157,1807,
8,157,10,157,12,157,1810,9,157,1,157,1,157,1,158,1,158,1,159,1,159,4,159,
1818,8,159,11,159,12,159,1819,1,160,1,160,3,160,1824,8,160,1,160,1,160,1,
161,1,161,1,161,1,161,3,161,1832,8,161,3,161,1834,8,161,1,161,1,161,1,162,
1,162,1,162,1,162,1,163,1,163,3,163,1844,8,163,1,163,1,163,1,164,1,164,1,
164,5,164,1851,8,164,10,164,12,164,1854,9,164,1,164,3,164,1857,8,164,1,165,
1,165,1,165,3,165,1862,8,165,1,166,1,166,1,166,1,166,1,167,4,167,1869,8,
167,11,167,12,167,1870,1,168,3,168,1874,8,168,1,168,1,168,1,168,1,168,1,
168,1,168,5,168,1882,8,168,10,168,12,168,1885,9,168,1,169,1,169,1,169,1,
169,1,169,1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,3,171,1900,8,171,
1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,3,173,1912,8,
173,1,174,1,174,1,174,3,174,1917,8,174,3,174,1919,8,174,1,174,1,174,1,174,
1,174,3,174,1925,8,174,3,174,1927,8,174,5,174,1929,8,174,10,174,12,174,1932,
9,174,1,174,1,174,3,174,1936,8,174,1,174,3,174,1939,8,174,1,175,1,175,1,
175,5,175,1944,8,175,10,175,12,175,1947,9,175,1,175,1,175,1,175,1,175,5,
175,1953,8,175,10,175,12,175,1956,9,175,3,175,1958,8,175,1,175,1,175,1,175,
5,175,1963,8,175,10,175,12,175,1966,9,175,3,175,1968,8,175,1,176,1,176,1,
176,1,177,1,177,1,177,1,177,3,177,1977,8,177,1,178,1,178,1,178,1,178,1,178,
3,178,1984,8,178,1,179,1,179,1,179,5,179,1989,8,179,10,179,12,179,1992,9,
179,1,179,3,179,1995,8,179,1,180,1,180,1,180,4,180,2000,8,180,11,180,12,
180,2001,1,180,3,180,2005,8,180,1,181,1,181,1,181,1,181,4,181,2011,8,181,
11,181,12,181,2012,1,181,3,181,2016,8,181,3,181,2018,8,181,1,182,1,182,1,
182,3,182,2023,8,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,2032,
8,183,1,183,3,183,2035,8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,
184,2044,8,184,1,184,1,184,1,184,3,184,2049,8,184,1,184,3,184,2052,8,184,
1,185,1,185,1,185,1,185,1,185,1,185,3,185,2060,8,185,1,186,1,186,1,186,1,
186,1,186,1,186,1,186,3,186,2069,8,186,1,187,1,187,1,187,1,187,1,187,1,187,
1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,2084,8,187,1,187,3,187,2087,
8,187,5,187,2089,8,187,10,187,12,187,2092,9,187,1,188,1,188,1,188,5,188,
2097,8,188,10,188,12,188,2100,9,188,1,188,3,188,2103,8,188,1,189,1,189,1,
189,1,189,1,189,1,189,1,189,3,189,2112,8,189,1,189,3,189,2115,8,189,1,190,
1,190,1,190,1,190,1,190,1,190,1,190,3,190,2124,8,190,1,190,1,190,1,190,3,
190,2129,8,190,1,190,3,190,2132,8,190,1,191,1,191,1,191,5,191,2137,8,191,
10,191,12,191,2140,9,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,2148,
8,191,1,191,1,191,3,191,2152,8,191,3,191,2154,8,191,1,191,1,191,1,191,1,
191,1,191,3,191,2161,8,191,1,191,1,191,3,191,2165,8,191,1,192,1,192,1,192,
3,192,2170,8,192,1,193,1,193,1,193,1,194,1,194,1,194,1,195,1,195,1,195,1,
196,1,196,1,196,1,197,1,197,1,197,1,197,0,9,58,254,256,258,260,262,264,272,
374,198,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,
312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,
348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,
384,386,388,390,392,394,0,5,3,0,70,80,82,82,84,84,2,0,47,47,86,86,1,0,51,
52,1,0,67,68,4,0,53,54,60,60,81,81,83,83,2359,0,397,1,0,0,0,2,401,1,0,0,
0,4,403,1,0,0,0,6,412,1,0,0,0,8,427,1,0,0,0,10,430,1,0,0,0,12,436,1,0,0,
0,14,444,1,0,0,0,16,446,1,0,0,0,18,473,1,0,0,0,20,483,1,0,0,0,22,525,1,0,
0,0,24,529,1,0,0,0,26,531,1,0,0,0,28,533,1,0,0,0,30,537,1,0,0,0,32,545,1,
0,0,0,34,554,1,0,0,0,36,563,1,0,0,0,38,566,1,0,0,0,40,568,1,0,0,0,42,576,
1,0,0,0,44,578,1,0,0,0,46,600,1,0,0,0,48,611,1,0,0,0,50,613,1,0,0,0,52,621,
1,0,0,0,54,626,1,0,0,0,56,634,1,0,0,0,58,639,1,0,0,0,60,656,1,0,0,0,62,662,
1,0,0,0,64,670,1,0,0,0,66,672,1,0,0,0,68,691,1,0,0,0,70,732,1,0,0,0,72,734,
1,0,0,0,74,785,1,0,0,0,76,788,1,0,0,0,78,799,1,0,0,0,80,844,1,0,0,0,82,846,
1,0,0,0,84,849,1,0,0,0,86,856,1,0,0,0,88,863,1,0,0,0,90,871,1,0,0,0,92,881,
1,0,0,0,94,885,1,0,0,0,96,888,1,0,0,0,98,891,1,0,0,0,100,894,1,0,0,0,102,
897,1,0,0,0,104,907,1,0,0,0,106,917,1,0,0,0,108,921,1,0,0,0,110,929,1,0,
0,0,112,944,1,0,0,0,114,978,1,0,0,0,116,1016,1,0,0,0,118,1018,1,0,0,0,120,
1029,1,0,0,0,122,1039,1,0,0,0,124,1043,1,0,0,0,126,1061,1,0,0,0,128,1063,
1,0,0,0,130,1071,1,0,0,0,132,1076,1,0,0,0,134,1080,1,0,0,0,136,1082,1,0,
0,0,138,1086,1,0,0,0,140,1102,1,0,0,0,142,1110,1,0,0,0,144,1118,1,0,0,0,
146,1120,1,0,0,0,148,1125,1,0,0,0,150,1130,1,0,0,0,152,1134,1,0,0,0,154,
1136,1,0,0,0,156,1138,1,0,0,0,158,1140,1,0,0,0,160,1142,1,0,0,0,162,1144,
1,0,0,0,164,1146,1,0,0,0,166,1153,1,0,0,0,168,1161,1,0,0,0,170,1175,1,0,
0,0,172,1177,1,0,0,0,174,1182,1,0,0,0,176,1195,1,0,0,0,178,1201,1,0,0,0,
180,1223,1,0,0,0,182,1225,1,0,0,0,184,1235,1,0,0,0,186,1240,1,0,0,0,188,
1243,1,0,0,0,190,1260,1,0,0,0,192,1268,1,0,0,0,194,1276,1,0,0,0,196,1280,
1,0,0,0,198,1288,1,0,0,0,200,1292,1,0,0,0,202,1319,1,0,0,0,204,1321,1,0,
0,0,206,1324,1,0,0,0,208,1344,1,0,0,0,210,1346,1,0,0,0,212,1354,1,0,0,0,
214,1368,1,0,0,0,216,1370,1,0,0,0,218,1384,1,0,0,0,220,1386,1,0,0,0,222,
1392,1,0,0,0,224,1394,1,0,0,0,226,1402,1,0,0,0,228,1413,1,0,0,0,230,1415,
1,0,0,0,232,1432,1,0,0,0,234,1434,1,0,0,0,236,1437,1,0,0,0,238,1440,1,0,
0,0,240,1443,1,0,0,0,242,1446,1,0,0,0,244,1449,1,0,0,0,246,1452,1,0,0,0,
248,1456,1,0,0,0,250,1459,1,0,0,0,252,1463,1,0,0,0,254,1466,1,0,0,0,256,
1477,1,0,0,0,258,1488,1,0,0,0,260,1499,1,0,0,0,262,1510,1,0,0,0,264,1521,
1,0,0,0,266,1539,1,0,0,0,268,1541,1,0,0,0,270,1549,1,0,0,0,272,1551,1,0,
0,0,274,1592,1,0,0,0,276,1608,1,0,0,0,278,1632,1,0,0,0,280,1634,1,0,0,0,
282,1641,1,0,0,0,284,1648,1,0,0,0,286,1699,1,0,0,0,288,1702,1,0,0,0,290,
1713,1,0,0,0,292,1747,1,0,0,0,294,1749,1,0,0,0,296,1752,1,0,0,0,298,1756,
1,0,0,0,300,1761,1,0,0,0,302,1768,1,0,0,0,304,1772,1,0,0,0,306,1774,1,0,
0,0,308,1790,1,0,0,0,310,1793,1,0,0,0,312,1802,1,0,0,0,314,1804,1,0,0,0,
316,1813,1,0,0,0,318,1817,1,0,0,0,320,1821,1,0,0,0,322,1827,1,0,0,0,324,
1837,1,0,0,0,326,1841,1,0,0,0,328,1847,1,0,0,0,330,1861,1,0,0,0,332,1863,
1,0,0,0,334,1868,1,0,0,0,336,1873,1,0,0,0,338,1886,1,0,0,0,340,1891,1,0,
0,0,342,1896,1,0,0,0,344,1904,1,0,0,0,346,1909,1,0,0,0,348,1938,1,0,0,0,
350,1967,1,0,0,0,352,1969,1,0,0,0,354,1976,1,0,0,0,356,1983,1,0,0,0,358,
1985,1,0,0,0,360,1996,1,0,0,0,362,2006,1,0,0,0,364,2022,1,0,0,0,366,2034,
1,0,0,0,368,2051,1,0,0,0,370,2059,1,0,0,0,372,2061,1,0,0,0,374,2070,1,0,
0,0,376,2093,1,0,0,0,378,2114,1,0,0,0,380,2131,1,0,0,0,382,2164,1,0,0,0,
384,2169,1,0,0,0,386,2171,1,0,0,0,388,2174,1,0,0,0,390,2177,1,0,0,0,392,
2180,1,0,0,0,394,2183,1,0,0,0,396,398,3,10,5,0,397,396,1,0,0,0,397,398,1,
0,0,0,398,399,1,0,0,0,399,400,5,0,0,1,400,1,1,0,0,0,401,402,3,14,7,0,402,
3,1,0,0,0,403,407,3,206,103,0,404,406,5,93,0,0,405,404,1,0,0,0,406,409,1,
0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,410,1,0,0,0,409,407,1,0,0,0,410,
411,5,0,0,1,411,5,1,0,0,0,412,414,5,41,0,0,413,415,3,382,191,0,414,413,1,
0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,417,5,44,0,0,417,418,5,85,0,0,
418,422,3,208,104,0,419,421,5,93,0,0,420,419,1,0,0,0,421,424,1,0,0,0,422,
420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,0,
0,1,426,7,1,0,0,0,427,428,3,212,106,0,428,9,1,0,0,0,429,431,3,12,6,0,430,
429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,11,1,0,0,
0,434,437,3,20,10,0,435,437,3,16,8,0,436,434,1,0,0,0,436,435,1,0,0,0,437,
13,1,0,0,0,438,439,3,20,10,0,439,440,5,93,0,0,440,445,1,0,0,0,441,445,3,
16,8,0,442,445,5,93,0,0,443,445,5,0,0,1,444,438,1,0,0,0,444,441,1,0,0,0,
444,442,1,0,0,0,444,443,1,0,0,0,445,15,1,0,0,0,446,451,3,18,9,0,447,448,
5,50,0,0,448,450,3,18,9,0,449,447,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,
0,451,452,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,454,456,5,50,0,0,455,454,
1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,458,5,93,0,0,458,17,1,0,0,0,
459,474,3,22,11,0,460,474,3,196,98,0,461,474,3,212,106,0,462,474,3,28,14,
0,463,474,3,42,21,0,464,474,3,30,15,0,465,474,5,10,0,0,466,474,3,36,18,0,
467,474,3,38,19,0,468,474,3,40,20,0,469,474,5,12,0,0,470,474,5,22,0,0,471,
474,3,32,16,0,472,474,3,34,17,0,473,459,1,0,0,0,473,460,1,0,0,0,473,461,
1,0,0,0,473,462,1,0,0,0,473,463,1,0,0,0,473,464,1,0,0,0,473,465,1,0,0,0,
473,466,1,0,0,0,473,467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,
1,0,0,0,473,471,1,0,0,0,473,472,1,0,0,0,474,19,1,0,0,0,475,484,3,68,34,0,
476,484,3,102,51,0,477,484,3,64,32,0,478,484,3,112,56,0,479,484,3,110,55,
0,480,484,3,116,58,0,481,484,3,108,54,0,482,484,3,124,62,0,483,475,1,0,0,
0,483,476,1,0,0,0,483,477,1,0,0,0,483,478,1,0,0,0,483,479,1,0,0,0,483,480,
1,0,0,0,483,481,1,0,0,0,483,482,1,0,0,0,484,21,1,0,0,0,485,486,5,89,0,0,
486,487,5,48,0,0,487,490,3,208,104,0,488,489,5,59,0,0,489,491,3,24,12,0,
490,488,1,0,0,0,490,491,1,0,0,0,491,526,1,0,0,0,492,493,5,41,0,0,493,494,
3,370,185,0,494,495,5,44,0,0,495,498,1,0,0,0,496,498,3,372,186,0,497,492,
1,0,0,0,497,496,1,0,0,0,498,499,1,0,0,0,499,500,5,48,0,0,500,503,3,208,104,
0,501,502,5,59,0,0,502,504,3,24,12,0,503,501,1,0,0,0,503,504,1,0,0,0,504,
526,1,0,0,0,505,506,3,358,179,0,506,507,5,59,0,0,507,509,1,0,0,0,508,505,
1,0,0,0,509,510,1,0,0,0,510,508,1,0,0,0,510,511,1,0,0,0,511,514,1,0,0,0,
512,515,3,210,105,0,513,515,3,212,106,0,514,512,1,0,0,0,514,513,1,0,0,0,
515,517,1,0,0,0,516,518,5,92,0,0,517,516,1,0,0,0,517,518,1,0,0,0,518,526,
1,0,0,0,519,520,3,370,185,0,520,523,3,26,13,0,521,524,3,210,105,0,522,524,
3,212,106,0,523,521,1,0,0,0,523,522,1,0,0,0,524,526,1,0,0,0,525,485,1,0,
0,0,525,497,1,0,0,0,525,508,1,0,0,0,525,519,1,0,0,0,526,23,1,0,0,0,527,530,
3,210,105,0,528,530,3,212,106,0,529,527,1,0,0,0,529,528,1,0,0,0,530,25,1,
0,0,0,531,532,7,0,0,0,532,27,1,0,0,0,533,535,5,20,0,0,534,536,3,212,106,
0,535,534,1,0,0,0,535,536,1,0,0,0,536,29,1,0,0,0,537,543,5,15,0,0,538,541,
3,208,104,0,539,540,5,28,0,0,540,542,3,208,104,0,541,539,1,0,0,0,541,542,
1,0,0,0,542,544,1,0,0,0,543,538,1,0,0,0,543,544,1,0,0,0,544,31,1,0,0,0,545,
546,5,33,0,0,546,551,5,89,0,0,547,548,5,49,0,0,548,550,5,89,0,0,549,547,
1,0,0,0,550,553,1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,33,1,0,0,0,553,
551,1,0,0,0,554,555,5,29,0,0,555,560,5,89,0,0,556,557,5,49,0,0,557,559,5,
89,0,0,558,556,1,0,0,0,559,562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,
35,1,0,0,0,562,560,1,0,0,0,563,564,5,32,0,0,564,565,3,376,188,0,565,37,1,
0,0,0,566,567,3,210,105,0,567,39,1,0,0,0,568,569,5,31,0,0,569,572,3,208,
104,0,570,571,5,49,0,0,571,573,3,208,104,0,572,570,1,0,0,0,572,573,1,0,0,
0,573,41,1,0,0,0,574,577,3,44,22,0,575,577,3,46,23,0,576,574,1,0,0,0,576,
575,1,0,0,0,577,43,1,0,0,0,578,579,5,9,0,0,579,580,3,54,27,0,580,45,1,0,
0,0,581,585,5,28,0,0,582,584,7,1,0,0,583,582,1,0,0,0,584,587,1,0,0,0,585,
583,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,585,1,0,0,0,588,589,3,58,
29,0,589,590,5,9,0,0,590,591,3,48,24,0,591,601,1,0,0,0,592,594,5,28,0,0,
593,595,7,1,0,0,594,593,1,0,0,0,595,596,1,0,0,0,596,594,1,0,0,0,596,597,
1,0,0,0,597,598,1,0,0,0,598,599,5,9,0,0,599,601,3,48,24,0,600,581,1,0,0,
0,600,592,1,0,0,0,601,47,1,0,0,0,602,603,5,41,0,0,603,605,3,50,25,0,604,
606,5,49,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,608,5,44,
0,0,608,612,1,0,0,0,609,612,3,50,25,0,610,612,5,53,0,0,611,602,1,0,0,0,611,
609,1,0,0,0,611,610,1,0,0,0,612,49,1,0,0,0,613,618,3,52,26,0,614,615,5,49,
0,0,615,617,3,52,26,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,
619,1,0,0,0,619,51,1,0,0,0,620,618,1,0,0,0,621,624,5,89,0,0,622,623,5,26,
0,0,623,625,5,89,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,53,1,0,0,0,626,
631,3,56,28,0,627,628,5,49,0,0,628,630,3,56,28,0,629,627,1,0,0,0,630,633,
1,0,0,0,631,629,1,0,0,0,631,632,1,0,0,0,632,55,1,0,0,0,633,631,1,0,0,0,634,
637,3,58,29,0,635,636,5,26,0,0,636,638,5,89,0,0,637,635,1,0,0,0,637,638,
1,0,0,0,638,57,1,0,0,0,639,640,6,29,-1,0,640,641,5,89,0,0,641,647,1,0,0,
0,642,643,10,2,0,0,643,644,5,47,0,0,644,646,5,89,0,0,645,642,1,0,0,0,646,
649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,648,59,1,0,0,0,649,647,1,0,0,
0,650,651,5,93,0,0,651,652,5,1,0,0,652,653,3,10,5,0,653,654,5,2,0,0,654,
657,1,0,0,0,655,657,3,16,8,0,656,650,1,0,0,0,656,655,1,0,0,0,657,61,1,0,
0,0,658,659,5,83,0,0,659,660,3,222,111,0,660,661,5,93,0,0,661,663,1,0,0,
0,662,658,1,0,0,0,663,664,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,63,
1,0,0,0,666,667,3,62,31,0,667,668,3,66,33,0,668,671,1,0,0,0,669,671,3,66,
33,0,670,666,1,0,0,0,670,669,1,0,0,0,671,65,1,0,0,0,672,673,5,17,0,0,673,
675,5,89,0,0,674,676,3,198,99,0,675,674,1,0,0,0,675,676,1,0,0,0,676,682,
1,0,0,0,677,679,5,41,0,0,678,680,3,346,173,0,679,678,1,0,0,0,679,680,1,0,
0,0,680,681,1,0,0,0,681,683,5,44,0,0,682,677,1,0,0,0,682,683,1,0,0,0,683,
684,1,0,0,0,684,685,5,48,0,0,685,686,3,60,30,0,686,67,1,0,0,0,687,688,3,
62,31,0,688,689,3,70,35,0,689,692,1,0,0,0,690,692,3,70,35,0,691,687,1,0,
0,0,691,690,1,0,0,0,692,69,1,0,0,0,693,694,5,27,0,0,694,696,5,89,0,0,695,
697,3,198,99,0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,5,
41,0,0,699,701,3,72,36,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,
702,705,5,44,0,0,703,704,5,85,0,0,704,706,3,208,104,0,705,703,1,0,0,0,705,
706,1,0,0,0,706,707,1,0,0,0,707,709,5,48,0,0,708,710,3,384,192,0,709,708,
1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,733,3,60,30,0,712,713,5,36,0,
0,713,714,5,27,0,0,714,716,5,89,0,0,715,717,3,198,99,0,716,715,1,0,0,0,716,
717,1,0,0,0,717,718,1,0,0,0,718,720,5,41,0,0,719,721,3,72,36,0,720,719,1,
0,0,0,720,721,1,0,0,0,721,722,1,0,0,0,722,725,5,44,0,0,723,724,5,85,0,0,
724,726,3,208,104,0,725,723,1,0,0,0,725,726,1,0,0,0,726,727,1,0,0,0,727,
729,5,48,0,0,728,730,3,384,192,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,
1,0,0,0,731,733,3,60,30,0,732,693,1,0,0,0,732,712,1,0,0,0,733,71,1,0,0,0,
734,735,3,74,37,0,735,73,1,0,0,0,736,740,3,76,38,0,737,739,3,84,42,0,738,
737,1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,746,1,0,
0,0,742,740,1,0,0,0,743,745,3,88,44,0,744,743,1,0,0,0,745,748,1,0,0,0,746,
744,1,0,0,0,746,747,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,749,751,3,80,
40,0,750,749,1,0,0,0,750,751,1,0,0,0,751,786,1,0,0,0,752,756,3,78,39,0,753,
755,3,88,44,0,754,753,1,0,0,0,755,758,1,0,0,0,756,754,1,0,0,0,756,757,1,
0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,759,761,3,80,40,0,760,759,1,0,0,0,
760,761,1,0,0,0,761,786,1,0,0,0,762,764,3,84,42,0,763,762,1,0,0,0,764,765,
1,0,0,0,765,763,1,0,0,0,765,766,1,0,0,0,766,770,1,0,0,0,767,769,3,88,44,
0,768,767,1,0,0,0,769,772,1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,774,
1,0,0,0,772,770,1,0,0,0,773,775,3,80,40,0,774,773,1,0,0,0,774,775,1,0,0,
0,775,786,1,0,0,0,776,778,3,88,44,0,777,776,1,0,0,0,778,779,1,0,0,0,779,
777,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,783,3,80,40,0,782,781,1,
0,0,0,782,783,1,0,0,0,783,786,1,0,0,0,784,786,3,80,40,0,785,736,1,0,0,0,
785,752,1,0,0,0,785,763,1,0,0,0,785,777,1,0,0,0,785,784,1,0,0,0,786,75,1,
0,0,0,787,789,3,84,42,0,788,787,1,0,0,0,789,790,1,0,0,0,790,788,1,0,0,0,
790,791,1,0,0,0,791,792,1,0,0,0,792,794,5,54,0,0,793,795,5,49,0,0,794,793,
1,0,0,0,794,795,1,0,0,0,795,77,1,0,0,0,796,798,3,84,42,0,797,796,1,0,0,0,
798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,803,1,0,0,0,801,799,
1,0,0,0,802,804,3,88,44,0,803,802,1,0,0,0,804,805,1,0,0,0,805,803,1,0,0,
0,805,806,1,0,0,0,806,807,1,0,0,0,807,809,5,54,0,0,808,810,5,49,0,0,809,
808,1,0,0,0,809,810,1,0,0,0,810,79,1,0,0,0,811,812,5,53,0,0,812,816,3,84,
42,0,813,815,3,90,45,0,814,813,1,0,0,0,815,818,1,0,0,0,816,814,1,0,0,0,816,
817,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,819,821,3,82,41,0,820,819,1,
0,0,0,820,821,1,0,0,0,821,845,1,0,0,0,822,823,5,53,0,0,823,827,3,86,43,0,
824,826,3,90,45,0,825,824,1,0,0,0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,
1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,830,832,3,82,41,0,831,830,1,0,0,
0,831,832,1,0,0,0,832,845,1,0,0,0,833,834,5,53,0,0,834,836,5,49,0,0,835,
837,3,90,45,0,836,835,1,0,0,0,837,838,1,0,0,0,838,836,1,0,0,0,838,839,1,
0,0,0,839,841,1,0,0,0,840,842,3,82,41,0,841,840,1,0,0,0,841,842,1,0,0,0,
842,845,1,0,0,0,843,845,3,82,41,0,844,811,1,0,0,0,844,822,1,0,0,0,844,833,
1,0,0,0,844,843,1,0,0,0,845,81,1,0,0,0,846,847,5,69,0,0,847,848,3,84,42,
0,848,83,1,0,0,0,849,851,3,92,46,0,850,852,5,49,0,0,851,850,1,0,0,0,851,
852,1,0,0,0,852,854,1,0,0,0,853,855,5,92,0,0,854,853,1,0,0,0,854,855,1,0,
0,0,855,85,1,0,0,0,856,858,3,94,47,0,857,859,5,49,0,0,858,857,1,0,0,0,858,
859,1,0,0,0,859,861,1,0,0,0,860,862,5,92,0,0,861,860,1,0,0,0,861,862,1,0,
0,0,862,87,1,0,0,0,863,864,3,92,46,0,864,866,3,100,50,0,865,867,5,49,0,0,
866,865,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,870,5,92,0,0,869,868,
1,0,0,0,869,870,1,0,0,0,870,89,1,0,0,0,871,873,3,92,46,0,872,874,3,100,50,
0,873,872,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,877,5,49,0,0,876,875,
1,0,0,0,876,877,1,0,0,0,877,879,1,0,0,0,878,880,5,92,0,0,879,878,1,0,0,0,
879,880,1,0,0,0,880,91,1,0,0,0,881,883,5,89,0,0,882,884,3,96,48,0,883,882,
1,0,0,0,883,884,1,0,0,0,884,93,1,0,0,0,885,886,5,89,0,0,886,887,3,98,49,
0,887,95,1,0,0,0,888,889,5,48,0,0,889,890,3,208,104,0,890,97,1,0,0,0,891,
892,5,48,0,0,892,893,3,214,107,0,893,99,1,0,0,0,894,895,5,59,0,0,895,896,
3,208,104,0,896,101,1,0,0,0,897,898,5,38,0,0,898,899,3,222,111,0,899,900,
5,48,0,0,900,905,3,60,30,0,901,906,3,104,52,0,902,904,3,106,53,0,903,902,
1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,901,1,0,0,0,905,903,1,0,0,0,
906,103,1,0,0,0,907,908,5,37,0,0,908,909,3,222,111,0,909,910,5,48,0,0,910,
915,3,60,30,0,911,916,3,104,52,0,912,914,3,106,53,0,913,912,1,0,0,0,913,
914,1,0,0,0,914,916,1,0,0,0,915,911,1,0,0,0,915,913,1,0,0,0,916,105,1,0,
0,0,917,918,5,8,0,0,918,919,5,48,0,0,919,920,3,60,30,0,920,107,1,0,0,0,921,
922,5,30,0,0,922,923,3,222,111,0,923,924,5,48,0,0,924,926,3,60,30,0,925,
927,3,106,53,0,926,925,1,0,0,0,926,927,1,0,0,0,927,109,1,0,0,0,928,930,5,
36,0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,931,1,0,0,0,931,932,5,23,0,0,
932,933,3,358,179,0,933,934,5,14,0,0,934,935,3,212,106,0,935,937,5,48,0,
0,936,938,5,92,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,1,0,0,0,939,941,
3,60,30,0,940,942,3,106,53,0,941,940,1,0,0,0,941,942,1,0,0,0,942,111,1,0,
0,0,943,945,5,36,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
974,5,35,0,0,947,948,5,41,0,0,948,953,3,114,57,0,949,950,5,49,0,0,950,952,
3,114,57,0,951,949,1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,
0,954,957,1,0,0,0,955,953,1,0,0,0,956,958,5,49,0,0,957,956,1,0,0,0,957,958,
1,0,0,0,958,959,1,0,0,0,959,960,5,44,0,0,960,961,5,48,0,0,961,975,1,0,0,
0,962,967,3,114,57,0,963,964,5,49,0,0,964,966,3,114,57,0,965,963,1,0,0,0,
966,969,1,0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,967,
1,0,0,0,970,972,5,48,0,0,971,973,5,92,0,0,972,971,1,0,0,0,972,973,1,0,0,
0,973,975,1,0,0,0,974,947,1,0,0,0,974,962,1,0,0,0,975,976,1,0,0,0,976,977,
3,60,30,0,977,113,1,0,0,0,978,981,3,208,104,0,979,980,5,26,0,0,980,982,3,
364,182,0,981,979,1,0,0,0,981,982,1,0,0,0,982,115,1,0,0,0,983,984,5,25,0,
0,984,985,5,48,0,0,985,986,3,60,30,0,986,987,3,122,61,0,987,1017,1,0,0,0,
988,989,5,25,0,0,989,990,5,48,0,0,990,992,3,60,30,0,991,993,3,118,59,0,992,
991,1,0,0,0,993,994,1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,997,1,0,
0,0,996,998,3,106,53,0,997,996,1,0,0,0,997,998,1,0,0,0,998,1000,1,0,0,0,
999,1001,3,122,61,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1017,1,0,0,0,
1002,1003,5,25,0,0,1003,1004,5,48,0,0,1004,1006,3,60,30,0,1005,1007,3,120,
60,0,1006,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,
0,0,1009,1011,1,0,0,0,1010,1012,3,106,53,0,1011,1010,1,0,0,0,1011,1012,1,
0,0,0,1012,1014,1,0,0,0,1013,1015,3,122,61,0,1014,1013,1,0,0,0,1014,1015,
1,0,0,0,1015,1017,1,0,0,0,1016,983,1,0,0,0,1016,988,1,0,0,0,1016,1002,1,
0,0,0,1017,117,1,0,0,0,1018,1024,5,13,0,0,1019,1022,3,208,104,0,1020,1021,
5,26,0,0,1021,1023,5,89,0,0,1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,1025,
1,0,0,0,1024,1019,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,
5,48,0,0,1027,1028,3,60,30,0,1028,119,1,0,0,0,1029,1030,5,13,0,0,1030,1031,
5,53,0,0,1031,1034,3,208,104,0,1032,1033,5,26,0,0,1033,1035,5,89,0,0,1034,
1032,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,48,0,0,1037,
1038,3,60,30,0,1038,121,1,0,0,0,1039,1040,5,18,0,0,1040,1041,5,48,0,0,1041,
1042,3,60,30,0,1042,123,1,0,0,0,1043,1044,3,388,194,0,1044,1045,3,126,63,
0,1045,1046,5,48,0,0,1046,1047,5,93,0,0,1047,1049,5,1,0,0,1048,1050,3,128,
64,0,1049,1048,1,0,0,0,1050,1051,1,0,0,0,1051,1049,1,0,0,0,1051,1052,1,0,
0,0,1052,1053,1,0,0,0,1053,1054,5,2,0,0,1054,125,1,0,0,0,1055,1056,3,218,
109,0,1056,1058,5,49,0,0,1057,1059,3,216,108,0,1058,1057,1,0,0,0,1058,1059,
1,0,0,0,1059,1062,1,0,0,0,1060,1062,3,222,111,0,1061,1055,1,0,0,0,1061,1060,
1,0,0,0,1062,127,1,0,0,0,1063,1064,3,390,195,0,1064,1066,3,132,66,0,1065,
1067,3,130,65,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,1068,
1069,5,48,0,0,1069,1070,3,60,30,0,1070,129,1,0,0,0,1071,1072,5,38,0,0,1072,
1073,3,222,111,0,1073,131,1,0,0,0,1074,1077,3,172,86,0,1075,1077,3,134,67,
0,1076,1074,1,0,0,0,1076,1075,1,0,0,0,1077,133,1,0,0,0,1078,1081,3,136,68,
0,1079,1081,3,138,69,0,1080,1078,1,0,0,0,1080,1079,1,0,0,0,1081,135,1,0,
0,0,1082,1083,3,138,69,0,1083,1084,5,26,0,0,1084,1085,3,158,79,0,1085,137,
1,0,0,0,1086,1091,3,140,70,0,1087,1088,5,55,0,0,1088,1090,3,140,70,0,1089,
1087,1,0,0,0,1090,1093,1,0,0,0,1091,1089,1,0,0,0,1091,1092,1,0,0,0,1092,
139,1,0,0,0,1093,1091,1,0,0,0,1094,1103,3,142,71,0,1095,1103,3,156,78,0,
1096,1103,3,160,80,0,1097,1103,3,162,81,0,1098,1103,3,168,84,0,1099,1103,
3,170,85,0,1100,1103,3,180,90,0,1101,1103,3,188,94,0,1102,1094,1,0,0,0,1102,
1095,1,0,0,0,1102,1096,1,0,0,0,1102,1097,1,0,0,0,1102,1098,1,0,0,0,1102,
1099,1,0,0,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,141,1,0,0,0,1104,1111,
3,148,74,0,1105,1111,3,146,73,0,1106,1111,3,318,159,0,1107,1111,5,11,0,0,
1108,1111,5,16,0,0,1109,1111,5,6,0,0,1110,1104,1,0,0,0,1110,1105,1,0,0,0,
1110,1106,1,0,0,0,1110,1107,1,0,0,0,1110,1108,1,0,0,0,1110,1109,1,0,0,0,
1111,143,1,0,0,0,1112,1119,3,148,74,0,1113,1119,3,146,73,0,1114,1119,3,318,
159,0,1115,1119,5,11,0,0,1116,1119,5,16,0,0,1117,1119,5,6,0,0,1118,1112,
1,0,0,0,1118,1113,1,0,0,0,1118,1114,1,0,0,0,1118,1115,1,0,0,0,1118,1116,
1,0,0,0,1118,1117,1,0,0,0,1119,145,1,0,0,0,1120,1121,3,150,75,0,1121,1122,
7,2,0,0,1122,1123,3,154,77,0,1123,147,1,0,0,0,1124,1126,5,52,0,0,1125,1124,
1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,0,0,0,1127,1128,5,90,0,0,1128,149,
1,0,0,0,1129,1131,5,52,0,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,
1,0,0,0,1132,1133,3,152,76,0,1133,151,1,0,0,0,1134,1135,5,90,0,0,1135,153,
1,0,0,0,1136,1137,5,90,0,0,1137,155,1,0,0,0,1138,1139,3,158,79,0,1139,157,
1,0,0,0,1140,1141,3,394,197,0,1141,159,1,0,0,0,1142,1143,3,392,196,0,1143,
161,1,0,0,0,1144,1145,3,164,82,0,1145,163,1,0,0,0,1146,1149,5,89,0,0,1147,
1148,5,47,0,0,1148,1150,5,89,0,0,1149,1147,1,0,0,0,1150,1151,1,0,0,0,1151,
1149,1,0,0,0,1151,1152,1,0,0,0,1152,165,1,0,0,0,1153,1158,5,89,0,0,1154,
1155,5,47,0,0,1155,1157,5,89,0,0,1156,1154,1,0,0,0,1157,1160,1,0,0,0,1158,
1156,1,0,0,0,1158,1159,1,0,0,0,1159,167,1,0,0,0,1160,1158,1,0,0,0,1161,1162,
5,41,0,0,1162,1163,3,134,67,0,1163,1164,5,44,0,0,1164,169,1,0,0,0,1165,1167,
5,42,0,0,1166,1168,3,174,87,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,1169,
1,0,0,0,1169,1176,5,45,0,0,1170,1172,5,41,0,0,1171,1173,3,172,86,0,1172,
1171,1,0,0,0,1172,1173,1,0,0,0,1173,1174,1,0,0,0,1174,1176,5,44,0,0,1175,
1165,1,0,0,0,1175,1170,1,0,0,0,1176,171,1,0,0,0,1177,1178,3,176,88,0,1178,
1180,5,49,0,0,1179,1181,3,174,87,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,
173,1,0,0,0,1182,1187,3,176,88,0,1183,1184,5,49,0,0,1184,1186,3,176,88,0,
1185,1183,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,0,
1188,1191,1,0,0,0,1189,1187,1,0,0,0,1190,1192,5,49,0,0,1191,1190,1,0,0,0,
1191,1192,1,0,0,0,1192,175,1,0,0,0,1193,1196,3,178,89,0,1194,1196,3,134,
67,0,1195,1193,1,0,0,0,1195,1194,1,0,0,0,1196,177,1,0,0,0,1197,1198,5,53,
0,0,1198,1202,3,158,79,0,1199,1200,5,53,0,0,1200,1202,3,160,80,0,1201,1197,
1,0,0,0,1201,1199,1,0,0,0,1202,179,1,0,0,0,1203,1204,5,43,0,0,1204,1224,
5,46,0,0,1205,1206,5,43,0,0,1206,1208,3,186,93,0,1207,1209,5,49,0,0,1208,
1207,1,0,0,0,1208,1209,1,0,0,0,1209,1210,1,0,0,0,1210,1211,5,46,0,0,1211,
1224,1,0,0,0,1212,1213,5,43,0,0,1213,1216,3,182,91,0,1214,1215,5,49,0,0,
1215,1217,3,186,93,0,1216,1214,1,0,0,0,1216,1217,1,0,0,0,1217,1219,1,0,0,
0,1218,1220,5,49,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,
0,1221,1222,5,46,0,0,1222,1224,1,0,0,0,1223,1203,1,0,0,0,1223,1205,1,0,0,
0,1223,1212,1,0,0,0,1224,181,1,0,0,0,1225,1230,3,184,92,0,1226,1227,5,49,
0,0,1227,1229,3,184,92,0,1228,1226,1,0,0,0,1229,1232,1,0,0,0,1230,1228,1,
0,0,0,1230,1231,1,0,0,0,1231,183,1,0,0,0,1232,1230,1,0,0,0,1233,1236,3,144,
72,0,1234,1236,3,164,82,0,1235,1233,1,0,0,0,1235,1234,1,0,0,0,1236,1237,
1,0,0,0,1237,1238,5,48,0,0,1238,1239,3,134,67,0,1239,185,1,0,0,0,1240,1241,
5,69,0,0,1241,1242,3,158,79,0,1242,187,1,0,0,0,1243,1244,3,166,83,0,1244,
1256,5,41,0,0,1245,1248,3,190,95,0,1246,1247,5,49,0,0,1247,1249,3,192,96,
0,1248,1246,1,0,0,0,1248,1249,1,0,0,0,1249,1252,1,0,0,0,1250,1252,3,192,
96,0,1251,1245,1,0,0,0,1251,1250,1,0,0,0,1252,1254,1,0,0,0,1253,1255,5,49,
0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,1256,1251,1,0,
0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,5,44,0,0,1259,189,1,0,
0,0,1260,1265,3,134,67,0,1261,1262,5,49,0,0,1262,1264,3,134,67,0,1263,1261,
1,0,0,0,1264,1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,191,1,
0,0,0,1267,1265,1,0,0,0,1268,1273,3,194,97,0,1269,1270,5,49,0,0,1270,1272,
3,194,97,0,1271,1269,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,0,1273,1274,
1,0,0,0,1274,193,1,0,0,0,1275,1273,1,0,0,0,1276,1277,5,89,0,0,1277,1278,
5,59,0,0,1278,1279,3,134,67,0,1279,195,1,0,0,0,1280,1281,3,386,193,0,1281,
1283,5,89,0,0,1282,1284,3,198,99,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,
1285,1,0,0,0,1285,1286,5,59,0,0,1286,1287,3,208,104,0,1287,197,1,0,0,0,1288,
1289,5,42,0,0,1289,1290,3,200,100,0,1290,1291,5,45,0,0,1291,199,1,0,0,0,
1292,1297,3,202,101,0,1293,1294,5,49,0,0,1294,1296,3,202,101,0,1295,1293,
1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,0,1297,1298,1,0,0,0,1298,1301,
1,0,0,0,1299,1297,1,0,0,0,1300,1302,5,49,0,0,1301,1300,1,0,0,0,1301,1302,
1,0,0,0,1302,201,1,0,0,0,1303,1305,5,89,0,0,1304,1306,3,204,102,0,1305,1304,
1,0,0,0,1305,1306,1,0,0,0,1306,1320,1,0,0,0,1307,1308,5,53,0,0,1308,1311,
5,89,0,0,1309,1310,5,48,0,0,1310,1312,3,208,104,0,1311,1309,1,0,0,0,1311,
1312,1,0,0,0,1312,1320,1,0,0,0,1313,1314,5,69,0,0,1314,1317,5,89,0,0,1315,
1316,5,48,0,0,1316,1318,3,208,104,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,
1318,1320,1,0,0,0,1319,1303,1,0,0,0,1319,1307,1,0,0,0,1319,1313,1,0,0,0,
1320,203,1,0,0,0,1321,1322,5,48,0,0,1322,1323,3,208,104,0,1323,205,1,0,0,
0,1324,1329,3,208,104,0,1325,1326,5,49,0,0,1326,1328,3,208,104,0,1327,1325,
1,0,0,0,1328,1331,1,0,0,0,1329,1327,1,0,0,0,1329,1330,1,0,0,0,1330,1333,
1,0,0,0,1331,1329,1,0,0,0,1332,1334,5,49,0,0,1333,1332,1,0,0,0,1333,1334,
1,0,0,0,1334,207,1,0,0,0,1335,1341,3,224,112,0,1336,1337,5,38,0,0,1337,1338,
3,224,112,0,1338,1339,5,8,0,0,1339,1340,3,208,104,0,1340,1342,1,0,0,0,1341,
1336,1,0,0,0,1341,1342,1,0,0,0,1342,1345,1,0,0,0,1343,1345,3,282,141,0,1344,
1335,1,0,0,0,1344,1343,1,0,0,0,1345,209,1,0,0,0,1346,1352,5,40,0,0,1347,
1348,5,28,0,0,1348,1353,3,208,104,0,1349,1351,3,212,106,0,1350,1349,1,0,
0,0,1350,1351,1,0,0,0,1351,1353,1,0,0,0,1352,1347,1,0,0,0,1352,1350,1,0,
0,0,1353,211,1,0,0,0,1354,1359,3,214,107,0,1355,1356,5,49,0,0,1356,1358,
3,214,107,0,1357,1355,1,0,0,0,1358,1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,
1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1362,1364,5,49,0,0,1363,1362,
1,0,0,0,1363,1364,1,0,0,0,1364,213,1,0,0,0,1365,1366,5,53,0,0,1366,1369,
3,254,127,0,1367,1369,3,208,104,0,1368,1365,1,0,0,0,1368,1367,1,0,0,0,1369,
215,1,0,0,0,1370,1375,3,218,109,0,1371,1372,5,49,0,0,1372,1374,3,218,109,
0,1373,1371,1,0,0,0,1374,1377,1,0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,
0,1376,1379,1,0,0,0,1377,1375,1,0,0,0,1378,1380,5,49,0,0,1379,1378,1,0,0,
0,1379,1380,1,0,0,0,1380,217,1,0,0,0,1381,1382,5,53,0,0,1382,1385,3,254,
127,0,1383,1385,3,222,111,0,1384,1381,1,0,0,0,1384,1383,1,0,0,0,1385,219,
1,0,0,0,1386,1387,5,89,0,0,1387,1388,5,87,0,0,1388,1389,3,208,104,0,1389,
221,1,0,0,0,1390,1393,3,220,110,0,1391,1393,3,208,104,0,1392,1390,1,0,0,
0,1392,1391,1,0,0,0,1393,223,1,0,0,0,1394,1399,3,226,113,0,1395,1396,5,39,
0,0,1396,1398,3,226,113,0,1397,1395,1,0,0,0,1398,1401,1,0,0,0,1399,1397,
1,0,0,0,1399,1400,1,0,0,0,1400,225,1,0,0,0,1401,1399,1,0,0,0,1402,1407,3,
228,114,0,1403,1404,5,21,0,0,1404,1406,3,228,114,0,1405,1403,1,0,0,0,1406,
1409,1,0,0,0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,227,1,0,0,0,1409,1407,
1,0,0,0,1410,1411,5,34,0,0,1411,1414,3,228,114,0,1412,1414,3,230,115,0,1413,
1410,1,0,0,0,1413,1412,1,0,0,0,1414,229,1,0,0,0,1415,1419,3,254,127,0,1416,
1418,3,232,116,0,1417,1416,1,0,0,0,1418,1421,1,0,0,0,1419,1417,1,0,0,0,1419,
1420,1,0,0,0,1420,231,1,0,0,0,1421,1419,1,0,0,0,1422,1433,3,234,117,0,1423,
1433,3,236,118,0,1424,1433,3,238,119,0,1425,1433,3,240,120,0,1426,1433,3,
242,121,0,1427,1433,3,244,122,0,1428,1433,3,246,123,0,1429,1433,3,248,124,
0,1430,1433,3,250,125,0,1431,1433,3,252,126,0,1432,1422,1,0,0,0,1432,1423,
1,0,0,0,1432,1424,1,0,0,0,1432,1425,1,0,0,0,1432,1426,1,0,0,0,1432,1427,
1,0,0,0,1432,1428,1,0,0,0,1432,1429,1,0,0,0,1432,1430,1,0,0,0,1432,1431,
1,0,0,0,1433,233,1,0,0,0,1434,1435,5,61,0,0,1435,1436,3,254,127,0,1436,235,
1,0,0,0,1437,1438,5,62,0,0,1438,1439,3,254,127,0,1439,237,1,0,0,0,1440,1441,
5,63,0,0,1441,1442,3,254,127,0,1442,239,1,0,0,0,1443,1444,5,57,0,0,1444,
1445,3,254,127,0,1445,241,1,0,0,0,1446,1447,5,64,0,0,1447,1448,3,254,127,
0,1448,243,1,0,0,0,1449,1450,5,58,0,0,1450,1451,3,254,127,0,1451,245,1,0,
0,0,1452,1453,5,34,0,0,1453,1454,5,14,0,0,1454,1455,3,254,127,0,1455,247,
1,0,0,0,1456,1457,5,14,0,0,1457,1458,3,254,127,0,1458,249,1,0,0,0,1459,1460,
5,19,0,0,1460,1461,5,34,0,0,1461,1462,3,254,127,0,1462,251,1,0,0,0,1463,
1464,5,19,0,0,1464,1465,3,254,127,0,1465,253,1,0,0,0,1466,1467,6,127,-1,
0,1467,1468,3,256,128,0,1468,1474,1,0,0,0,1469,1470,10,2,0,0,1470,1471,5,
55,0,0,1471,1473,3,256,128,0,1472,1469,1,0,0,0,1473,1476,1,0,0,0,1474,1472,
1,0,0,0,1474,1475,1,0,0,0,1475,255,1,0,0,0,1476,1474,1,0,0,0,1477,1478,6,
128,-1,0,1478,1479,3,258,129,0,1479,1485,1,0,0,0,1480,1481,10,2,0,0,1481,
1482,5,66,0,0,1482,1484,3,258,129,0,1483,1480,1,0,0,0,1484,1487,1,0,0,0,
1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,257,1,0,0,0,1487,1485,1,0,0,0,1488,
1489,6,129,-1,0,1489,1490,3,260,130,0,1490,1496,1,0,0,0,1491,1492,10,2,0,
0,1492,1493,5,56,0,0,1493,1495,3,260,130,0,1494,1491,1,0,0,0,1495,1498,1,
0,0,0,1496,1494,1,0,0,0,1496,1497,1,0,0,0,1497,259,1,0,0,0,1498,1496,1,0,
0,0,1499,1500,6,130,-1,0,1500,1501,3,262,131,0,1501,1507,1,0,0,0,1502,1503,
10,2,0,0,1503,1504,7,3,0,0,1504,1506,3,262,131,0,1505,1502,1,0,0,0,1506,
1509,1,0,0,0,1507,1505,1,0,0,0,1507,1508,1,0,0,0,1508,261,1,0,0,0,1509,1507,
1,0,0,0,1510,1511,6,131,-1,0,1511,1512,3,264,132,0,1512,1518,1,0,0,0,1513,
1514,10,2,0,0,1514,1515,7,2,0,0,1515,1517,3,264,132,0,1516,1513,1,0,0,0,
1517,1520,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,263,1,0,0,0,1520,
1518,1,0,0,0,1521,1522,6,132,-1,0,1522,1523,3,266,133,0,1523,1529,1,0,0,
0,1524,1525,10,2,0,0,1525,1526,7,4,0,0,1526,1528,3,266,133,0,1527,1524,1,
0,0,0,1528,1531,1,0,0,0,1529,1527,1,0,0,0,1529,1530,1,0,0,0,1530,265,1,0,
0,0,1531,1529,1,0,0,0,1532,1533,5,51,0,0,1533,1540,3,266,133,0,1534,1535,
5,52,0,0,1535,1540,3,266,133,0,1536,1537,5,65,0,0,1537,1540,3,266,133,0,
1538,1540,3,268,134,0,1539,1532,1,0,0,0,1539,1534,1,0,0,0,1539,1536,1,0,
0,0,1539,1538,1,0,0,0,1540,267,1,0,0,0,1541,1544,3,270,135,0,1542,1543,5,
69,0,0,1543,1545,3,266,133,0,1544,1542,1,0,0,0,1544,1545,1,0,0,0,1545,269,
1,0,0,0,1546,1547,5,7,0,0,1547,1550,3,272,136,0,1548,1550,3,272,136,0,1549,
1546,1,0,0,0,1549,1548,1,0,0,0,1550,271,1,0,0,0,1551,1552,6,136,-1,0,1552,
1553,3,278,139,0,1553,1571,1,0,0,0,1554,1567,10,2,0,0,1555,1556,5,47,0,0,
1556,1568,5,89,0,0,1557,1568,3,342,171,0,1558,1560,5,41,0,0,1559,1561,3,
346,173,0,1560,1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,1568,
5,44,0,0,1563,1564,5,42,0,0,1564,1565,3,274,137,0,1565,1566,5,45,0,0,1566,
1568,1,0,0,0,1567,1555,1,0,0,0,1567,1557,1,0,0,0,1567,1558,1,0,0,0,1567,
1563,1,0,0,0,1568,1570,1,0,0,0,1569,1554,1,0,0,0,1570,1573,1,0,0,0,1571,
1569,1,0,0,0,1571,1572,1,0,0,0,1572,273,1,0,0,0,1573,1571,1,0,0,0,1574,1593,
3,276,138,0,1575,1578,3,276,138,0,1576,1578,3,352,176,0,1577,1575,1,0,0,
0,1577,1576,1,0,0,0,1578,1586,1,0,0,0,1579,1582,5,49,0,0,1580,1583,3,276,
138,0,1581,1583,3,352,176,0,1582,1580,1,0,0,0,1582,1581,1,0,0,0,1583,1585,
1,0,0,0,1584,1579,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,
1,0,0,0,1587,1590,1,0,0,0,1588,1586,1,0,0,0,1589,1591,5,49,0,0,1590,1589,
1,0,0,0,1590,1591,1,0,0,0,1591,1593,1,0,0,0,1592,1574,1,0,0,0,1592,1577,
1,0,0,0,1593,275,1,0,0,0,1594,1596,3,208,104,0,1595,1594,1,0,0,0,1595,1596,
1,0,0,0,1596,1597,1,0,0,0,1597,1599,5,48,0,0,1598,1600,3,208,104,0,1599,
1598,1,0,0,0,1599,1600,1,0,0,0,1600,1605,1,0,0,0,1601,1603,5,48,0,0,1602,
1604,3,208,104,0,1603,1602,1,0,0,0,1603,1604,1,0,0,0,1604,1606,1,0,0,0,1605,
1601,1,0,0,0,1605,1606,1,0,0,0,1606,1609,1,0,0,0,1607,1609,3,222,111,0,1608,
1595,1,0,0,0,1608,1607,1,0,0,0,1609,277,1,0,0,0,1610,1633,5,89,0,0,1611,
1633,5,16,0,0,1612,1633,5,6,0,0,1613,1633,5,11,0,0,1614,1633,3,318,159,0,
1615,1633,5,90,0,0,1616,1620,3,322,161,0,1617,1620,3,280,140,0,1618,1620,
3,342,171,0,1619,1616,1,0,0,0,1619,1617,1,0,0,0,1619,1618,1,0,0,0,1620,1633,
1,0,0,0,1621,1624,3,320,160,0,1622,1624,3,338,169,0,1623,1621,1,0,0,0,1623,
1622,1,0,0,0,1624,1633,1,0,0,0,1625,1630,3,326,163,0,1626,1630,3,324,162,
0,1627,1630,3,344,172,0,1628,1630,3,340,170,0,1629,1625,1,0,0,0,1629,1626,
1,0,0,0,1629,1627,1,0,0,0,1629,1628,1,0,0,0,1630,1633,1,0,0,0,1631,1633,
5,86,0,0,1632,1610,1,0,0,0,1632,1611,1,0,0,0,1632,1612,1,0,0,0,1632,1613,
1,0,0,0,1632,1614,1,0,0,0,1632,1615,1,0,0,0,1632,1619,1,0,0,0,1632,1623,
1,0,0,0,1632,1629,1,0,0,0,1632,1631,1,0,0,0,1633,279,1,0,0,0,1634,1637,5,
41,0,0,1635,1638,3,210,105,0,1636,1638,3,222,111,0,1637,1635,1,0,0,0,1637,
1636,1,0,0,0,1638,1639,1,0,0,0,1639,1640,5,44,0,0,1640,281,1,0,0,0,1641,
1643,5,24,0,0,1642,1644,3,284,142,0,1643,1642,1,0,0,0,1643,1644,1,0,0,0,
1644,1645,1,0,0,0,1645,1646,5,48,0,0,1646,1647,3,208,104,0,1647,283,1,0,
0,0,1648,1649,3,286,143,0,1649,285,1,0,0,0,1650,1654,3,288,144,0,1651,1653,
3,296,148,0,1652,1651,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,
1,0,0,0,1655,1660,1,0,0,0,1656,1654,1,0,0,0,1657,1659,3,298,149,0,1658,1657,
1,0,0,0,1659,1662,1,0,0,0,1660,1658,1,0,0,0,1660,1661,1,0,0,0,1661,1664,
1,0,0,0,1662,1660,1,0,0,0,1663,1665,3,292,146,0,1664,1663,1,0,0,0,1664,1665,
1,0,0,0,1665,1700,1,0,0,0,1666,1670,3,290,145,0,1667,1669,3,298,149,0,1668,
1667,1,0,0,0,1669,1672,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,
1674,1,0,0,0,1672,1670,1,0,0,0,1673,1675,3,292,146,0,1674,1673,1,0,0,0,1674,
1675,1,0,0,0,1675,1700,1,0,0,0,1676,1678,3,296,148,0,1677,1676,1,0,0,0,1678,
1679,1,0,0,0,1679,1677,1,0,0,0,1679,1680,1,0,0,0,1680,1684,1,0,0,0,1681,
1683,3,298,149,0,1682,1681,1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,0,0,1684,
1685,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1687,1689,3,292,146,0,1688,
1687,1,0,0,0,1688,1689,1,0,0,0,1689,1700,1,0,0,0,1690,1692,3,298,149,0,1691,
1690,1,0,0,0,1692,1693,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,
1696,1,0,0,0,1695,1697,3,292,146,0,1696,1695,1,0,0,0,1696,1697,1,0,0,0,1697,
1700,1,0,0,0,1698,1700,3,292,146,0,1699,1650,1,0,0,0,1699,1666,1,0,0,0,1699,
1677,1,0,0,0,1699,1691,1,0,0,0,1699,1698,1,0,0,0,1700,287,1,0,0,0,1701,1703,
3,296,148,0,1702,1701,1,0,0,0,1703,1704,1,0,0,0,1704,1702,1,0,0,0,1704,1705,
1,0,0,0,1705,1706,1,0,0,0,1706,1708,5,54,0,0,1707,1709,5,49,0,0,1708,1707,
1,0,0,0,1708,1709,1,0,0,0,1709,289,1,0,0,0,1710,1712,3,296,148,0,1711,1710,
1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,1717,
1,0,0,0,1715,1713,1,0,0,0,1716,1718,3,298,149,0,1717,1716,1,0,0,0,1718,1719,
1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,1721,1,0,0,0,1721,1723,
5,54,0,0,1722,1724,5,49,0,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,291,
1,0,0,0,1725,1726,5,53,0,0,1726,1730,3,296,148,0,1727,1729,3,300,150,0,1728,
1727,1,0,0,0,1729,1732,1,0,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,
1734,1,0,0,0,1732,1730,1,0,0,0,1733,1735,3,294,147,0,1734,1733,1,0,0,0,1734,
1735,1,0,0,0,1735,1748,1,0,0,0,1736,1737,5,53,0,0,1737,1739,5,49,0,0,1738,
1740,3,300,150,0,1739,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1739,1,0,0,0,1741,
1742,1,0,0,0,1742,1744,1,0,0,0,1743,1745,3,294,147,0,1744,1743,1,0,0,0,1744,
1745,1,0,0,0,1745,1748,1,0,0,0,1746,1748,3,294,147,0,1747,1725,1,0,0,0,1747,
1736,1,0,0,0,1747,1746,1,0,0,0,1748,293,1,0,0,0,1749,1750,5,69,0,0,1750,
1751,3,296,148,0,1751,295,1,0,0,0,1752,1754,3,302,151,0,1753,1755,5,49,0,
0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,297,1,0,0,0,1756,1757,3,302,151,
0,1757,1759,3,100,50,0,1758,1760,5,49,0,0,1759,1758,1,0,0,0,1759,1760,1,
0,0,0,1760,299,1,0,0,0,1761,1763,3,302,151,0,1762,1764,3,100,50,0,1763,1762,
1,0,0,0,1763,1764,1,0,0,0,1764,1766,1,0,0,0,1765,1767,5,49,0,0,1766,1765,
1,0,0,0,1766,1767,1,0,0,0,1767,301,1,0,0,0,1768,1769,5,89,0,0,1769,303,1,
0,0,0,1770,1773,3,306,153,0,1771,1773,5,4,0,0,1772,1770,1,0,0,0,1772,1771,
1,0,0,0,1773,305,1,0,0,0,1774,1777,5,43,0,0,1775,1778,3,210,105,0,1776,1778,
3,212,106,0,1777,1775,1,0,0,0,1777,1776,1,0,0,0,1778,1780,1,0,0,0,1779,1781,
5,59,0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,1782,1784,
3,308,154,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1786,1,0,0,0,1785,1787,
3,310,155,0,1786,1785,1,0,0,0,1786,1787,1,0,0,0,1787,1788,1,0,0,0,1788,1789,
5,46,0,0,1789,307,1,0,0,0,1790,1791,5,88,0,0,1791,1792,5,89,0,0,1792,309,
1,0,0,0,1793,1797,5,48,0,0,1794,1796,3,312,156,0,1795,1794,1,0,0,0,1796,
1799,1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,311,1,0,0,0,1799,1797,
1,0,0,0,1800,1803,5,4,0,0,1801,1803,3,306,153,0,1802,1800,1,0,0,0,1802,1801,
1,0,0,0,1803,313,1,0,0,0,1804,1808,5,3,0,0,1805,1807,3,304,152,0,1806,1805,
1,0,0,0,1807,1810,1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,1811,
1,0,0,0,1810,1808,1,0,0,0,1811,1812,5,5,0,0,1812,315,1,0,0,0,1813,1814,5,
91,0,0,1814,317,1,0,0,0,1815,1818,3,314,157,0,1816,1818,3,316,158,0,1817,
1815,1,0,0,0,1817,1816,1,0,0,0,1818,1819,1,0,0,0,1819,1817,1,0,0,0,1819,
1820,1,0,0,0,1820,319,1,0,0,0,1821,1823,5,42,0,0,1822,1824,3,216,108,0,1823,
1822,1,0,0,0,1823,1824,1,0,0,0,1824,1825,1,0,0,0,1825,1826,5,45,0,0,1826,
321,1,0,0,0,1827,1833,5,41,0,0,1828,1829,3,218,109,0,1829,1831,5,49,0,0,
1830,1832,3,216,108,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1834,1,0,
0,0,1833,1828,1,0,0,0,1833,1834,1,0,0,0,1834,1835,1,0,0,0,1835,1836,5,44,
0,0,1836,323,1,0,0,0,1837,1838,5,43,0,0,1838,1839,3,216,108,0,1839,1840,
5,46,0,0,1840,325,1,0,0,0,1841,1843,5,43,0,0,1842,1844,3,328,164,0,1843,
1842,1,0,0,0,1843,1844,1,0,0,0,1844,1845,1,0,0,0,1845,1846,5,46,0,0,1846,
327,1,0,0,0,1847,1852,3,330,165,0,1848,1849,5,49,0,0,1849,1851,3,330,165,
0,1850,1848,1,0,0,0,1851,1854,1,0,0,0,1852,1850,1,0,0,0,1852,1853,1,0,0,
0,1853,1856,1,0,0,0,1854,1852,1,0,0,0,1855,1857,5,49,0,0,1856,1855,1,0,0,
0,1856,1857,1,0,0,0,1857,329,1,0,0,0,1858,1859,5,69,0,0,1859,1862,3,254,
127,0,1860,1862,3,332,166,0,1861,1858,1,0,0,0,1861,1860,1,0,0,0,1862,331,
1,0,0,0,1863,1864,3,208,104,0,1864,1865,5,48,0,0,1865,1866,3,208,104,0,1866,
333,1,0,0,0,1867,1869,3,336,168,0,1868,1867,1,0,0,0,1869,1870,1,0,0,0,1870,
1868,1,0,0,0,1870,1871,1,0,0,0,1871,335,1,0,0,0,1872,1874,5,36,0,0,1873,
1872,1,0,0,0,1873,1874,1,0,0,0,1874,1875,1,0,0,0,1875,1876,5,23,0,0,1876,
1877,3,358,179,0,1877,1878,5,14,0,0,1878,1883,3,224,112,0,1879,1880,5,38,
0,0,1880,1882,3,224,112,0,1881,1879,1,0,0,0,1882,1885,1,0,0,0,1883,1881,
1,0,0,0,1883,1884,1,0,0,0,1884,337,1,0,0,0,1885,1883,1,0,0,0,1886,1887,5,
42,0,0,1887,1888,3,222,111,0,1888,1889,3,334,167,0,1889,1890,5,45,0,0,1890,
339,1,0,0,0,1891,1892,5,43,0,0,1892,1893,3,222,111,0,1893,1894,3,334,167,
0,1894,1895,5,46,0,0,1895,341,1,0,0,0,1896,1899,5,41,0,0,1897,1900,3,220,
110,0,1898,1900,3,208,104,0,1899,1897,1,0,0,0,1899,1898,1,0,0,0,1900,1901,
1,0,0,0,1901,1902,3,334,167,0,1902,1903,5,44,0,0,1903,343,1,0,0,0,1904,1905,
5,43,0,0,1905,1906,3,332,166,0,1906,1907,3,334,167,0,1907,1908,5,46,0,0,
1908,345,1,0,0,0,1909,1911,3,348,174,0,1910,1912,5,49,0,0,1911,1910,1,0,
0,0,1911,1912,1,0,0,0,1912,347,1,0,0,0,1913,1919,3,352,176,0,1914,1917,3,
220,110,0,1915,1917,3,208,104,0,1916,1914,1,0,0,0,1916,1915,1,0,0,0,1917,
1919,1,0,0,0,1918,1913,1,0,0,0,1918,1916,1,0,0,0,1919,1930,1,0,0,0,1920,
1926,5,49,0,0,1921,1927,3,352,176,0,1922,1925,3,220,110,0,1923,1925,3,208,
104,0,1924,1922,1,0,0,0,1924,1923,1,0,0,0,1925,1927,1,0,0,0,1926,1921,1,
0,0,0,1926,1924,1,0,0,0,1927,1929,1,0,0,0,1928,1920,1,0,0,0,1929,1932,1,
0,0,0,1930,1928,1,0,0,0,1930,1931,1,0,0,0,1931,1935,1,0,0,0,1932,1930,1,
0,0,0,1933,1934,5,49,0,0,1934,1936,3,350,175,0,1935,1933,1,0,0,0,1935,1936,
1,0,0,0,1936,1939,1,0,0,0,1937,1939,3,350,175,0,1938,1918,1,0,0,0,1938,1937,
1,0,0,0,1939,349,1,0,0,0,1940,1945,3,354,177,0,1941,1942,5,49,0,0,1942,1944,
3,354,177,0,1943,1941,1,0,0,0,1944,1947,1,0,0,0,1945,1943,1,0,0,0,1945,1946,
1,0,0,0,1946,1957,1,0,0,0,1947,1945,1,0,0,0,1948,1949,5,49,0,0,1949,1954,
3,356,178,0,1950,1951,5,49,0,0,1951,1953,3,356,178,0,1952,1950,1,0,0,0,1953,
1956,1,0,0,0,1954,1952,1,0,0,0,1954,1955,1,0,0,0,1955,1958,1,0,0,0,1956,
1954,1,0,0,0,1957,1948,1,0,0,0,1957,1958,1,0,0,0,1958,1968,1,0,0,0,1959,
1964,3,356,178,0,1960,1961,5,49,0,0,1961,1963,3,356,178,0,1962,1960,1,0,
0,0,1963,1966,1,0,0,0,1964,1962,1,0,0,0,1964,1965,1,0,0,0,1965,1968,1,0,
0,0,1966,1964,1,0,0,0,1967,1940,1,0,0,0,1967,1959,1,0,0,0,1968,351,1,0,0,
0,1969,1970,5,53,0,0,1970,1971,3,208,104,0,1971,353,1,0,0,0,1972,1973,5,
89,0,0,1973,1974,5,59,0,0,1974,1977,3,208,104,0,1975,1977,3,352,176,0,1976,
1972,1,0,0,0,1976,1975,1,0,0,0,1977,355,1,0,0,0,1978,1979,5,89,0,0,1979,
1980,5,59,0,0,1980,1984,3,208,104,0,1981,1982,5,69,0,0,1982,1984,3,208,104,
0,1983,1978,1,0,0,0,1983,1981,1,0,0,0,1984,357,1,0,0,0,1985,1990,3,364,182,
0,1986,1987,5,49,0,0,1987,1989,3,364,182,0,1988,1986,1,0,0,0,1989,1992,1,
0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,
0,0,0,1993,1995,5,49,0,0,1994,1993,1,0,0,0,1994,1995,1,0,0,0,1995,359,1,
0,0,0,1996,1999,3,364,182,0,1997,1998,5,49,0,0,1998,2000,3,364,182,0,1999,
1997,1,0,0,0,2000,2001,1,0,0,0,2001,1999,1,0,0,0,2001,2002,1,0,0,0,2002,
2004,1,0,0,0,2003,2005,5,49,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,2005,
361,1,0,0,0,2006,2017,3,364,182,0,2007,2018,5,49,0,0,2008,2009,5,49,0,0,
2009,2011,3,364,182,0,2010,2008,1,0,0,0,2011,2012,1,0,0,0,2012,2010,1,0,
0,0,2012,2013,1,0,0,0,2013,2015,1,0,0,0,2014,2016,5,49,0,0,2015,2014,1,0,
0,0,2015,2016,1,0,0,0,2016,2018,1,0,0,0,2017,2007,1,0,0,0,2017,2010,1,0,
0,0,2018,363,1,0,0,0,2019,2020,5,53,0,0,2020,2023,3,364,182,0,2021,2023,
3,366,183,0,2022,2019,1,0,0,0,2022,2021,1,0,0,0,2023,365,1,0,0,0,2024,2031,
3,374,187,0,2025,2026,5,47,0,0,2026,2032,5,89,0,0,2027,2028,5,42,0,0,2028,
2029,3,274,137,0,2029,2030,5,45,0,0,2030,2032,1,0,0,0,2031,2025,1,0,0,0,
2031,2027,1,0,0,0,2032,2035,1,0,0,0,2033,2035,3,368,184,0,2034,2024,1,0,
0,0,2034,2033,1,0,0,0,2035,367,1,0,0,0,2036,2052,5,89,0,0,2037,2038,5,41,
0,0,2038,2039,3,366,183,0,2039,2040,5,44,0,0,2040,2052,1,0,0,0,2041,2043,
5,41,0,0,2042,2044,3,362,181,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,
2045,1,0,0,0,2045,2052,5,44,0,0,2046,2048,5,42,0,0,2047,2049,3,360,180,0,
2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,2050,1,0,0,0,2050,2052,5,45,0,0,
2051,2036,1,0,0,0,2051,2037,1,0,0,0,2051,2041,1,0,0,0,2051,2046,1,0,0,0,
2052,369,1,0,0,0,2053,2060,3,372,186,0,2054,2060,5,89,0,0,2055,2056,5,41,
0,0,2056,2057,3,370,185,0,2057,2058,5,44,0,0,2058,2060,1,0,0,0,2059,2053,
1,0,0,0,2059,2054,1,0,0,0,2059,2055,1,0,0,0,2060,371,1,0,0,0,2061,2068,3,
374,187,0,2062,2063,5,47,0,0,2063,2069,5,89,0,0,2064,2065,5,42,0,0,2065,
2066,3,274,137,0,2066,2067,5,45,0,0,2067,2069,1,0,0,0,2068,2062,1,0,0,0,
2068,2064,1,0,0,0,2069,373,1,0,0,0,2070,2071,6,187,-1,0,2071,2072,3,278,
139,0,2072,2090,1,0,0,0,2073,2086,10,2,0,0,2074,2075,5,47,0,0,2075,2087,
5,89,0,0,2076,2077,5,42,0,0,2077,2078,3,274,137,0,2078,2079,5,45,0,0,2079,
2087,1,0,0,0,2080,2087,3,342,171,0,2081,2083,5,41,0,0,2082,2084,3,346,173,
0,2083,2082,1,0,0,0,2083,2084,1,0,0,0,2084,2085,1,0,0,0,2085,2087,5,44,0,
0,2086,2074,1,0,0,0,2086,2076,1,0,0,0,2086,2080,1,0,0,0,2086,2081,1,0,0,
0,2087,2089,1,0,0,0,2088,2073,1,0,0,0,2089,2092,1,0,0,0,2090,2088,1,0,0,
0,2090,2091,1,0,0,0,2091,375,1,0,0,0,2092,2090,1,0,0,0,2093,2098,3,378,189,
0,2094,2095,5,49,0,0,2095,2097,3,378,189,0,2096,2094,1,0,0,0,2097,2100,1,
0,0,0,2098,2096,1,0,0,0,2098,2099,1,0,0,0,2099,2102,1,0,0,0,2100,2098,1,
0,0,0,2101,2103,5,49,0,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,2103,377,1,
0,0,0,2104,2111,3,374,187,0,2105,2106,5,47,0,0,2106,2112,5,89,0,0,2107,2108,
5,42,0,0,2108,2109,3,274,137,0,2109,2110,5,45,0,0,2110,2112,1,0,0,0,2111,
2105,1,0,0,0,2111,2107,1,0,0,0,2112,2115,1,0,0,0,2113,2115,3,380,190,0,2114,
2104,1,0,0,0,2114,2113,1,0,0,0,2115,379,1,0,0,0,2116,2132,5,89,0,0,2117,
2118,5,41,0,0,2118,2119,3,378,189,0,2119,2120,5,44,0,0,2120,2132,1,0,0,0,
2121,2123,5,41,0,0,2122,2124,3,376,188,0,2123,2122,1,0,0,0,2123,2124,1,0,
0,0,2124,2125,1,0,0,0,2125,2132,5,44,0,0,2126,2128,5,42,0,0,2127,2129,3,
376,188,0,2128,2127,1,0,0,0,2128,2129,1,0,0,0,2129,2130,1,0,0,0,2130,2132,
5,45,0,0,2131,2116,1,0,0,0,2131,2117,1,0,0,0,2131,2121,1,0,0,0,2131,2126,
1,0,0,0,2132,381,1,0,0,0,2133,2138,3,208,104,0,2134,2135,5,49,0,0,2135,2137,
3,208,104,0,2136,2134,1,0,0,0,2137,2140,1,0,0,0,2138,2136,1,0,0,0,2138,2139,
1,0,0,0,2139,2153,1,0,0,0,2140,2138,1,0,0,0,2141,2151,5,49,0,0,2142,2143,
5,53,0,0,2143,2147,3,208,104,0,2144,2145,5,49,0,0,2145,2146,5,69,0,0,2146,
2148,3,208,104,0,2147,2144,1,0,0,0,2147,2148,1,0,0,0,2148,2152,1,0,0,0,2149,
2150,5,69,0,0,2150,2152,3,208,104,0,2151,2142,1,0,0,0,2151,2149,1,0,0,0,
2152,2154,1,0,0,0,2153,2141,1,0,0,0,2153,2154,1,0,0,0,2154,2165,1,0,0,0,
2155,2156,5,53,0,0,2156,2160,3,208,104,0,2157,2158,5,49,0,0,2158,2159,5,
69,0,0,2159,2161,3,208,104,0,2160,2157,1,0,0,0,2160,2161,1,0,0,0,2161,2165,
1,0,0,0,2162,2163,5,69,0,0,2163,2165,3,208,104,0,2164,2133,1,0,0,0,2164,
2155,1,0,0,0,2164,2162,1,0,0,0,2165,383,1,0,0,0,2166,2167,5,93,0,0,2167,
2170,5,92,0,0,2168,2170,5,92,0,0,2169,2166,1,0,0,0,2169,2168,1,0,0,0,2170,
385,1,0,0,0,2171,2172,4,193,9,0,2172,2173,5,89,0,0,2173,387,1,0,0,0,2174,
2175,4,194,10,0,2175,2176,5,89,0,0,2176,389,1,0,0,0,2177,2178,4,195,11,0,
2178,2179,5,89,0,0,2179,391,1,0,0,0,2180,2181,4,196,12,0,2181,2182,5,89,
0,0,2182,393,1,0,0,0,2183,2184,4,197,13,0,2184,2185,5,89,0,0,2185,395,1,
0,0,0,291,397,407,414,422,432,436,444,451,455,473,483,490,497,503,510,514,
517,523,525,529,535,541,543,551,560,572,576,585,596,600,605,611,618,624,
631,637,647,656,664,670,675,679,682,691,696,700,705,709,716,720,725,729,
732,740,746,750,756,760,765,770,774,779,782,785,790,794,799,805,809,816,
820,827,831,838,841,844,851,854,858,861,866,869,873,876,879,883,903,905,
913,915,926,929,937,941,944,953,957,967,972,974,981,994,997,1000,1008,1011,
1014,1016,1022,1024,1034,1051,1058,1061,1066,1076,1080,1091,1102,1110,1118,
1125,1130,1151,1158,1167,1172,1175,1180,1187,1191,1195,1201,1208,1216,1219,
1223,1230,1235,1248,1251,1254,1256,1265,1273,1283,1297,1301,1305,1311,1317,
1319,1329,1333,1341,1344,1350,1352,1359,1363,1368,1375,1379,1384,1392,1399,
1407,1413,1419,1432,1474,1485,1496,1507,1518,1529,1539,1544,1549,1560,1567,
1571,1577,1582,1586,1590,1592,1595,1599,1603,1605,1608,1619,1623,1629,1632,
1637,1643,1654,1660,1664,1670,1674,1679,1684,1688,1693,1696,1699,1704,1708,
1713,1719,1723,1730,1734,1741,1744,1747,1754,1759,1763,1766,1772,1777,1780,
1783,1786,1797,1802,1808,1817,1819,1823,1831,1833,1843,1852,1856,1861,1870,
1873,1883,1899,1911,1916,1918,1924,1926,1930,1935,1938,1945,1954,1957,1964,
1967,1976,1983,1990,1994,2001,2004,2012,2015,2017,2022,2031,2034,2043,2048,
2051,2059,2068,2083,2086,2090,2098,2102,2111,2114,2123,2128,2131,2138,2147,
2151,2153,2160,2164,2169];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class PythonParser extends PythonParserBase {

    static grammarFileName = "PythonParser.g4";
    static literalNames = [ null, null, null, null, null, null, "'False'", 
                            "'await'", "'else'", "'import'", "'pass'", "'None'", 
                            "'break'", "'except'", "'in'", "'raise'", "'True'", 
                            "'class'", "'finally'", "'is'", "'return'", 
                            "'and'", "'continue'", "'for'", "'lambda'", 
                            "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
                            "'while'", "'assert'", "'del'", "'global'", 
                            "'not'", "'with'", "'async'", "'elif'", "'if'", 
                            "'or'", "'yield'", "'('", "'['", null, "')'", 
                            "']'", null, "'.'", "':'", "','", "';'", "'+'", 
                            "'-'", "'*'", "'/'", "'|'", "'&'", "'<'", "'>'", 
                            "'='", "'%'", "'=='", "'!='", "'<='", "'>='", 
                            "'~'", "'^'", "'<<'", "'>>'", "'**'", "'+='", 
                            "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                            "'^='", "'<<='", "'>>='", "'**='", "'//'", "'//='", 
                            "'@'", "'@='", "'->'", "'...'", "':='", "'!'" ];
    static symbolicNames = [ null, "INDENT", "DEDENT", "FSTRING_START", 
                             "FSTRING_MIDDLE", "FSTRING_END", "FALSE", "AWAIT", 
                             "ELSE", "IMPORT", "PASS", "NONE", "BREAK", 
                             "EXCEPT", "IN", "RAISE", "TRUE", "CLASS", "FINALLY", 
                             "IS", "RETURN", "AND", "CONTINUE", "FOR", "LAMBDA", 
                             "TRY", "AS", "DEF", "FROM", "NONLOCAL", "WHILE", 
                             "ASSERT", "DEL", "GLOBAL", "NOT", "WITH", "ASYNC", 
                             "ELIF", "IF", "OR", "YIELD", "LPAR", "LSQB", 
                             "LBRACE", "RPAR", "RSQB", "RBRACE", "DOT", 
                             "COLON", "COMMA", "SEMI", "PLUS", "MINUS", 
                             "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", 
                             "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", 
                             "LESSEQUAL", "GREATEREQUAL", "TILDE", "CIRCUMFLEX", 
                             "LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", 
                             "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", 
                             "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", 
                             "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", 
                             "DOUBLESLASH", "DOUBLESLASHEQUAL", "AT", "ATEQUAL", 
                             "RARROW", "ELLIPSIS", "COLONEQUAL", "EXCLAMATION", 
                             "NAME", "NUMBER", "STRING", "TYPE_COMMENT", 
                             "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
                             "ERROR_TOKEN" ];
    static ruleNames = [ "file_input", "interactive", "eval", "func_type", 
                         "fstring_input", "statements", "statement", "statement_newline", 
                         "simple_stmts", "simple_stmt", "compound_stmt", 
                         "assignment", "annotated_rhs", "augassign", "return_stmt", 
                         "raise_stmt", "global_stmt", "nonlocal_stmt", "del_stmt", 
                         "yield_stmt", "assert_stmt", "import_stmt", "import_name", 
                         "import_from", "import_from_targets", "import_from_as_names", 
                         "import_from_as_name", "dotted_as_names", "dotted_as_name", 
                         "dotted_name", "block", "decorators", "class_def", 
                         "class_def_raw", "function_def", "function_def_raw", 
                         "params", "parameters", "slash_no_default", "slash_with_default", 
                         "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
                         "param_with_default", "param_maybe_default", "param", 
                         "param_star_annotation", "annotation", "star_annotation", 
                         "default_assignment", "if_stmt", "elif_stmt", "else_block", 
                         "while_stmt", "for_stmt", "with_stmt", "with_item", 
                         "try_stmt", "except_block", "except_star_block", 
                         "finally_block", "match_stmt", "subject_expr", 
                         "case_block", "guard", "patterns", "pattern", "as_pattern", 
                         "or_pattern", "closed_pattern", "literal_pattern", 
                         "literal_expr", "complex_number", "signed_number", 
                         "signed_real_number", "real_number", "imaginary_number", 
                         "capture_pattern", "pattern_capture_target", "wildcard_pattern", 
                         "value_pattern", "attr", "name_or_attr", "group_pattern", 
                         "sequence_pattern", "open_sequence_pattern", "maybe_sequence_pattern", 
                         "maybe_star_pattern", "star_pattern", "mapping_pattern", 
                         "items_pattern", "key_value_pattern", "double_star_pattern", 
                         "class_pattern", "positional_patterns", "keyword_patterns", 
                         "keyword_pattern", "type_alias", "type_params", 
                         "type_param_seq", "type_param", "type_param_bound", 
                         "expressions", "expression", "yield_expr", "star_expressions", 
                         "star_expression", "star_named_expressions", "star_named_expression", 
                         "assignment_expression", "named_expression", "disjunction", 
                         "conjunction", "inversion", "comparison", "compare_op_bitwise_or_pair", 
                         "eq_bitwise_or", "noteq_bitwise_or", "lte_bitwise_or", 
                         "lt_bitwise_or", "gte_bitwise_or", "gt_bitwise_or", 
                         "notin_bitwise_or", "in_bitwise_or", "isnot_bitwise_or", 
                         "is_bitwise_or", "bitwise_or", "bitwise_xor", "bitwise_and", 
                         "shift_expr", "sum", "term", "factor", "power", 
                         "await_primary", "primary", "slices", "slice", 
                         "atom", "group", "lambdef", "lambda_params", "lambda_parameters", 
                         "lambda_slash_no_default", "lambda_slash_with_default", 
                         "lambda_star_etc", "lambda_kwds", "lambda_param_no_default", 
                         "lambda_param_with_default", "lambda_param_maybe_default", 
                         "lambda_param", "fstring_middle", "fstring_replacement_field", 
                         "fstring_conversion", "fstring_full_format_spec", 
                         "fstring_format_spec", "fstring", "string", "strings", 
                         "list", "tuple", "set", "dict", "double_starred_kvpairs", 
                         "double_starred_kvpair", "kvpair", "for_if_clauses", 
                         "for_if_clause", "listcomp", "setcomp", "genexp", 
                         "dictcomp", "arguments", "args", "kwargs", "starred_expression", 
                         "kwarg_or_starred", "kwarg_or_double_starred", 
                         "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
                         "star_target", "target_with_star_atom", "star_atom", 
                         "single_target", "single_subscript_attribute_target", 
                         "t_primary", "del_targets", "del_target", "del_t_atom", 
                         "type_expressions", "func_type_comment", "soft_kw_type", 
                         "soft_kw_match", "soft_kw_case", "soft_kw_wildcard", 
                         "soft_kw__not__wildcard" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = PythonParser.ruleNames;
        this.literalNames = PythonParser.literalNames;
        this.symbolicNames = PythonParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 29:
    	    		return this.dotted_name_sempred(localctx, predIndex);
    	case 127:
    	    		return this.bitwise_or_sempred(localctx, predIndex);
    	case 128:
    	    		return this.bitwise_xor_sempred(localctx, predIndex);
    	case 129:
    	    		return this.bitwise_and_sempred(localctx, predIndex);
    	case 130:
    	    		return this.shift_expr_sempred(localctx, predIndex);
    	case 131:
    	    		return this.sum_sempred(localctx, predIndex);
    	case 132:
    	    		return this.term_sempred(localctx, predIndex);
    	case 136:
    	    		return this.primary_sempred(localctx, predIndex);
    	case 187:
    	    		return this.t_primary_sempred(localctx, predIndex);
    	case 193:
    	    		return this.soft_kw_type_sempred(localctx, predIndex);
    	case 194:
    	    		return this.soft_kw_match_sempred(localctx, predIndex);
    	case 195:
    	    		return this.soft_kw_case_sempred(localctx, predIndex);
    	case 196:
    	    		return this.soft_kw_wildcard_sempred(localctx, predIndex);
    	case 197:
    	    		return this.soft_kw__not__wildcard_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    dotted_name_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bitwise_or_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bitwise_xor_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bitwise_and_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shift_expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    sum_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    term_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    primary_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    t_primary_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    soft_kw_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.isEqualToCurrentTokenText("type");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    soft_kw_match_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.isEqualToCurrentTokenText("match");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    soft_kw_case_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return this.isEqualToCurrentTokenText("case");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    soft_kw_wildcard_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 12:
    			return this.isEqualToCurrentTokenText("_");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    soft_kw__not__wildcard_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.isnotEqualToCurrentTokenText("_");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	file_input() {
	    let localctx = new File_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, PythonParser.RULE_file_input);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        if(la_===1) {
	            this.state = 396;
	            this.statements();

	        }
	        this.state = 399;
	        this.match(PythonParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interactive() {
	    let localctx = new InteractiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, PythonParser.RULE_interactive);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.statement_newline();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eval() {
	    let localctx = new EvalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, PythonParser.RULE_eval);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.expressions();
	        this.state = 407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 404;
	            this.match(PythonParser.NEWLINE);
	            this.state = 409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 410;
	        this.match(PythonParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_type() {
	    let localctx = new Func_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, PythonParser.RULE_func_type);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(PythonParser.LPAR);
	        this.state = 414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7471105) !== 0)) {
	            this.state = 413;
	            this.type_expressions();
	        }

	        this.state = 416;
	        this.match(PythonParser.RPAR);
	        this.state = 417;
	        this.match(PythonParser.RARROW);
	        this.state = 418;
	        this.expression();
	        this.state = 422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===93) {
	            this.state = 419;
	            this.match(PythonParser.NEWLINE);
	            this.state = 424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 425;
	        this.match(PythonParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_input() {
	    let localctx = new Fstring_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, PythonParser.RULE_fstring_input);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.star_expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, PythonParser.RULE_statements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 429;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 432; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, PythonParser.RULE_statement);
	    try {
	        this.state = 436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 434;
	            this.compound_stmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 435;
	            this.simple_stmts();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement_newline() {
	    let localctx = new Statement_newlineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, PythonParser.RULE_statement_newline);
	    try {
	        this.state = 444;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 438;
	            this.compound_stmt();
	            this.state = 439;
	            this.match(PythonParser.NEWLINE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 441;
	            this.simple_stmts();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 442;
	            this.match(PythonParser.NEWLINE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 443;
	            this.match(PythonParser.EOF);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmts() {
	    let localctx = new Simple_stmtsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, PythonParser.RULE_simple_stmts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 446;
	        this.simple_stmt();
	        this.state = 451;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 447;
	                this.match(PythonParser.SEMI);
	                this.state = 448;
	                this.simple_stmt(); 
	            }
	            this.state = 453;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50) {
	            this.state = 454;
	            this.match(PythonParser.SEMI);
	        }

	        this.state = 457;
	        this.match(PythonParser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmt() {
	    let localctx = new Simple_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, PythonParser.RULE_simple_stmt);
	    try {
	        this.state = 473;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 459;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 460;
	            this.type_alias();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 461;
	            this.star_expressions();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 462;
	            this.return_stmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 463;
	            this.import_stmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 464;
	            this.raise_stmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 465;
	            this.match(PythonParser.PASS);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 466;
	            this.del_stmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 467;
	            this.yield_stmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 468;
	            this.assert_stmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 469;
	            this.match(PythonParser.BREAK);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 470;
	            this.match(PythonParser.CONTINUE);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 471;
	            this.global_stmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 472;
	            this.nonlocal_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_stmt() {
	    let localctx = new Compound_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, PythonParser.RULE_compound_stmt);
	    try {
	        this.state = 483;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 475;
	            this.function_def();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 476;
	            this.if_stmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 477;
	            this.class_def();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 478;
	            this.with_stmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 479;
	            this.for_stmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 480;
	            this.try_stmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 481;
	            this.while_stmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 482;
	            this.match_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, PythonParser.RULE_assignment);
	    var _la = 0;
	    try {
	        this.state = 525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 485;
	            this.match(PythonParser.NAME);
	            this.state = 486;
	            this.match(PythonParser.COLON);
	            this.state = 487;
	            this.expression();
	            this.state = 490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 488;
	                this.match(PythonParser.EQUAL);
	                this.state = 489;
	                this.annotated_rhs();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 492;
	                this.match(PythonParser.LPAR);
	                this.state = 493;
	                this.single_target();
	                this.state = 494;
	                this.match(PythonParser.RPAR);
	                break;

	            case 2:
	                this.state = 496;
	                this.single_subscript_attribute_target();
	                break;

	            }
	            this.state = 499;
	            this.match(PythonParser.COLON);
	            this.state = 500;
	            this.expression();
	            this.state = 503;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 501;
	                this.match(PythonParser.EQUAL);
	                this.state = 502;
	                this.annotated_rhs();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 508; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 505;
	            		this.star_targets();
	            		this.state = 506;
	            		this.match(PythonParser.EQUAL);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 510; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,14, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 514;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 40:
	                this.state = 512;
	                this.yield_expr();
	                break;
	            case 3:
	            case 6:
	            case 7:
	            case 11:
	            case 16:
	            case 24:
	            case 34:
	            case 41:
	            case 42:
	            case 43:
	            case 51:
	            case 52:
	            case 53:
	            case 65:
	            case 86:
	            case 89:
	            case 90:
	            case 91:
	                this.state = 513;
	                this.star_expressions();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 516;
	                this.match(PythonParser.TYPE_COMMENT);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 519;
	            this.single_target();
	            this.state = 520;
	            this.augassign();
	            this.state = 523;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 40:
	                this.state = 521;
	                this.yield_expr();
	                break;
	            case 3:
	            case 6:
	            case 7:
	            case 11:
	            case 16:
	            case 24:
	            case 34:
	            case 41:
	            case 42:
	            case 43:
	            case 51:
	            case 52:
	            case 53:
	            case 65:
	            case 86:
	            case 89:
	            case 90:
	            case 91:
	                this.state = 522;
	                this.star_expressions();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotated_rhs() {
	    let localctx = new Annotated_rhsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, PythonParser.RULE_annotated_rhs);
	    try {
	        this.state = 529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 527;
	            this.yield_expr();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 53:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 528;
	            this.star_expressions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	augassign() {
	    let localctx = new AugassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, PythonParser.RULE_augassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 531;
	        _la = this._input.LA(1);
	        if(!(((((_la - 70)) & ~0x1f) === 0 && ((1 << (_la - 70)) & 22527) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_stmt() {
	    let localctx = new Return_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, PythonParser.RULE_return_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 533;
	        this.match(PythonParser.RETURN);
	        this.state = 535;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	            this.state = 534;
	            this.star_expressions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_stmt() {
	    let localctx = new Raise_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, PythonParser.RULE_raise_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this.match(PythonParser.RAISE);
	        this.state = 543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	            this.state = 538;
	            this.expression();
	            this.state = 541;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 539;
	                this.match(PythonParser.FROM);
	                this.state = 540;
	                this.expression();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_stmt() {
	    let localctx = new Global_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, PythonParser.RULE_global_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.match(PythonParser.GLOBAL);
	        this.state = 546;
	        this.match(PythonParser.NAME);
	        this.state = 551;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 547;
	            this.match(PythonParser.COMMA);
	            this.state = 548;
	            this.match(PythonParser.NAME);
	            this.state = 553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonlocal_stmt() {
	    let localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, PythonParser.RULE_nonlocal_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(PythonParser.NONLOCAL);
	        this.state = 555;
	        this.match(PythonParser.NAME);
	        this.state = 560;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 556;
	            this.match(PythonParser.COMMA);
	            this.state = 557;
	            this.match(PythonParser.NAME);
	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_stmt() {
	    let localctx = new Del_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, PythonParser.RULE_del_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.match(PythonParser.DEL);
	        this.state = 564;
	        this.del_targets();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_stmt() {
	    let localctx = new Yield_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, PythonParser.RULE_yield_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 566;
	        this.yield_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assert_stmt() {
	    let localctx = new Assert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, PythonParser.RULE_assert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this.match(PythonParser.ASSERT);
	        this.state = 569;
	        this.expression();
	        this.state = 572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 570;
	            this.match(PythonParser.COMMA);
	            this.state = 571;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, PythonParser.RULE_import_stmt);
	    try {
	        this.state = 576;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 574;
	            this.import_name();
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            this.import_from();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_name() {
	    let localctx = new Import_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, PythonParser.RULE_import_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 578;
	        this.match(PythonParser.IMPORT);
	        this.state = 579;
	        this.dotted_as_names();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from() {
	    let localctx = new Import_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, PythonParser.RULE_import_from);
	    var _la = 0;
	    try {
	        this.state = 600;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 581;
	            this.match(PythonParser.FROM);
	            this.state = 585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===47 || _la===86) {
	                this.state = 582;
	                _la = this._input.LA(1);
	                if(!(_la===47 || _la===86)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 587;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 588;
	            this.dotted_name(0);
	            this.state = 589;
	            this.match(PythonParser.IMPORT);
	            this.state = 590;
	            this.import_from_targets();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 592;
	            this.match(PythonParser.FROM);
	            this.state = 594; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 593;
	                _la = this._input.LA(1);
	                if(!(_la===47 || _la===86)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 596; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===47 || _la===86);
	            this.state = 598;
	            this.match(PythonParser.IMPORT);
	            this.state = 599;
	            this.import_from_targets();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from_targets() {
	    let localctx = new Import_from_targetsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, PythonParser.RULE_import_from_targets);
	    var _la = 0;
	    try {
	        this.state = 611;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 41:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 602;
	            this.match(PythonParser.LPAR);
	            this.state = 603;
	            this.import_from_as_names();
	            this.state = 605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 604;
	                this.match(PythonParser.COMMA);
	            }

	            this.state = 607;
	            this.match(PythonParser.RPAR);
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 609;
	            this.import_from_as_names();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 610;
	            this.match(PythonParser.STAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from_as_names() {
	    let localctx = new Import_from_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, PythonParser.RULE_import_from_as_names);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 613;
	        this.import_from_as_name();
	        this.state = 618;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,32,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 614;
	                this.match(PythonParser.COMMA);
	                this.state = 615;
	                this.import_from_as_name(); 
	            }
	            this.state = 620;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,32,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from_as_name() {
	    let localctx = new Import_from_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, PythonParser.RULE_import_from_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 621;
	        this.match(PythonParser.NAME);
	        this.state = 624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 622;
	            this.match(PythonParser.AS);
	            this.state = 623;
	            this.match(PythonParser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_names() {
	    let localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, PythonParser.RULE_dotted_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 626;
	        this.dotted_as_name();
	        this.state = 631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===49) {
	            this.state = 627;
	            this.match(PythonParser.COMMA);
	            this.state = 628;
	            this.dotted_as_name();
	            this.state = 633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_name() {
	    let localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, PythonParser.RULE_dotted_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.dotted_name(0);
	        this.state = 637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 635;
	            this.match(PythonParser.AS);
	            this.state = 636;
	            this.match(PythonParser.NAME);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	dotted_name(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Dotted_nameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 58;
	    this.enterRecursionRule(localctx, 58, PythonParser.RULE_dotted_name, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.match(PythonParser.NAME);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 647;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Dotted_nameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_dotted_name);
	                this.state = 642;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 643;
	                this.match(PythonParser.DOT);
	                this.state = 644;
	                this.match(PythonParser.NAME); 
	            }
	            this.state = 649;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, PythonParser.RULE_block);
	    try {
	        this.state = 656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 650;
	            this.match(PythonParser.NEWLINE);
	            this.state = 651;
	            this.match(PythonParser.INDENT);
	            this.state = 652;
	            this.statements();
	            this.state = 653;
	            this.match(PythonParser.DEDENT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.simple_stmts();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorators() {
	    let localctx = new DecoratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, PythonParser.RULE_decorators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 662; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 658;
	            this.match(PythonParser.AT);
	            this.state = 659;
	            this.named_expression();
	            this.state = 660;
	            this.match(PythonParser.NEWLINE);
	            this.state = 664; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===83);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_def() {
	    let localctx = new Class_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, PythonParser.RULE_class_def);
	    try {
	        this.state = 670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 666;
	            this.decorators();
	            this.state = 667;
	            this.class_def_raw();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 669;
	            this.class_def_raw();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_def_raw() {
	    let localctx = new Class_def_rawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, PythonParser.RULE_class_def_raw);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 672;
	        this.match(PythonParser.CLASS);
	        this.state = 673;
	        this.match(PythonParser.NAME);
	        this.state = 675;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 674;
	            this.type_params();
	        }

	        this.state = 682;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 677;
	            this.match(PythonParser.LPAR);
	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7471105) !== 0)) {
	                this.state = 678;
	                this.arguments();
	            }

	            this.state = 681;
	            this.match(PythonParser.RPAR);
	        }

	        this.state = 684;
	        this.match(PythonParser.COLON);
	        this.state = 685;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_def() {
	    let localctx = new Function_defContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, PythonParser.RULE_function_def);
	    try {
	        this.state = 691;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 83:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 687;
	            this.decorators();
	            this.state = 688;
	            this.function_def_raw();
	            break;
	        case 27:
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 690;
	            this.function_def_raw();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_def_raw() {
	    let localctx = new Function_def_rawContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, PythonParser.RULE_function_def_raw);
	    var _la = 0;
	    try {
	        this.state = 732;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 27:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.match(PythonParser.DEF);
	            this.state = 694;
	            this.match(PythonParser.NAME);
	            this.state = 696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 695;
	                this.type_params();
	            }

	            this.state = 698;
	            this.match(PythonParser.LPAR);
	            this.state = 700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69 || _la===89) {
	                this.state = 699;
	                this.params();
	            }

	            this.state = 702;
	            this.match(PythonParser.RPAR);
	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 703;
	                this.match(PythonParser.RARROW);
	                this.state = 704;
	                this.expression();
	            }

	            this.state = 707;
	            this.match(PythonParser.COLON);
	            this.state = 709;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 708;
	                this.func_type_comment();

	            }
	            this.state = 711;
	            this.block();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 712;
	            this.match(PythonParser.ASYNC);
	            this.state = 713;
	            this.match(PythonParser.DEF);
	            this.state = 714;
	            this.match(PythonParser.NAME);
	            this.state = 716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 715;
	                this.type_params();
	            }

	            this.state = 718;
	            this.match(PythonParser.LPAR);
	            this.state = 720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69 || _la===89) {
	                this.state = 719;
	                this.params();
	            }

	            this.state = 722;
	            this.match(PythonParser.RPAR);
	            this.state = 725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 723;
	                this.match(PythonParser.RARROW);
	                this.state = 724;
	                this.expression();
	            }

	            this.state = 727;
	            this.match(PythonParser.COLON);
	            this.state = 729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            if(la_===1) {
	                this.state = 728;
	                this.func_type_comment();

	            }
	            this.state = 731;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	params() {
	    let localctx = new ParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, PythonParser.RULE_params);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 734;
	        this.parameters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, PythonParser.RULE_parameters);
	    var _la = 0;
	    try {
	        this.state = 785;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 736;
	            this.slash_no_default();
	            this.state = 740;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,53,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 737;
	                    this.param_no_default(); 
	                }
	                this.state = 742;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,53,this._ctx);
	            }

	            this.state = 746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 743;
	                this.param_with_default();
	                this.state = 748;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 750;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 749;
	                this.star_etc();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.slash_with_default();
	            this.state = 756;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 753;
	                this.param_with_default();
	                this.state = 758;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 759;
	                this.star_etc();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 763; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 762;
	            		this.param_no_default();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 765; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,58, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 767;
	                this.param_with_default();
	                this.state = 772;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 773;
	                this.star_etc();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 777; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 776;
	                this.param_with_default();
	                this.state = 779; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===89);
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 781;
	                this.star_etc();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 784;
	            this.star_etc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slash_no_default() {
	    let localctx = new Slash_no_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, PythonParser.RULE_slash_no_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 788; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 787;
	            this.param_no_default();
	            this.state = 790; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===89);
	        this.state = 792;
	        this.match(PythonParser.SLASH);
	        this.state = 794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 793;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slash_with_default() {
	    let localctx = new Slash_with_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, PythonParser.RULE_slash_with_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 799;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,66,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 796;
	                this.param_no_default(); 
	            }
	            this.state = 801;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,66,this._ctx);
	        }

	        this.state = 803; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 802;
	            this.param_with_default();
	            this.state = 805; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===89);
	        this.state = 807;
	        this.match(PythonParser.SLASH);
	        this.state = 809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 808;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_etc() {
	    let localctx = new Star_etcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, PythonParser.RULE_star_etc);
	    var _la = 0;
	    try {
	        this.state = 844;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 811;
	            this.match(PythonParser.STAR);
	            this.state = 812;
	            this.param_no_default();
	            this.state = 816;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 813;
	                this.param_maybe_default();
	                this.state = 818;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 819;
	                this.kwds();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 822;
	            this.match(PythonParser.STAR);
	            this.state = 823;
	            this.param_no_default_star_annotation();
	            this.state = 827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 824;
	                this.param_maybe_default();
	                this.state = 829;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 830;
	                this.kwds();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 833;
	            this.match(PythonParser.STAR);
	            this.state = 834;
	            this.match(PythonParser.COMMA);
	            this.state = 836; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 835;
	                this.param_maybe_default();
	                this.state = 838; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===89);
	            this.state = 841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 840;
	                this.kwds();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 843;
	            this.kwds();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwds() {
	    let localctx = new KwdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, PythonParser.RULE_kwds);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        this.match(PythonParser.DOUBLESTAR);
	        this.state = 847;
	        this.param_no_default();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_no_default() {
	    let localctx = new Param_no_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, PythonParser.RULE_param_no_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 849;
	        this.param();
	        this.state = 851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 850;
	            this.match(PythonParser.COMMA);
	        }

	        this.state = 854;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 853;
	            this.match(PythonParser.TYPE_COMMENT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_no_default_star_annotation() {
	    let localctx = new Param_no_default_star_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, PythonParser.RULE_param_no_default_star_annotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.param_star_annotation();
	        this.state = 858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 857;
	            this.match(PythonParser.COMMA);
	        }

	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 860;
	            this.match(PythonParser.TYPE_COMMENT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_with_default() {
	    let localctx = new Param_with_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, PythonParser.RULE_param_with_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.param();
	        this.state = 864;
	        this.default_assignment();
	        this.state = 866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 865;
	            this.match(PythonParser.COMMA);
	        }

	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 868;
	            this.match(PythonParser.TYPE_COMMENT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_maybe_default() {
	    let localctx = new Param_maybe_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, PythonParser.RULE_param_maybe_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.param();
	        this.state = 873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 872;
	            this.default_assignment();
	        }

	        this.state = 876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 875;
	            this.match(PythonParser.COMMA);
	        }

	        this.state = 879;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===92) {
	            this.state = 878;
	            this.match(PythonParser.TYPE_COMMENT);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param() {
	    let localctx = new ParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, PythonParser.RULE_param);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 881;
	        this.match(PythonParser.NAME);
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 882;
	            this.annotation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_star_annotation() {
	    let localctx = new Param_star_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, PythonParser.RULE_param_star_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 885;
	        this.match(PythonParser.NAME);
	        this.state = 886;
	        this.star_annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, PythonParser.RULE_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.match(PythonParser.COLON);
	        this.state = 889;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_annotation() {
	    let localctx = new Star_annotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, PythonParser.RULE_star_annotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(PythonParser.COLON);
	        this.state = 892;
	        this.star_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	default_assignment() {
	    let localctx = new Default_assignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, PythonParser.RULE_default_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.match(PythonParser.EQUAL);
	        this.state = 895;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, PythonParser.RULE_if_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.match(PythonParser.IF);
	        this.state = 898;
	        this.named_expression();
	        this.state = 899;
	        this.match(PythonParser.COLON);
	        this.state = 900;
	        this.block();
	        this.state = 905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 901;
	            this.elif_stmt();
	            break;

	        case 2:
	            this.state = 903;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	            if(la_===1) {
	                this.state = 902;
	                this.else_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elif_stmt() {
	    let localctx = new Elif_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, PythonParser.RULE_elif_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this.match(PythonParser.ELIF);
	        this.state = 908;
	        this.named_expression();
	        this.state = 909;
	        this.match(PythonParser.COLON);
	        this.state = 910;
	        this.block();
	        this.state = 915;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 911;
	            this.elif_stmt();
	            break;

	        case 2:
	            this.state = 913;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	            if(la_===1) {
	                this.state = 912;
	                this.else_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	else_block() {
	    let localctx = new Else_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, PythonParser.RULE_else_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 917;
	        this.match(PythonParser.ELSE);
	        this.state = 918;
	        this.match(PythonParser.COLON);
	        this.state = 919;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stmt() {
	    let localctx = new While_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, PythonParser.RULE_while_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 921;
	        this.match(PythonParser.WHILE);
	        this.state = 922;
	        this.named_expression();
	        this.state = 923;
	        this.match(PythonParser.COLON);
	        this.state = 924;
	        this.block();
	        this.state = 926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        if(la_===1) {
	            this.state = 925;
	            this.else_block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, PythonParser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 928;
	            this.match(PythonParser.ASYNC);
	        }

	        this.state = 931;
	        this.match(PythonParser.FOR);
	        this.state = 932;
	        this.star_targets();
	        this.state = 933;
	        this.match(PythonParser.IN);
	        this.state = 934;
	        this.star_expressions();
	        this.state = 935;
	        this.match(PythonParser.COLON);
	        this.state = 937;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        if(la_===1) {
	            this.state = 936;
	            this.match(PythonParser.TYPE_COMMENT);

	        }
	        this.state = 939;
	        this.block();
	        this.state = 941;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        if(la_===1) {
	            this.state = 940;
	            this.else_block();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_stmt() {
	    let localctx = new With_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, PythonParser.RULE_with_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 943;
	            this.match(PythonParser.ASYNC);
	        }

	        this.state = 946;
	        this.match(PythonParser.WITH);
	        this.state = 974;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 947;
	            this.match(PythonParser.LPAR);
	            this.state = 948;
	            this.with_item();
	            this.state = 953;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 949;
	                    this.match(PythonParser.COMMA);
	                    this.state = 950;
	                    this.with_item(); 
	                }
	                this.state = 955;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	            }

	            this.state = 957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 956;
	                this.match(PythonParser.COMMA);
	            }

	            this.state = 959;
	            this.match(PythonParser.RPAR);
	            this.state = 960;
	            this.match(PythonParser.COLON);
	            break;

	        case 2:
	            this.state = 962;
	            this.with_item();
	            this.state = 967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===49) {
	                this.state = 963;
	                this.match(PythonParser.COMMA);
	                this.state = 964;
	                this.with_item();
	                this.state = 969;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 970;
	            this.match(PythonParser.COLON);
	            this.state = 972;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	            if(la_===1) {
	                this.state = 971;
	                this.match(PythonParser.TYPE_COMMENT);

	            }
	            break;

	        }
	        this.state = 976;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_item() {
	    let localctx = new With_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, PythonParser.RULE_with_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this.expression();
	        this.state = 981;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 979;
	            this.match(PythonParser.AS);
	            this.state = 980;
	            this.star_target();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_stmt() {
	    let localctx = new Try_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, PythonParser.RULE_try_stmt);
	    try {
	        this.state = 1016;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 983;
	            this.match(PythonParser.TRY);
	            this.state = 984;
	            this.match(PythonParser.COLON);
	            this.state = 985;
	            this.block();
	            this.state = 986;
	            this.finally_block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 988;
	            this.match(PythonParser.TRY);
	            this.state = 989;
	            this.match(PythonParser.COLON);
	            this.state = 990;
	            this.block();
	            this.state = 992; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 991;
	            		this.except_block();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 994; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,101, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 997;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	            if(la_===1) {
	                this.state = 996;
	                this.else_block();

	            }
	            this.state = 1000;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,103,this._ctx);
	            if(la_===1) {
	                this.state = 999;
	                this.finally_block();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1002;
	            this.match(PythonParser.TRY);
	            this.state = 1003;
	            this.match(PythonParser.COLON);
	            this.state = 1004;
	            this.block();
	            this.state = 1006; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1005;
	            		this.except_star_block();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1008; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,104, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1011;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	            if(la_===1) {
	                this.state = 1010;
	                this.else_block();

	            }
	            this.state = 1014;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	            if(la_===1) {
	                this.state = 1013;
	                this.finally_block();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_block() {
	    let localctx = new Except_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, PythonParser.RULE_except_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1018;
	        this.match(PythonParser.EXCEPT);
	        this.state = 1024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	            this.state = 1019;
	            this.expression();
	            this.state = 1022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===26) {
	                this.state = 1020;
	                this.match(PythonParser.AS);
	                this.state = 1021;
	                this.match(PythonParser.NAME);
	            }

	        }

	        this.state = 1026;
	        this.match(PythonParser.COLON);
	        this.state = 1027;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_star_block() {
	    let localctx = new Except_star_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, PythonParser.RULE_except_star_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1029;
	        this.match(PythonParser.EXCEPT);
	        this.state = 1030;
	        this.match(PythonParser.STAR);
	        this.state = 1031;
	        this.expression();
	        this.state = 1034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===26) {
	            this.state = 1032;
	            this.match(PythonParser.AS);
	            this.state = 1033;
	            this.match(PythonParser.NAME);
	        }

	        this.state = 1036;
	        this.match(PythonParser.COLON);
	        this.state = 1037;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finally_block() {
	    let localctx = new Finally_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, PythonParser.RULE_finally_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.match(PythonParser.FINALLY);
	        this.state = 1040;
	        this.match(PythonParser.COLON);
	        this.state = 1041;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_stmt() {
	    let localctx = new Match_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, PythonParser.RULE_match_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1043;
	        this.soft_kw_match();
	        this.state = 1044;
	        this.subject_expr();
	        this.state = 1045;
	        this.match(PythonParser.COLON);
	        this.state = 1046;
	        this.match(PythonParser.NEWLINE);
	        this.state = 1047;
	        this.match(PythonParser.INDENT);
	        this.state = 1049; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1048;
	        		this.case_block();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1051; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,111, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1053;
	        this.match(PythonParser.DEDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subject_expr() {
	    let localctx = new Subject_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, PythonParser.RULE_subject_expr);
	    var _la = 0;
	    try {
	        this.state = 1061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1055;
	            this.star_named_expression();
	            this.state = 1056;
	            this.match(PythonParser.COMMA);
	            this.state = 1058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 1057;
	                this.star_named_expressions();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1060;
	            this.named_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_block() {
	    let localctx = new Case_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, PythonParser.RULE_case_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1063;
	        this.soft_kw_case();
	        this.state = 1064;
	        this.patterns();
	        this.state = 1066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===38) {
	            this.state = 1065;
	            this.guard();
	        }

	        this.state = 1068;
	        this.match(PythonParser.COLON);
	        this.state = 1069;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard() {
	    let localctx = new GuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, PythonParser.RULE_guard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1071;
	        this.match(PythonParser.IF);
	        this.state = 1072;
	        this.named_expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patterns() {
	    let localctx = new PatternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, PythonParser.RULE_patterns);
	    try {
	        this.state = 1076;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1074;
	            this.open_sequence_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1075;
	            this.pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, PythonParser.RULE_pattern);
	    try {
	        this.state = 1080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1078;
	            this.as_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1079;
	            this.or_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	as_pattern() {
	    let localctx = new As_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, PythonParser.RULE_as_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.or_pattern();
	        this.state = 1083;
	        this.match(PythonParser.AS);
	        this.state = 1084;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_pattern() {
	    let localctx = new Or_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, PythonParser.RULE_or_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1086;
	        this.closed_pattern();
	        this.state = 1091;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===55) {
	            this.state = 1087;
	            this.match(PythonParser.VBAR);
	            this.state = 1088;
	            this.closed_pattern();
	            this.state = 1093;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closed_pattern() {
	    let localctx = new Closed_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, PythonParser.RULE_closed_pattern);
	    try {
	        this.state = 1102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1094;
	            this.literal_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1095;
	            this.capture_pattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1096;
	            this.wildcard_pattern();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1097;
	            this.value_pattern();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1098;
	            this.group_pattern();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1099;
	            this.sequence_pattern();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1100;
	            this.mapping_pattern();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1101;
	            this.class_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_pattern() {
	    let localctx = new Literal_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, PythonParser.RULE_literal_pattern);
	    try {
	        this.state = 1110;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1104;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1105;
	            this.complex_number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1106;
	            this.strings();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1107;
	            this.match(PythonParser.NONE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1108;
	            this.match(PythonParser.TRUE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1109;
	            this.match(PythonParser.FALSE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_expr() {
	    let localctx = new Literal_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, PythonParser.RULE_literal_expr);
	    try {
	        this.state = 1118;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1112;
	            this.signed_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1113;
	            this.complex_number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1114;
	            this.strings();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1115;
	            this.match(PythonParser.NONE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1116;
	            this.match(PythonParser.TRUE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1117;
	            this.match(PythonParser.FALSE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complex_number() {
	    let localctx = new Complex_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, PythonParser.RULE_complex_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1120;
	        this.signed_real_number();
	        this.state = 1121;
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===52)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1122;
	        this.imaginary_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, PythonParser.RULE_signed_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1125;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 1124;
	            this.match(PythonParser.MINUS);
	        }

	        this.state = 1127;
	        this.match(PythonParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_real_number() {
	    let localctx = new Signed_real_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, PythonParser.RULE_signed_real_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1130;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===52) {
	            this.state = 1129;
	            this.match(PythonParser.MINUS);
	        }

	        this.state = 1132;
	        this.real_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_number() {
	    let localctx = new Real_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, PythonParser.RULE_real_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.match(PythonParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imaginary_number() {
	    let localctx = new Imaginary_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, PythonParser.RULE_imaginary_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        this.match(PythonParser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_pattern() {
	    let localctx = new Capture_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, PythonParser.RULE_capture_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_capture_target() {
	    let localctx = new Pattern_capture_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, PythonParser.RULE_pattern_capture_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1140;
	        this.soft_kw__not__wildcard();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard_pattern() {
	    let localctx = new Wildcard_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, PythonParser.RULE_wildcard_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.soft_kw_wildcard();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_pattern() {
	    let localctx = new Value_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, PythonParser.RULE_value_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1144;
	        this.attr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr() {
	    let localctx = new AttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, PythonParser.RULE_attr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1146;
	        this.match(PythonParser.NAME);
	        this.state = 1149; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1147;
	            this.match(PythonParser.DOT);
	            this.state = 1148;
	            this.match(PythonParser.NAME);
	            this.state = 1151; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===47);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_or_attr() {
	    let localctx = new Name_or_attrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, PythonParser.RULE_name_or_attr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1153;
	        this.match(PythonParser.NAME);
	        this.state = 1158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===47) {
	            this.state = 1154;
	            this.match(PythonParser.DOT);
	            this.state = 1155;
	            this.match(PythonParser.NAME);
	            this.state = 1160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_pattern() {
	    let localctx = new Group_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, PythonParser.RULE_group_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1161;
	        this.match(PythonParser.LPAR);
	        this.state = 1162;
	        this.pattern();
	        this.state = 1163;
	        this.match(PythonParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequence_pattern() {
	    let localctx = new Sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, PythonParser.RULE_sequence_pattern);
	    try {
	        this.state = 1175;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1165;
	            this.match(PythonParser.LSQB);
	            this.state = 1167;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	            if(la_===1) {
	                this.state = 1166;
	                this.maybe_sequence_pattern();

	            }
	            this.state = 1169;
	            this.match(PythonParser.RSQB);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1170;
	            this.match(PythonParser.LPAR);
	            this.state = 1172;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            if(la_===1) {
	                this.state = 1171;
	                this.open_sequence_pattern();

	            }
	            this.state = 1174;
	            this.match(PythonParser.RPAR);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_sequence_pattern() {
	    let localctx = new Open_sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, PythonParser.RULE_open_sequence_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.maybe_star_pattern();
	        this.state = 1178;
	        this.match(PythonParser.COMMA);
	        this.state = 1180;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        if(la_===1) {
	            this.state = 1179;
	            this.maybe_sequence_pattern();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybe_sequence_pattern() {
	    let localctx = new Maybe_sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, PythonParser.RULE_maybe_sequence_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1182;
	        this.maybe_star_pattern();
	        this.state = 1187;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1183;
	                this.match(PythonParser.COMMA);
	                this.state = 1184;
	                this.maybe_star_pattern(); 
	            }
	            this.state = 1189;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	        this.state = 1191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1190;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybe_star_pattern() {
	    let localctx = new Maybe_star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, PythonParser.RULE_maybe_star_pattern);
	    try {
	        this.state = 1195;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1193;
	            this.star_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1194;
	            this.pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_pattern() {
	    let localctx = new Star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, PythonParser.RULE_star_pattern);
	    try {
	        this.state = 1201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1197;
	            this.match(PythonParser.STAR);
	            this.state = 1198;
	            this.pattern_capture_target();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1199;
	            this.match(PythonParser.STAR);
	            this.state = 1200;
	            this.wildcard_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapping_pattern() {
	    let localctx = new Mapping_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, PythonParser.RULE_mapping_pattern);
	    var _la = 0;
	    try {
	        this.state = 1223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1203;
	            this.match(PythonParser.LBRACE);
	            this.state = 1204;
	            this.match(PythonParser.RBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.match(PythonParser.LBRACE);
	            this.state = 1206;
	            this.double_star_pattern();
	            this.state = 1208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 1207;
	                this.match(PythonParser.COMMA);
	            }

	            this.state = 1210;
	            this.match(PythonParser.RBRACE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1212;
	            this.match(PythonParser.LBRACE);
	            this.state = 1213;
	            this.items_pattern();
	            this.state = 1216;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1214;
	                this.match(PythonParser.COMMA);
	                this.state = 1215;
	                this.double_star_pattern();

	            }
	            this.state = 1219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 1218;
	                this.match(PythonParser.COMMA);
	            }

	            this.state = 1221;
	            this.match(PythonParser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	items_pattern() {
	    let localctx = new Items_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, PythonParser.RULE_items_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this.key_value_pattern();
	        this.state = 1230;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,137,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1226;
	                this.match(PythonParser.COMMA);
	                this.state = 1227;
	                this.key_value_pattern(); 
	            }
	            this.state = 1232;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,137,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_value_pattern() {
	    let localctx = new Key_value_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, PythonParser.RULE_key_value_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 6:
	        case 11:
	        case 16:
	        case 52:
	        case 90:
	        case 91:
	            this.state = 1233;
	            this.literal_expr();
	            break;
	        case 89:
	            this.state = 1234;
	            this.attr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1237;
	        this.match(PythonParser.COLON);
	        this.state = 1238;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_star_pattern() {
	    let localctx = new Double_star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, PythonParser.RULE_double_star_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1240;
	        this.match(PythonParser.DOUBLESTAR);
	        this.state = 1241;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_pattern() {
	    let localctx = new Class_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, PythonParser.RULE_class_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1243;
	        this.name_or_attr();
	        this.state = 1244;
	        this.match(PythonParser.LPAR);
	        this.state = 1256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,142,this._ctx);
	        if(la_===1) {
	            this.state = 1251;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1245;
	                this.positional_patterns();
	                this.state = 1248;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	                if(la_===1) {
	                    this.state = 1246;
	                    this.match(PythonParser.COMMA);
	                    this.state = 1247;
	                    this.keyword_patterns();

	                }
	                break;

	            case 2:
	                this.state = 1250;
	                this.keyword_patterns();
	                break;

	            }
	            this.state = 1254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 1253;
	                this.match(PythonParser.COMMA);
	            }


	        }
	        this.state = 1258;
	        this.match(PythonParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positional_patterns() {
	    let localctx = new Positional_patternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, PythonParser.RULE_positional_patterns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.pattern();
	        this.state = 1265;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1261;
	                this.match(PythonParser.COMMA);
	                this.state = 1262;
	                this.pattern(); 
	            }
	            this.state = 1267;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_patterns() {
	    let localctx = new Keyword_patternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, PythonParser.RULE_keyword_patterns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.keyword_pattern();
	        this.state = 1273;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1269;
	                this.match(PythonParser.COMMA);
	                this.state = 1270;
	                this.keyword_pattern(); 
	            }
	            this.state = 1275;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_pattern() {
	    let localctx = new Keyword_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, PythonParser.RULE_keyword_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this.match(PythonParser.NAME);
	        this.state = 1277;
	        this.match(PythonParser.EQUAL);
	        this.state = 1278;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_alias() {
	    let localctx = new Type_aliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, PythonParser.RULE_type_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this.soft_kw_type();
	        this.state = 1281;
	        this.match(PythonParser.NAME);
	        this.state = 1283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 1282;
	            this.type_params();
	        }

	        this.state = 1285;
	        this.match(PythonParser.EQUAL);
	        this.state = 1286;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_params() {
	    let localctx = new Type_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, PythonParser.RULE_type_params);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1288;
	        this.match(PythonParser.LSQB);
	        this.state = 1289;
	        this.type_param_seq();
	        this.state = 1290;
	        this.match(PythonParser.RSQB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_param_seq() {
	    let localctx = new Type_param_seqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, PythonParser.RULE_type_param_seq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.type_param();
	        this.state = 1297;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,146,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1293;
	                this.match(PythonParser.COMMA);
	                this.state = 1294;
	                this.type_param(); 
	            }
	            this.state = 1299;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,146,this._ctx);
	        }

	        this.state = 1301;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1300;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_param() {
	    let localctx = new Type_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, PythonParser.RULE_type_param);
	    var _la = 0;
	    try {
	        this.state = 1319;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1303;
	            this.match(PythonParser.NAME);
	            this.state = 1305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1304;
	                this.type_param_bound();
	            }

	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1307;
	            this.match(PythonParser.STAR);
	            this.state = 1308;
	            this.match(PythonParser.NAME);
	            this.state = 1311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1309;
	                this.match(PythonParser.COLON);
	                this.state = 1310;
	                this.expression();
	            }

	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.match(PythonParser.DOUBLESTAR);
	            this.state = 1314;
	            this.match(PythonParser.NAME);
	            this.state = 1317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1315;
	                this.match(PythonParser.COLON);
	                this.state = 1316;
	                this.expression();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_param_bound() {
	    let localctx = new Type_param_boundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, PythonParser.RULE_type_param_bound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1321;
	        this.match(PythonParser.COLON);
	        this.state = 1322;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, PythonParser.RULE_expressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.expression();
	        this.state = 1329;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,152,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1325;
	                this.match(PythonParser.COMMA);
	                this.state = 1326;
	                this.expression(); 
	            }
	            this.state = 1331;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,152,this._ctx);
	        }

	        this.state = 1333;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1332;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, PythonParser.RULE_expression);
	    var _la = 0;
	    try {
	        this.state = 1344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1335;
	            this.disjunction();
	            this.state = 1341;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 1336;
	                this.match(PythonParser.IF);
	                this.state = 1337;
	                this.disjunction();
	                this.state = 1338;
	                this.match(PythonParser.ELSE);
	                this.state = 1339;
	                this.expression();
	            }

	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1343;
	            this.lambdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_expr() {
	    let localctx = new Yield_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, PythonParser.RULE_yield_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.match(PythonParser.YIELD);
	        this.state = 1352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	            this.state = 1347;
	            this.match(PythonParser.FROM);
	            this.state = 1348;
	            this.expression();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 46:
	        case 48:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 59:
	        case 65:
	        case 86:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	            this.state = 1350;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 1349;
	                this.star_expressions();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_expressions() {
	    let localctx = new Star_expressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, PythonParser.RULE_star_expressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1354;
	        this.star_expression();
	        this.state = 1359;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,158,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1355;
	                this.match(PythonParser.COMMA);
	                this.state = 1356;
	                this.star_expression(); 
	            }
	            this.state = 1361;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,158,this._ctx);
	        }

	        this.state = 1363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1362;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_expression() {
	    let localctx = new Star_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, PythonParser.RULE_star_expression);
	    try {
	        this.state = 1368;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1365;
	            this.match(PythonParser.STAR);
	            this.state = 1366;
	            this.bitwise_or(0);
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1367;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_named_expressions() {
	    let localctx = new Star_named_expressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, PythonParser.RULE_star_named_expressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1370;
	        this.star_named_expression();
	        this.state = 1375;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,161,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1371;
	                this.match(PythonParser.COMMA);
	                this.state = 1372;
	                this.star_named_expression(); 
	            }
	            this.state = 1377;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,161,this._ctx);
	        }

	        this.state = 1379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1378;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_named_expression() {
	    let localctx = new Star_named_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, PythonParser.RULE_star_named_expression);
	    try {
	        this.state = 1384;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1381;
	            this.match(PythonParser.STAR);
	            this.state = 1382;
	            this.bitwise_or(0);
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1383;
	            this.named_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment_expression() {
	    let localctx = new Assignment_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, PythonParser.RULE_assignment_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1386;
	        this.match(PythonParser.NAME);
	        this.state = 1387;
	        this.match(PythonParser.COLONEQUAL);
	        this.state = 1388;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_expression() {
	    let localctx = new Named_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, PythonParser.RULE_named_expression);
	    try {
	        this.state = 1392;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1390;
	            this.assignment_expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1391;
	            this.expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	disjunction() {
	    let localctx = new DisjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, PythonParser.RULE_disjunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1394;
	        this.conjunction();
	        this.state = 1399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===39) {
	            this.state = 1395;
	            this.match(PythonParser.OR);
	            this.state = 1396;
	            this.conjunction();
	            this.state = 1401;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conjunction() {
	    let localctx = new ConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, PythonParser.RULE_conjunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        this.inversion();
	        this.state = 1407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===21) {
	            this.state = 1403;
	            this.match(PythonParser.AND);
	            this.state = 1404;
	            this.inversion();
	            this.state = 1409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inversion() {
	    let localctx = new InversionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, PythonParser.RULE_inversion);
	    try {
	        this.state = 1413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1410;
	            this.match(PythonParser.NOT);
	            this.state = 1411;
	            this.inversion();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1412;
	            this.comparison();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison() {
	    let localctx = new ComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, PythonParser.RULE_comparison);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1415;
	        this.bitwise_or(0);
	        this.state = 1419;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===14 || _la===19 || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2038431745) !== 0)) {
	            this.state = 1416;
	            this.compare_op_bitwise_or_pair();
	            this.state = 1421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compare_op_bitwise_or_pair() {
	    let localctx = new Compare_op_bitwise_or_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, PythonParser.RULE_compare_op_bitwise_or_pair);
	    try {
	        this.state = 1432;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1422;
	            this.eq_bitwise_or();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1423;
	            this.noteq_bitwise_or();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1424;
	            this.lte_bitwise_or();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1425;
	            this.lt_bitwise_or();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1426;
	            this.gte_bitwise_or();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1427;
	            this.gt_bitwise_or();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1428;
	            this.notin_bitwise_or();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1429;
	            this.in_bitwise_or();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1430;
	            this.isnot_bitwise_or();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1431;
	            this.is_bitwise_or();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eq_bitwise_or() {
	    let localctx = new Eq_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, PythonParser.RULE_eq_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.match(PythonParser.EQEQUAL);
	        this.state = 1435;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noteq_bitwise_or() {
	    let localctx = new Noteq_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, PythonParser.RULE_noteq_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1437;
	        this.match(PythonParser.NOTEQUAL);
	        this.state = 1438;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lte_bitwise_or() {
	    let localctx = new Lte_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, PythonParser.RULE_lte_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1440;
	        this.match(PythonParser.LESSEQUAL);
	        this.state = 1441;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lt_bitwise_or() {
	    let localctx = new Lt_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, PythonParser.RULE_lt_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1443;
	        this.match(PythonParser.LESS);
	        this.state = 1444;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gte_bitwise_or() {
	    let localctx = new Gte_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, PythonParser.RULE_gte_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1446;
	        this.match(PythonParser.GREATEREQUAL);
	        this.state = 1447;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gt_bitwise_or() {
	    let localctx = new Gt_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, PythonParser.RULE_gt_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        this.match(PythonParser.GREATER);
	        this.state = 1450;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notin_bitwise_or() {
	    let localctx = new Notin_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, PythonParser.RULE_notin_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1452;
	        this.match(PythonParser.NOT);
	        this.state = 1453;
	        this.match(PythonParser.IN);
	        this.state = 1454;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	in_bitwise_or() {
	    let localctx = new In_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, PythonParser.RULE_in_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1456;
	        this.match(PythonParser.IN);
	        this.state = 1457;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isnot_bitwise_or() {
	    let localctx = new Isnot_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, PythonParser.RULE_isnot_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1459;
	        this.match(PythonParser.IS);
	        this.state = 1460;
	        this.match(PythonParser.NOT);
	        this.state = 1461;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	is_bitwise_or() {
	    let localctx = new Is_bitwise_orContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, PythonParser.RULE_is_bitwise_or);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.match(PythonParser.IS);
	        this.state = 1464;
	        this.bitwise_or(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bitwise_or(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bitwise_orContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 254;
	    this.enterRecursionRule(localctx, 254, PythonParser.RULE_bitwise_or, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1467;
	        this.bitwise_xor(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1474;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Bitwise_orContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_bitwise_or);
	                this.state = 1469;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1470;
	                this.match(PythonParser.VBAR);
	                this.state = 1471;
	                this.bitwise_xor(0); 
	            }
	            this.state = 1476;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bitwise_xor(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bitwise_xorContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 256;
	    this.enterRecursionRule(localctx, 256, PythonParser.RULE_bitwise_xor, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this.bitwise_and(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Bitwise_xorContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_bitwise_xor);
	                this.state = 1480;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1481;
	                this.match(PythonParser.CIRCUMFLEX);
	                this.state = 1482;
	                this.bitwise_and(0); 
	            }
	            this.state = 1487;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	bitwise_and(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Bitwise_andContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 258;
	    this.enterRecursionRule(localctx, 258, PythonParser.RULE_bitwise_and, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1489;
	        this.shift_expr(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1496;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Bitwise_andContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_bitwise_and);
	                this.state = 1491;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1492;
	                this.match(PythonParser.AMPER);
	                this.state = 1493;
	                this.shift_expr(0); 
	            }
	            this.state = 1498;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	shift_expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Shift_exprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, PythonParser.RULE_shift_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1500;
	        this.sum(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1507;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Shift_exprContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_shift_expr);
	                this.state = 1502;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1503;
	                _la = this._input.LA(1);
	                if(!(_la===67 || _la===68)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1504;
	                this.sum(0); 
	            }
	            this.state = 1509;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	sum(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SumContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 262;
	    this.enterRecursionRule(localctx, 262, PythonParser.RULE_sum, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1511;
	        this.term(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1518;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,174,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new SumContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_sum);
	                this.state = 1513;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1514;
	                _la = this._input.LA(1);
	                if(!(_la===51 || _la===52)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1515;
	                this.term(0); 
	            }
	            this.state = 1520;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,174,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	term(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TermContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 264;
	    this.enterRecursionRule(localctx, 264, PythonParser.RULE_term, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.factor();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1529;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TermContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_term);
	                this.state = 1524;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1525;
	                _la = this._input.LA(1);
	                if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 1342177411) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1526;
	                this.factor(); 
	            }
	            this.state = 1531;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	factor() {
	    let localctx = new FactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, PythonParser.RULE_factor);
	    try {
	        this.state = 1539;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1532;
	            this.match(PythonParser.PLUS);
	            this.state = 1533;
	            this.factor();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1534;
	            this.match(PythonParser.MINUS);
	            this.state = 1535;
	            this.factor();
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1536;
	            this.match(PythonParser.TILDE);
	            this.state = 1537;
	            this.factor();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 41:
	        case 42:
	        case 43:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1538;
	            this.power();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	power() {
	    let localctx = new PowerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, PythonParser.RULE_power);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1541;
	        this.await_primary();
	        this.state = 1544;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,177,this._ctx);
	        if(la_===1) {
	            this.state = 1542;
	            this.match(PythonParser.DOUBLESTAR);
	            this.state = 1543;
	            this.factor();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	await_primary() {
	    let localctx = new Await_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, PythonParser.RULE_await_primary);
	    try {
	        this.state = 1549;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1546;
	            this.match(PythonParser.AWAIT);
	            this.state = 1547;
	            this.primary(0);
	            break;
	        case 3:
	        case 6:
	        case 11:
	        case 16:
	        case 41:
	        case 42:
	        case 43:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1548;
	            this.primary(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	primary(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PrimaryContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 272;
	    this.enterRecursionRule(localctx, 272, PythonParser.RULE_primary, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.atom();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1571;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,181,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PrimaryContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_primary);
	                this.state = 1554;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1567;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1555;
	                    this.match(PythonParser.DOT);
	                    this.state = 1556;
	                    this.match(PythonParser.NAME);
	                    break;

	                case 2:
	                    this.state = 1557;
	                    this.genexp();
	                    break;

	                case 3:
	                    this.state = 1558;
	                    this.match(PythonParser.LPAR);
	                    this.state = 1560;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7471105) !== 0)) {
	                        this.state = 1559;
	                        this.arguments();
	                    }

	                    this.state = 1562;
	                    this.match(PythonParser.RPAR);
	                    break;

	                case 4:
	                    this.state = 1563;
	                    this.match(PythonParser.LSQB);
	                    this.state = 1564;
	                    this.slices();
	                    this.state = 1565;
	                    this.match(PythonParser.RSQB);
	                    break;

	                } 
	            }
	            this.state = 1573;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,181,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	slices() {
	    let localctx = new SlicesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, PythonParser.RULE_slices);
	    var _la = 0;
	    try {
	        this.state = 1592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1574;
	            this.slice();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1577;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 3:
	            case 6:
	            case 7:
	            case 11:
	            case 16:
	            case 24:
	            case 34:
	            case 41:
	            case 42:
	            case 43:
	            case 48:
	            case 51:
	            case 52:
	            case 65:
	            case 86:
	            case 89:
	            case 90:
	            case 91:
	                this.state = 1575;
	                this.slice();
	                break;
	            case 53:
	                this.state = 1576;
	                this.starred_expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1586;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1579;
	                    this.match(PythonParser.COMMA);
	                    this.state = 1582;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 3:
	                    case 6:
	                    case 7:
	                    case 11:
	                    case 16:
	                    case 24:
	                    case 34:
	                    case 41:
	                    case 42:
	                    case 43:
	                    case 48:
	                    case 51:
	                    case 52:
	                    case 65:
	                    case 86:
	                    case 89:
	                    case 90:
	                    case 91:
	                        this.state = 1580;
	                        this.slice();
	                        break;
	                    case 53:
	                        this.state = 1581;
	                        this.starred_expression();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 1588;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	            }

	            this.state = 1590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 1589;
	                this.match(PythonParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slice() {
	    let localctx = new SliceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, PythonParser.RULE_slice);
	    var _la = 0;
	    try {
	        this.state = 1608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 1594;
	                this.expression();
	            }

	            this.state = 1597;
	            this.match(PythonParser.COLON);
	            this.state = 1599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 1598;
	                this.expression();
	            }

	            this.state = 1605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===48) {
	                this.state = 1601;
	                this.match(PythonParser.COLON);
	                this.state = 1603;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                    this.state = 1602;
	                    this.expression();
	                }

	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1607;
	            this.named_expression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, PythonParser.RULE_atom);
	    try {
	        this.state = 1632;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1610;
	            this.match(PythonParser.NAME);
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1611;
	            this.match(PythonParser.TRUE);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1612;
	            this.match(PythonParser.FALSE);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1613;
	            this.match(PythonParser.NONE);
	            break;
	        case 3:
	        case 91:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1614;
	            this.strings();
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1615;
	            this.match(PythonParser.NUMBER);
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1619;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1616;
	                this.tuple();
	                break;

	            case 2:
	                this.state = 1617;
	                this.group();
	                break;

	            case 3:
	                this.state = 1618;
	                this.genexp();
	                break;

	            }
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1623;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1621;
	                this.list();
	                break;

	            case 2:
	                this.state = 1622;
	                this.listcomp();
	                break;

	            }
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1629;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1625;
	                this.dict();
	                break;

	            case 2:
	                this.state = 1626;
	                this.set();
	                break;

	            case 3:
	                this.state = 1627;
	                this.dictcomp();
	                break;

	            case 4:
	                this.state = 1628;
	                this.setcomp();
	                break;

	            }
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1631;
	            this.match(PythonParser.ELLIPSIS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group() {
	    let localctx = new GroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, PythonParser.RULE_group);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.match(PythonParser.LPAR);
	        this.state = 1637;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.state = 1635;
	            this.yield_expr();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.state = 1636;
	            this.named_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1639;
	        this.match(PythonParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef() {
	    let localctx = new LambdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, PythonParser.RULE_lambdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1641;
	        this.match(PythonParser.LAMBDA);
	        this.state = 1643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53 || _la===69 || _la===89) {
	            this.state = 1642;
	            this.lambda_params();
	        }

	        this.state = 1645;
	        this.match(PythonParser.COLON);
	        this.state = 1646;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_params() {
	    let localctx = new Lambda_paramsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, PythonParser.RULE_lambda_params);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1648;
	        this.lambda_parameters();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_parameters() {
	    let localctx = new Lambda_parametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, PythonParser.RULE_lambda_parameters);
	    var _la = 0;
	    try {
	        this.state = 1699;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1650;
	            this.lambda_slash_no_default();
	            this.state = 1654;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,198,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1651;
	                    this.lambda_param_no_default(); 
	                }
	                this.state = 1656;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,198,this._ctx);
	            }

	            this.state = 1660;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 1657;
	                this.lambda_param_with_default();
	                this.state = 1662;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1664;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 1663;
	                this.lambda_star_etc();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1666;
	            this.lambda_slash_with_default();
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 1667;
	                this.lambda_param_with_default();
	                this.state = 1672;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 1673;
	                this.lambda_star_etc();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1677; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1676;
	            		this.lambda_param_no_default();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1679; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,203, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 1681;
	                this.lambda_param_with_default();
	                this.state = 1686;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 1687;
	                this.lambda_star_etc();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1691; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1690;
	                this.lambda_param_with_default();
	                this.state = 1693; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===89);
	            this.state = 1696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53 || _la===69) {
	                this.state = 1695;
	                this.lambda_star_etc();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1698;
	            this.lambda_star_etc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_slash_no_default() {
	    let localctx = new Lambda_slash_no_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, PythonParser.RULE_lambda_slash_no_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1701;
	            this.lambda_param_no_default();
	            this.state = 1704; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===89);
	        this.state = 1706;
	        this.match(PythonParser.SLASH);
	        this.state = 1708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1707;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_slash_with_default() {
	    let localctx = new Lambda_slash_with_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, PythonParser.RULE_lambda_slash_with_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1713;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,211,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1710;
	                this.lambda_param_no_default(); 
	            }
	            this.state = 1715;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,211,this._ctx);
	        }

	        this.state = 1717; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1716;
	            this.lambda_param_with_default();
	            this.state = 1719; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===89);
	        this.state = 1721;
	        this.match(PythonParser.SLASH);
	        this.state = 1723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1722;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_star_etc() {
	    let localctx = new Lambda_star_etcContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, PythonParser.RULE_lambda_star_etc);
	    var _la = 0;
	    try {
	        this.state = 1747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1725;
	            this.match(PythonParser.STAR);
	            this.state = 1726;
	            this.lambda_param_no_default();
	            this.state = 1730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===89) {
	                this.state = 1727;
	                this.lambda_param_maybe_default();
	                this.state = 1732;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 1733;
	                this.lambda_kwds();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1736;
	            this.match(PythonParser.STAR);
	            this.state = 1737;
	            this.match(PythonParser.COMMA);
	            this.state = 1739; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1738;
	                this.lambda_param_maybe_default();
	                this.state = 1741; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===89);
	            this.state = 1744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 1743;
	                this.lambda_kwds();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1746;
	            this.lambda_kwds();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_kwds() {
	    let localctx = new Lambda_kwdsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, PythonParser.RULE_lambda_kwds);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1749;
	        this.match(PythonParser.DOUBLESTAR);
	        this.state = 1750;
	        this.lambda_param_no_default();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_param_no_default() {
	    let localctx = new Lambda_param_no_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, PythonParser.RULE_lambda_param_no_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        this.lambda_param();
	        this.state = 1754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1753;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_param_with_default() {
	    let localctx = new Lambda_param_with_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, PythonParser.RULE_lambda_param_with_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.lambda_param();
	        this.state = 1757;
	        this.default_assignment();
	        this.state = 1759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1758;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_param_maybe_default() {
	    let localctx = new Lambda_param_maybe_defaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, PythonParser.RULE_lambda_param_maybe_default);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1761;
	        this.lambda_param();
	        this.state = 1763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1762;
	            this.default_assignment();
	        }

	        this.state = 1766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1765;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambda_param() {
	    let localctx = new Lambda_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, PythonParser.RULE_lambda_param);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1768;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_middle() {
	    let localctx = new Fstring_middleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, PythonParser.RULE_fstring_middle);
	    try {
	        this.state = 1772;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1770;
	            this.fstring_replacement_field();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1771;
	            this.match(PythonParser.FSTRING_MIDDLE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_replacement_field() {
	    let localctx = new Fstring_replacement_fieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, PythonParser.RULE_fstring_replacement_field);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1774;
	        this.match(PythonParser.LBRACE);
	        this.state = 1777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.state = 1775;
	            this.yield_expr();
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 53:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.state = 1776;
	            this.star_expressions();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1780;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1779;
	            this.match(PythonParser.EQUAL);
	        }

	        this.state = 1783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===88) {
	            this.state = 1782;
	            this.fstring_conversion();
	        }

	        this.state = 1786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===48) {
	            this.state = 1785;
	            this.fstring_full_format_spec();
	        }

	        this.state = 1788;
	        this.match(PythonParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_conversion() {
	    let localctx = new Fstring_conversionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, PythonParser.RULE_fstring_conversion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1790;
	        this.match(PythonParser.EXCLAMATION);
	        this.state = 1791;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_full_format_spec() {
	    let localctx = new Fstring_full_format_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, PythonParser.RULE_fstring_full_format_spec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1793;
	        this.match(PythonParser.COLON);
	        this.state = 1797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===43) {
	            this.state = 1794;
	            this.fstring_format_spec();
	            this.state = 1799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring_format_spec() {
	    let localctx = new Fstring_format_specContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, PythonParser.RULE_fstring_format_spec);
	    try {
	        this.state = 1802;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1800;
	            this.match(PythonParser.FSTRING_MIDDLE);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1801;
	            this.fstring_replacement_field();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fstring() {
	    let localctx = new FstringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, PythonParser.RULE_fstring);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1804;
	        this.match(PythonParser.FSTRING_START);
	        this.state = 1808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===4 || _la===43) {
	            this.state = 1805;
	            this.fstring_middle();
	            this.state = 1810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1811;
	        this.match(PythonParser.FSTRING_END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, PythonParser.RULE_string);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        this.match(PythonParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strings() {
	    let localctx = new StringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, PythonParser.RULE_strings);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1817; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1817;
	        		this._errHandler.sync(this);
	        		switch(this._input.LA(1)) {
	        		case 3:
	        		    this.state = 1815;
	        		    this.fstring();
	        		    break;
	        		case 91:
	        		    this.state = 1816;
	        		    this.string();
	        		    break;
	        		default:
	        		    throw new antlr4.error.NoViableAltException(this);
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1819; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,232, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	list() {
	    let localctx = new ListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, PythonParser.RULE_list);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1821;
	        this.match(PythonParser.LSQB);
	        this.state = 1823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	            this.state = 1822;
	            this.star_named_expressions();
	        }

	        this.state = 1825;
	        this.match(PythonParser.RSQB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tuple() {
	    let localctx = new TupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, PythonParser.RULE_tuple);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1827;
	        this.match(PythonParser.LPAR);
	        this.state = 1833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	            this.state = 1828;
	            this.star_named_expression();
	            this.state = 1829;
	            this.match(PythonParser.COMMA);
	            this.state = 1831;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 1830;
	                this.star_named_expressions();
	            }

	        }

	        this.state = 1835;
	        this.match(PythonParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set() {
	    let localctx = new SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, PythonParser.RULE_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1837;
	        this.match(PythonParser.LBRACE);
	        this.state = 1838;
	        this.star_named_expressions();
	        this.state = 1839;
	        this.match(PythonParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dict() {
	    let localctx = new DictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, PythonParser.RULE_dict);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1841;
	        this.match(PythonParser.LBRACE);
	        this.state = 1843;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2147877761) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7471105) !== 0)) {
	            this.state = 1842;
	            this.double_starred_kvpairs();
	        }

	        this.state = 1845;
	        this.match(PythonParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_starred_kvpairs() {
	    let localctx = new Double_starred_kvpairsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, PythonParser.RULE_double_starred_kvpairs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1847;
	        this.double_starred_kvpair();
	        this.state = 1852;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,237,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1848;
	                this.match(PythonParser.COMMA);
	                this.state = 1849;
	                this.double_starred_kvpair(); 
	            }
	            this.state = 1854;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,237,this._ctx);
	        }

	        this.state = 1856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1855;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_starred_kvpair() {
	    let localctx = new Double_starred_kvpairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, PythonParser.RULE_double_starred_kvpair);
	    try {
	        this.state = 1861;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 69:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1858;
	            this.match(PythonParser.DOUBLESTAR);
	            this.state = 1859;
	            this.bitwise_or(0);
	            break;
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1860;
	            this.kvpair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kvpair() {
	    let localctx = new KvpairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, PythonParser.RULE_kvpair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1863;
	        this.expression();
	        this.state = 1864;
	        this.match(PythonParser.COLON);
	        this.state = 1865;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_if_clauses() {
	    let localctx = new For_if_clausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, PythonParser.RULE_for_if_clauses);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1868; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1867;
	            this.for_if_clause();
	            this.state = 1870; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===23 || _la===36);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_if_clause() {
	    let localctx = new For_if_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, PythonParser.RULE_for_if_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1873;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 1872;
	            this.match(PythonParser.ASYNC);
	        }

	        this.state = 1875;
	        this.match(PythonParser.FOR);
	        this.state = 1876;
	        this.star_targets();
	        this.state = 1877;
	        this.match(PythonParser.IN);
	        this.state = 1878;
	        this.disjunction();
	        this.state = 1883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 1879;
	            this.match(PythonParser.IF);
	            this.state = 1880;
	            this.disjunction();
	            this.state = 1885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listcomp() {
	    let localctx = new ListcompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, PythonParser.RULE_listcomp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1886;
	        this.match(PythonParser.LSQB);
	        this.state = 1887;
	        this.named_expression();
	        this.state = 1888;
	        this.for_if_clauses();
	        this.state = 1889;
	        this.match(PythonParser.RSQB);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setcomp() {
	    let localctx = new SetcompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, PythonParser.RULE_setcomp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1891;
	        this.match(PythonParser.LBRACE);
	        this.state = 1892;
	        this.named_expression();
	        this.state = 1893;
	        this.for_if_clauses();
	        this.state = 1894;
	        this.match(PythonParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	genexp() {
	    let localctx = new GenexpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, PythonParser.RULE_genexp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1896;
	        this.match(PythonParser.LPAR);
	        this.state = 1899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1897;
	            this.assignment_expression();
	            break;

	        case 2:
	            this.state = 1898;
	            this.expression();
	            break;

	        }
	        this.state = 1901;
	        this.for_if_clauses();
	        this.state = 1902;
	        this.match(PythonParser.RPAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictcomp() {
	    let localctx = new DictcompContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, PythonParser.RULE_dictcomp);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1904;
	        this.match(PythonParser.LBRACE);
	        this.state = 1905;
	        this.kvpair();
	        this.state = 1906;
	        this.for_if_clauses();
	        this.state = 1907;
	        this.match(PythonParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, PythonParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1909;
	        this.args();
	        this.state = 1911;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1910;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	args() {
	    let localctx = new ArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, PythonParser.RULE_args);
	    try {
	        this.state = 1938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1918;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 53:
	                this.state = 1913;
	                this.starred_expression();
	                break;
	            case 3:
	            case 6:
	            case 7:
	            case 11:
	            case 16:
	            case 24:
	            case 34:
	            case 41:
	            case 42:
	            case 43:
	            case 51:
	            case 52:
	            case 65:
	            case 86:
	            case 89:
	            case 90:
	            case 91:
	                this.state = 1916;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1914;
	                    this.assignment_expression();
	                    break;

	                case 2:
	                    this.state = 1915;
	                    this.expression();
	                    break;

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1930;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,249,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1920;
	                    this.match(PythonParser.COMMA);
	                    this.state = 1926;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 53:
	                        this.state = 1921;
	                        this.starred_expression();
	                        break;
	                    case 3:
	                    case 6:
	                    case 7:
	                    case 11:
	                    case 16:
	                    case 24:
	                    case 34:
	                    case 41:
	                    case 42:
	                    case 43:
	                    case 51:
	                    case 52:
	                    case 65:
	                    case 86:
	                    case 89:
	                    case 90:
	                    case 91:
	                        this.state = 1924;
	                        this._errHandler.sync(this);
	                        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	                        switch(la_) {
	                        case 1:
	                            this.state = 1922;
	                            this.assignment_expression();
	                            break;

	                        case 2:
	                            this.state = 1923;
	                            this.expression();
	                            break;

	                        }
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 1932;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,249,this._ctx);
	            }

	            this.state = 1935;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	            if(la_===1) {
	                this.state = 1933;
	                this.match(PythonParser.COMMA);
	                this.state = 1934;
	                this.kwargs();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1937;
	            this.kwargs();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwargs() {
	    let localctx = new KwargsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, PythonParser.RULE_kwargs);
	    try {
	        this.state = 1967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1940;
	            this.kwarg_or_starred();
	            this.state = 1945;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,252,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1941;
	                    this.match(PythonParser.COMMA);
	                    this.state = 1942;
	                    this.kwarg_or_starred(); 
	                }
	                this.state = 1947;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,252,this._ctx);
	            }

	            this.state = 1957;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	            if(la_===1) {
	                this.state = 1948;
	                this.match(PythonParser.COMMA);
	                this.state = 1949;
	                this.kwarg_or_double_starred();
	                this.state = 1954;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,253,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1950;
	                        this.match(PythonParser.COMMA);
	                        this.state = 1951;
	                        this.kwarg_or_double_starred(); 
	                    }
	                    this.state = 1956;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,253,this._ctx);
	                }


	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1959;
	            this.kwarg_or_double_starred();
	            this.state = 1964;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,255,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1960;
	                    this.match(PythonParser.COMMA);
	                    this.state = 1961;
	                    this.kwarg_or_double_starred(); 
	                }
	                this.state = 1966;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,255,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	starred_expression() {
	    let localctx = new Starred_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, PythonParser.RULE_starred_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1969;
	        this.match(PythonParser.STAR);
	        this.state = 1970;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwarg_or_starred() {
	    let localctx = new Kwarg_or_starredContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, PythonParser.RULE_kwarg_or_starred);
	    try {
	        this.state = 1976;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1972;
	            this.match(PythonParser.NAME);
	            this.state = 1973;
	            this.match(PythonParser.EQUAL);
	            this.state = 1974;
	            this.expression();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1975;
	            this.starred_expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	kwarg_or_double_starred() {
	    let localctx = new Kwarg_or_double_starredContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, PythonParser.RULE_kwarg_or_double_starred);
	    try {
	        this.state = 1983;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1978;
	            this.match(PythonParser.NAME);
	            this.state = 1979;
	            this.match(PythonParser.EQUAL);
	            this.state = 1980;
	            this.expression();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1981;
	            this.match(PythonParser.DOUBLESTAR);
	            this.state = 1982;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_targets() {
	    let localctx = new Star_targetsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, PythonParser.RULE_star_targets);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1985;
	        this.star_target();
	        this.state = 1990;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,259,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1986;
	                this.match(PythonParser.COMMA);
	                this.state = 1987;
	                this.star_target(); 
	            }
	            this.state = 1992;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,259,this._ctx);
	        }

	        this.state = 1994;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 1993;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_targets_list_seq() {
	    let localctx = new Star_targets_list_seqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, PythonParser.RULE_star_targets_list_seq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1996;
	        this.star_target();
	        this.state = 1999; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1997;
	        		this.match(PythonParser.COMMA);
	        		this.state = 1998;
	        		this.star_target();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2001; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,261, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 2004;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2003;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_targets_tuple_seq() {
	    let localctx = new Star_targets_tuple_seqContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, PythonParser.RULE_star_targets_tuple_seq);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this.star_target();
	        this.state = 2017;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,265,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2007;
	            this.match(PythonParser.COMMA);
	            break;

	        case 2:
	            this.state = 2010; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2008;
	            		this.match(PythonParser.COMMA);
	            		this.state = 2009;
	            		this.star_target();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2012; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,263, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 2014;
	                this.match(PythonParser.COMMA);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_target() {
	    let localctx = new Star_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, PythonParser.RULE_star_target);
	    try {
	        this.state = 2022;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2019;
	            this.match(PythonParser.STAR);

	            this.state = 2020;
	            this.star_target();
	            break;
	        case 3:
	        case 6:
	        case 11:
	        case 16:
	        case 41:
	        case 42:
	        case 43:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2021;
	            this.target_with_star_atom();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target_with_star_atom() {
	    let localctx = new Target_with_star_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, PythonParser.RULE_target_with_star_atom);
	    try {
	        this.state = 2034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2024;
	            this.t_primary(0);
	            this.state = 2031;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 47:
	                this.state = 2025;
	                this.match(PythonParser.DOT);
	                this.state = 2026;
	                this.match(PythonParser.NAME);
	                break;
	            case 42:
	                this.state = 2027;
	                this.match(PythonParser.LSQB);
	                this.state = 2028;
	                this.slices();
	                this.state = 2029;
	                this.match(PythonParser.RSQB);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2033;
	            this.star_atom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_atom() {
	    let localctx = new Star_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, PythonParser.RULE_star_atom);
	    var _la = 0;
	    try {
	        this.state = 2051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2036;
	            this.match(PythonParser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2037;
	            this.match(PythonParser.LPAR);
	            this.state = 2038;
	            this.target_with_star_atom();
	            this.state = 2039;
	            this.match(PythonParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2041;
	            this.match(PythonParser.LPAR);
	            this.state = 2043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 67656) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 4103) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 2042;
	                this.star_targets_tuple_seq();
	            }

	            this.state = 2045;
	            this.match(PythonParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2046;
	            this.match(PythonParser.LSQB);
	            this.state = 2048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 67656) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 4103) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 2047;
	                this.star_targets_list_seq();
	            }

	            this.state = 2050;
	            this.match(PythonParser.RSQB);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_target() {
	    let localctx = new Single_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, PythonParser.RULE_single_target);
	    try {
	        this.state = 2059;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2053;
	            this.single_subscript_attribute_target();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2054;
	            this.match(PythonParser.NAME);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2055;
	            this.match(PythonParser.LPAR);
	            this.state = 2056;
	            this.single_target();
	            this.state = 2057;
	            this.match(PythonParser.RPAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	single_subscript_attribute_target() {
	    let localctx = new Single_subscript_attribute_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, PythonParser.RULE_single_subscript_attribute_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2061;
	        this.t_primary(0);
	        this.state = 2068;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 47:
	            this.state = 2062;
	            this.match(PythonParser.DOT);
	            this.state = 2063;
	            this.match(PythonParser.NAME);
	            break;
	        case 42:
	            this.state = 2064;
	            this.match(PythonParser.LSQB);
	            this.state = 2065;
	            this.slices();
	            this.state = 2066;
	            this.match(PythonParser.RSQB);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	t_primary(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new T_primaryContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 374;
	    this.enterRecursionRule(localctx, 374, PythonParser.RULE_t_primary, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2071;
	        this.atom();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2090;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,276,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new T_primaryContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, PythonParser.RULE_t_primary);
	                this.state = 2073;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 2086;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2074;
	                    this.match(PythonParser.DOT);
	                    this.state = 2075;
	                    this.match(PythonParser.NAME);
	                    break;

	                case 2:
	                    this.state = 2076;
	                    this.match(PythonParser.LSQB);
	                    this.state = 2077;
	                    this.slices();
	                    this.state = 2078;
	                    this.match(PythonParser.RSQB);
	                    break;

	                case 3:
	                    this.state = 2080;
	                    this.genexp();
	                    break;

	                case 4:
	                    this.state = 2081;
	                    this.match(PythonParser.LPAR);
	                    this.state = 2083;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) === 0 && ((1 << _la) & 16845000) !== 0) || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 2148402049) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 7471105) !== 0)) {
	                        this.state = 2082;
	                        this.arguments();
	                    }

	                    this.state = 2085;
	                    this.match(PythonParser.RPAR);
	                    break;

	                } 
	            }
	            this.state = 2092;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,276,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	del_targets() {
	    let localctx = new Del_targetsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, PythonParser.RULE_del_targets);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2093;
	        this.del_target();
	        this.state = 2098;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,277,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2094;
	                this.match(PythonParser.COMMA);
	                this.state = 2095;
	                this.del_target(); 
	            }
	            this.state = 2100;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,277,this._ctx);
	        }

	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49) {
	            this.state = 2101;
	            this.match(PythonParser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_target() {
	    let localctx = new Del_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, PythonParser.RULE_del_target);
	    try {
	        this.state = 2114;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2104;
	            this.t_primary(0);
	            this.state = 2111;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 47:
	                this.state = 2105;
	                this.match(PythonParser.DOT);
	                this.state = 2106;
	                this.match(PythonParser.NAME);
	                break;
	            case 42:
	                this.state = 2107;
	                this.match(PythonParser.LSQB);
	                this.state = 2108;
	                this.slices();
	                this.state = 2109;
	                this.match(PythonParser.RSQB);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2113;
	            this.del_t_atom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_t_atom() {
	    let localctx = new Del_t_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, PythonParser.RULE_del_t_atom);
	    var _la = 0;
	    try {
	        this.state = 2131;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2116;
	            this.match(PythonParser.NAME);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2117;
	            this.match(PythonParser.LPAR);
	            this.state = 2118;
	            this.del_target();
	            this.state = 2119;
	            this.match(PythonParser.RPAR);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2121;
	            this.match(PythonParser.LPAR);
	            this.state = 2123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 67656) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 7) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 2122;
	                this.del_targets();
	            }

	            this.state = 2125;
	            this.match(PythonParser.RPAR);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2126;
	            this.match(PythonParser.LSQB);
	            this.state = 2128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 67656) !== 0) || ((((_la - 41)) & ~0x1f) === 0 && ((1 << (_la - 41)) & 7) !== 0) || ((((_la - 86)) & ~0x1f) === 0 && ((1 << (_la - 86)) & 57) !== 0)) {
	                this.state = 2127;
	                this.del_targets();
	            }

	            this.state = 2130;
	            this.match(PythonParser.RSQB);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_expressions() {
	    let localctx = new Type_expressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, PythonParser.RULE_type_expressions);
	    var _la = 0;
	    try {
	        this.state = 2164;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 6:
	        case 7:
	        case 11:
	        case 16:
	        case 24:
	        case 34:
	        case 41:
	        case 42:
	        case 43:
	        case 51:
	        case 52:
	        case 65:
	        case 86:
	        case 89:
	        case 90:
	        case 91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2133;
	            this.expression();
	            this.state = 2138;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,284,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2134;
	                    this.match(PythonParser.COMMA);
	                    this.state = 2135;
	                    this.expression(); 
	                }
	                this.state = 2140;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,284,this._ctx);
	            }

	            this.state = 2153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 2141;
	                this.match(PythonParser.COMMA);
	                this.state = 2151;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 53:
	                    this.state = 2142;
	                    this.match(PythonParser.STAR);
	                    this.state = 2143;
	                    this.expression();
	                    this.state = 2147;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===49) {
	                        this.state = 2144;
	                        this.match(PythonParser.COMMA);
	                        this.state = 2145;
	                        this.match(PythonParser.DOUBLESTAR);
	                        this.state = 2146;
	                        this.expression();
	                    }

	                    break;
	                case 69:
	                    this.state = 2149;
	                    this.match(PythonParser.DOUBLESTAR);
	                    this.state = 2150;
	                    this.expression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2155;
	            this.match(PythonParser.STAR);
	            this.state = 2156;
	            this.expression();
	            this.state = 2160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===49) {
	                this.state = 2157;
	                this.match(PythonParser.COMMA);
	                this.state = 2158;
	                this.match(PythonParser.DOUBLESTAR);
	                this.state = 2159;
	                this.expression();
	            }

	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2162;
	            this.match(PythonParser.DOUBLESTAR);
	            this.state = 2163;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	func_type_comment() {
	    let localctx = new Func_type_commentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, PythonParser.RULE_func_type_comment);
	    try {
	        this.state = 2169;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2166;
	            this.match(PythonParser.NEWLINE);
	            this.state = 2167;
	            this.match(PythonParser.TYPE_COMMENT);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2168;
	            this.match(PythonParser.TYPE_COMMENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	soft_kw_type() {
	    let localctx = new Soft_kw_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, PythonParser.RULE_soft_kw_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2171;
	        if (!( this.isEqualToCurrentTokenText("type"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"type\")");
	        }
	        this.state = 2172;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	soft_kw_match() {
	    let localctx = new Soft_kw_matchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, PythonParser.RULE_soft_kw_match);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2174;
	        if (!( this.isEqualToCurrentTokenText("match"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"match\")");
	        }
	        this.state = 2175;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	soft_kw_case() {
	    let localctx = new Soft_kw_caseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, PythonParser.RULE_soft_kw_case);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2177;
	        if (!( this.isEqualToCurrentTokenText("case"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"case\")");
	        }
	        this.state = 2178;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	soft_kw_wildcard() {
	    let localctx = new Soft_kw_wildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, PythonParser.RULE_soft_kw_wildcard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2180;
	        if (!( this.isEqualToCurrentTokenText("_"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isEqualToCurrentTokenText(\"_\")");
	        }
	        this.state = 2181;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	soft_kw__not__wildcard() {
	    let localctx = new Soft_kw__not__wildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, PythonParser.RULE_soft_kw__not__wildcard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2183;
	        if (!( this.isnotEqualToCurrentTokenText("_"))) {
	            throw new antlr4.error.FailedPredicateException(this, "this.isnotEqualToCurrentTokenText(\"_\")");
	        }
	        this.state = 2184;
	        this.match(PythonParser.NAME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

PythonParser.EOF = antlr4.Token.EOF;
PythonParser.INDENT = 1;
PythonParser.DEDENT = 2;
PythonParser.FSTRING_START = 3;
PythonParser.FSTRING_MIDDLE = 4;
PythonParser.FSTRING_END = 5;
PythonParser.FALSE = 6;
PythonParser.AWAIT = 7;
PythonParser.ELSE = 8;
PythonParser.IMPORT = 9;
PythonParser.PASS = 10;
PythonParser.NONE = 11;
PythonParser.BREAK = 12;
PythonParser.EXCEPT = 13;
PythonParser.IN = 14;
PythonParser.RAISE = 15;
PythonParser.TRUE = 16;
PythonParser.CLASS = 17;
PythonParser.FINALLY = 18;
PythonParser.IS = 19;
PythonParser.RETURN = 20;
PythonParser.AND = 21;
PythonParser.CONTINUE = 22;
PythonParser.FOR = 23;
PythonParser.LAMBDA = 24;
PythonParser.TRY = 25;
PythonParser.AS = 26;
PythonParser.DEF = 27;
PythonParser.FROM = 28;
PythonParser.NONLOCAL = 29;
PythonParser.WHILE = 30;
PythonParser.ASSERT = 31;
PythonParser.DEL = 32;
PythonParser.GLOBAL = 33;
PythonParser.NOT = 34;
PythonParser.WITH = 35;
PythonParser.ASYNC = 36;
PythonParser.ELIF = 37;
PythonParser.IF = 38;
PythonParser.OR = 39;
PythonParser.YIELD = 40;
PythonParser.LPAR = 41;
PythonParser.LSQB = 42;
PythonParser.LBRACE = 43;
PythonParser.RPAR = 44;
PythonParser.RSQB = 45;
PythonParser.RBRACE = 46;
PythonParser.DOT = 47;
PythonParser.COLON = 48;
PythonParser.COMMA = 49;
PythonParser.SEMI = 50;
PythonParser.PLUS = 51;
PythonParser.MINUS = 52;
PythonParser.STAR = 53;
PythonParser.SLASH = 54;
PythonParser.VBAR = 55;
PythonParser.AMPER = 56;
PythonParser.LESS = 57;
PythonParser.GREATER = 58;
PythonParser.EQUAL = 59;
PythonParser.PERCENT = 60;
PythonParser.EQEQUAL = 61;
PythonParser.NOTEQUAL = 62;
PythonParser.LESSEQUAL = 63;
PythonParser.GREATEREQUAL = 64;
PythonParser.TILDE = 65;
PythonParser.CIRCUMFLEX = 66;
PythonParser.LEFTSHIFT = 67;
PythonParser.RIGHTSHIFT = 68;
PythonParser.DOUBLESTAR = 69;
PythonParser.PLUSEQUAL = 70;
PythonParser.MINEQUAL = 71;
PythonParser.STAREQUAL = 72;
PythonParser.SLASHEQUAL = 73;
PythonParser.PERCENTEQUAL = 74;
PythonParser.AMPEREQUAL = 75;
PythonParser.VBAREQUAL = 76;
PythonParser.CIRCUMFLEXEQUAL = 77;
PythonParser.LEFTSHIFTEQUAL = 78;
PythonParser.RIGHTSHIFTEQUAL = 79;
PythonParser.DOUBLESTAREQUAL = 80;
PythonParser.DOUBLESLASH = 81;
PythonParser.DOUBLESLASHEQUAL = 82;
PythonParser.AT = 83;
PythonParser.ATEQUAL = 84;
PythonParser.RARROW = 85;
PythonParser.ELLIPSIS = 86;
PythonParser.COLONEQUAL = 87;
PythonParser.EXCLAMATION = 88;
PythonParser.NAME = 89;
PythonParser.NUMBER = 90;
PythonParser.STRING = 91;
PythonParser.TYPE_COMMENT = 92;
PythonParser.NEWLINE = 93;
PythonParser.COMMENT = 94;
PythonParser.WS = 95;
PythonParser.EXPLICIT_LINE_JOINING = 96;
PythonParser.ERROR_TOKEN = 97;

PythonParser.RULE_file_input = 0;
PythonParser.RULE_interactive = 1;
PythonParser.RULE_eval = 2;
PythonParser.RULE_func_type = 3;
PythonParser.RULE_fstring_input = 4;
PythonParser.RULE_statements = 5;
PythonParser.RULE_statement = 6;
PythonParser.RULE_statement_newline = 7;
PythonParser.RULE_simple_stmts = 8;
PythonParser.RULE_simple_stmt = 9;
PythonParser.RULE_compound_stmt = 10;
PythonParser.RULE_assignment = 11;
PythonParser.RULE_annotated_rhs = 12;
PythonParser.RULE_augassign = 13;
PythonParser.RULE_return_stmt = 14;
PythonParser.RULE_raise_stmt = 15;
PythonParser.RULE_global_stmt = 16;
PythonParser.RULE_nonlocal_stmt = 17;
PythonParser.RULE_del_stmt = 18;
PythonParser.RULE_yield_stmt = 19;
PythonParser.RULE_assert_stmt = 20;
PythonParser.RULE_import_stmt = 21;
PythonParser.RULE_import_name = 22;
PythonParser.RULE_import_from = 23;
PythonParser.RULE_import_from_targets = 24;
PythonParser.RULE_import_from_as_names = 25;
PythonParser.RULE_import_from_as_name = 26;
PythonParser.RULE_dotted_as_names = 27;
PythonParser.RULE_dotted_as_name = 28;
PythonParser.RULE_dotted_name = 29;
PythonParser.RULE_block = 30;
PythonParser.RULE_decorators = 31;
PythonParser.RULE_class_def = 32;
PythonParser.RULE_class_def_raw = 33;
PythonParser.RULE_function_def = 34;
PythonParser.RULE_function_def_raw = 35;
PythonParser.RULE_params = 36;
PythonParser.RULE_parameters = 37;
PythonParser.RULE_slash_no_default = 38;
PythonParser.RULE_slash_with_default = 39;
PythonParser.RULE_star_etc = 40;
PythonParser.RULE_kwds = 41;
PythonParser.RULE_param_no_default = 42;
PythonParser.RULE_param_no_default_star_annotation = 43;
PythonParser.RULE_param_with_default = 44;
PythonParser.RULE_param_maybe_default = 45;
PythonParser.RULE_param = 46;
PythonParser.RULE_param_star_annotation = 47;
PythonParser.RULE_annotation = 48;
PythonParser.RULE_star_annotation = 49;
PythonParser.RULE_default_assignment = 50;
PythonParser.RULE_if_stmt = 51;
PythonParser.RULE_elif_stmt = 52;
PythonParser.RULE_else_block = 53;
PythonParser.RULE_while_stmt = 54;
PythonParser.RULE_for_stmt = 55;
PythonParser.RULE_with_stmt = 56;
PythonParser.RULE_with_item = 57;
PythonParser.RULE_try_stmt = 58;
PythonParser.RULE_except_block = 59;
PythonParser.RULE_except_star_block = 60;
PythonParser.RULE_finally_block = 61;
PythonParser.RULE_match_stmt = 62;
PythonParser.RULE_subject_expr = 63;
PythonParser.RULE_case_block = 64;
PythonParser.RULE_guard = 65;
PythonParser.RULE_patterns = 66;
PythonParser.RULE_pattern = 67;
PythonParser.RULE_as_pattern = 68;
PythonParser.RULE_or_pattern = 69;
PythonParser.RULE_closed_pattern = 70;
PythonParser.RULE_literal_pattern = 71;
PythonParser.RULE_literal_expr = 72;
PythonParser.RULE_complex_number = 73;
PythonParser.RULE_signed_number = 74;
PythonParser.RULE_signed_real_number = 75;
PythonParser.RULE_real_number = 76;
PythonParser.RULE_imaginary_number = 77;
PythonParser.RULE_capture_pattern = 78;
PythonParser.RULE_pattern_capture_target = 79;
PythonParser.RULE_wildcard_pattern = 80;
PythonParser.RULE_value_pattern = 81;
PythonParser.RULE_attr = 82;
PythonParser.RULE_name_or_attr = 83;
PythonParser.RULE_group_pattern = 84;
PythonParser.RULE_sequence_pattern = 85;
PythonParser.RULE_open_sequence_pattern = 86;
PythonParser.RULE_maybe_sequence_pattern = 87;
PythonParser.RULE_maybe_star_pattern = 88;
PythonParser.RULE_star_pattern = 89;
PythonParser.RULE_mapping_pattern = 90;
PythonParser.RULE_items_pattern = 91;
PythonParser.RULE_key_value_pattern = 92;
PythonParser.RULE_double_star_pattern = 93;
PythonParser.RULE_class_pattern = 94;
PythonParser.RULE_positional_patterns = 95;
PythonParser.RULE_keyword_patterns = 96;
PythonParser.RULE_keyword_pattern = 97;
PythonParser.RULE_type_alias = 98;
PythonParser.RULE_type_params = 99;
PythonParser.RULE_type_param_seq = 100;
PythonParser.RULE_type_param = 101;
PythonParser.RULE_type_param_bound = 102;
PythonParser.RULE_expressions = 103;
PythonParser.RULE_expression = 104;
PythonParser.RULE_yield_expr = 105;
PythonParser.RULE_star_expressions = 106;
PythonParser.RULE_star_expression = 107;
PythonParser.RULE_star_named_expressions = 108;
PythonParser.RULE_star_named_expression = 109;
PythonParser.RULE_assignment_expression = 110;
PythonParser.RULE_named_expression = 111;
PythonParser.RULE_disjunction = 112;
PythonParser.RULE_conjunction = 113;
PythonParser.RULE_inversion = 114;
PythonParser.RULE_comparison = 115;
PythonParser.RULE_compare_op_bitwise_or_pair = 116;
PythonParser.RULE_eq_bitwise_or = 117;
PythonParser.RULE_noteq_bitwise_or = 118;
PythonParser.RULE_lte_bitwise_or = 119;
PythonParser.RULE_lt_bitwise_or = 120;
PythonParser.RULE_gte_bitwise_or = 121;
PythonParser.RULE_gt_bitwise_or = 122;
PythonParser.RULE_notin_bitwise_or = 123;
PythonParser.RULE_in_bitwise_or = 124;
PythonParser.RULE_isnot_bitwise_or = 125;
PythonParser.RULE_is_bitwise_or = 126;
PythonParser.RULE_bitwise_or = 127;
PythonParser.RULE_bitwise_xor = 128;
PythonParser.RULE_bitwise_and = 129;
PythonParser.RULE_shift_expr = 130;
PythonParser.RULE_sum = 131;
PythonParser.RULE_term = 132;
PythonParser.RULE_factor = 133;
PythonParser.RULE_power = 134;
PythonParser.RULE_await_primary = 135;
PythonParser.RULE_primary = 136;
PythonParser.RULE_slices = 137;
PythonParser.RULE_slice = 138;
PythonParser.RULE_atom = 139;
PythonParser.RULE_group = 140;
PythonParser.RULE_lambdef = 141;
PythonParser.RULE_lambda_params = 142;
PythonParser.RULE_lambda_parameters = 143;
PythonParser.RULE_lambda_slash_no_default = 144;
PythonParser.RULE_lambda_slash_with_default = 145;
PythonParser.RULE_lambda_star_etc = 146;
PythonParser.RULE_lambda_kwds = 147;
PythonParser.RULE_lambda_param_no_default = 148;
PythonParser.RULE_lambda_param_with_default = 149;
PythonParser.RULE_lambda_param_maybe_default = 150;
PythonParser.RULE_lambda_param = 151;
PythonParser.RULE_fstring_middle = 152;
PythonParser.RULE_fstring_replacement_field = 153;
PythonParser.RULE_fstring_conversion = 154;
PythonParser.RULE_fstring_full_format_spec = 155;
PythonParser.RULE_fstring_format_spec = 156;
PythonParser.RULE_fstring = 157;
PythonParser.RULE_string = 158;
PythonParser.RULE_strings = 159;
PythonParser.RULE_list = 160;
PythonParser.RULE_tuple = 161;
PythonParser.RULE_set = 162;
PythonParser.RULE_dict = 163;
PythonParser.RULE_double_starred_kvpairs = 164;
PythonParser.RULE_double_starred_kvpair = 165;
PythonParser.RULE_kvpair = 166;
PythonParser.RULE_for_if_clauses = 167;
PythonParser.RULE_for_if_clause = 168;
PythonParser.RULE_listcomp = 169;
PythonParser.RULE_setcomp = 170;
PythonParser.RULE_genexp = 171;
PythonParser.RULE_dictcomp = 172;
PythonParser.RULE_arguments = 173;
PythonParser.RULE_args = 174;
PythonParser.RULE_kwargs = 175;
PythonParser.RULE_starred_expression = 176;
PythonParser.RULE_kwarg_or_starred = 177;
PythonParser.RULE_kwarg_or_double_starred = 178;
PythonParser.RULE_star_targets = 179;
PythonParser.RULE_star_targets_list_seq = 180;
PythonParser.RULE_star_targets_tuple_seq = 181;
PythonParser.RULE_star_target = 182;
PythonParser.RULE_target_with_star_atom = 183;
PythonParser.RULE_star_atom = 184;
PythonParser.RULE_single_target = 185;
PythonParser.RULE_single_subscript_attribute_target = 186;
PythonParser.RULE_t_primary = 187;
PythonParser.RULE_del_targets = 188;
PythonParser.RULE_del_target = 189;
PythonParser.RULE_del_t_atom = 190;
PythonParser.RULE_type_expressions = 191;
PythonParser.RULE_func_type_comment = 192;
PythonParser.RULE_soft_kw_type = 193;
PythonParser.RULE_soft_kw_match = 194;
PythonParser.RULE_soft_kw_case = 195;
PythonParser.RULE_soft_kw_wildcard = 196;
PythonParser.RULE_soft_kw__not__wildcard = 197;

class File_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_file_input;
    }

	EOF() {
	    return this.getToken(PythonParser.EOF, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFile_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFile_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFile_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InteractiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_interactive;
    }

	statement_newline() {
	    return this.getTypedRuleContext(Statement_newlineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterInteractive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitInteractive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitInteractive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EvalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_eval;
    }

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	EOF() {
	    return this.getToken(PythonParser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NEWLINE);
	    } else {
	        return this.getToken(PythonParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterEval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitEval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitEval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_func_type;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	RARROW() {
	    return this.getToken(PythonParser.RARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EOF() {
	    return this.getToken(PythonParser.EOF, 0);
	};

	type_expressions() {
	    return this.getTypedRuleContext(Type_expressionsContext,0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NEWLINE);
	    } else {
	        return this.getToken(PythonParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFunc_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFunc_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFunc_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_input;
    }

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_statements;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_statement;
    }

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Statement_newlineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_statement_newline;
    }

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	NEWLINE() {
	    return this.getToken(PythonParser.NEWLINE, 0);
	};

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	EOF() {
	    return this.getToken(PythonParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStatement_newline(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStatement_newline(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStatement_newline(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_stmtsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_simple_stmts;
    }

	simple_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Simple_stmtContext,i);
	    }
	};

	NEWLINE() {
	    return this.getToken(PythonParser.NEWLINE, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.SEMI);
	    } else {
	        return this.getToken(PythonParser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSimple_stmts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSimple_stmts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSimple_stmts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_simple_stmt;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	type_alias() {
	    return this.getTypedRuleContext(Type_aliasContext,0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	return_stmt() {
	    return this.getTypedRuleContext(Return_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	raise_stmt() {
	    return this.getTypedRuleContext(Raise_stmtContext,0);
	};

	PASS() {
	    return this.getToken(PythonParser.PASS, 0);
	};

	del_stmt() {
	    return this.getTypedRuleContext(Del_stmtContext,0);
	};

	yield_stmt() {
	    return this.getTypedRuleContext(Yield_stmtContext,0);
	};

	assert_stmt() {
	    return this.getTypedRuleContext(Assert_stmtContext,0);
	};

	BREAK() {
	    return this.getToken(PythonParser.BREAK, 0);
	};

	CONTINUE() {
	    return this.getToken(PythonParser.CONTINUE, 0);
	};

	global_stmt() {
	    return this.getTypedRuleContext(Global_stmtContext,0);
	};

	nonlocal_stmt() {
	    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSimple_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSimple_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSimple_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compound_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_compound_stmt;
    }

	function_def() {
	    return this.getTypedRuleContext(Function_defContext,0);
	};

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	class_def() {
	    return this.getTypedRuleContext(Class_defContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	try_stmt() {
	    return this.getTypedRuleContext(Try_stmtContext,0);
	};

	while_stmt() {
	    return this.getTypedRuleContext(While_stmtContext,0);
	};

	match_stmt() {
	    return this.getTypedRuleContext(Match_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterCompound_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitCompound_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitCompound_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_assignment;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EQUAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.EQUAL);
	    } else {
	        return this.getToken(PythonParser.EQUAL, i);
	    }
	};


	annotated_rhs() {
	    return this.getTypedRuleContext(Annotated_rhsContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	single_target() {
	    return this.getTypedRuleContext(Single_targetContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	single_subscript_attribute_target() {
	    return this.getTypedRuleContext(Single_subscript_attribute_targetContext,0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	star_targets = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_targetsContext);
	    } else {
	        return this.getTypedRuleContext(Star_targetsContext,i);
	    }
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	augassign() {
	    return this.getTypedRuleContext(AugassignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Annotated_rhsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_annotated_rhs;
    }

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAnnotated_rhs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAnnotated_rhs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAnnotated_rhs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AugassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_augassign;
    }

	PLUSEQUAL() {
	    return this.getToken(PythonParser.PLUSEQUAL, 0);
	};

	MINEQUAL() {
	    return this.getToken(PythonParser.MINEQUAL, 0);
	};

	STAREQUAL() {
	    return this.getToken(PythonParser.STAREQUAL, 0);
	};

	ATEQUAL() {
	    return this.getToken(PythonParser.ATEQUAL, 0);
	};

	SLASHEQUAL() {
	    return this.getToken(PythonParser.SLASHEQUAL, 0);
	};

	PERCENTEQUAL() {
	    return this.getToken(PythonParser.PERCENTEQUAL, 0);
	};

	AMPEREQUAL() {
	    return this.getToken(PythonParser.AMPEREQUAL, 0);
	};

	VBAREQUAL() {
	    return this.getToken(PythonParser.VBAREQUAL, 0);
	};

	CIRCUMFLEXEQUAL() {
	    return this.getToken(PythonParser.CIRCUMFLEXEQUAL, 0);
	};

	LEFTSHIFTEQUAL() {
	    return this.getToken(PythonParser.LEFTSHIFTEQUAL, 0);
	};

	RIGHTSHIFTEQUAL() {
	    return this.getToken(PythonParser.RIGHTSHIFTEQUAL, 0);
	};

	DOUBLESTAREQUAL() {
	    return this.getToken(PythonParser.DOUBLESTAREQUAL, 0);
	};

	DOUBLESLASHEQUAL() {
	    return this.getToken(PythonParser.DOUBLESLASHEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAugassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAugassign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAugassign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_return_stmt;
    }

	RETURN() {
	    return this.getToken(PythonParser.RETURN, 0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterReturn_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitReturn_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitReturn_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Raise_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_raise_stmt;
    }

	RAISE() {
	    return this.getToken(PythonParser.RAISE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	FROM() {
	    return this.getToken(PythonParser.FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterRaise_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitRaise_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitRaise_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_global_stmt;
    }

	GLOBAL() {
	    return this.getToken(PythonParser.GLOBAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NAME);
	    } else {
	        return this.getToken(PythonParser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGlobal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGlobal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGlobal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Nonlocal_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_nonlocal_stmt;
    }

	NONLOCAL() {
	    return this.getToken(PythonParser.NONLOCAL, 0);
	};

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NAME);
	    } else {
	        return this.getToken(PythonParser.NAME, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterNonlocal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitNonlocal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitNonlocal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_del_stmt;
    }

	DEL() {
	    return this.getToken(PythonParser.DEL, 0);
	};

	del_targets() {
	    return this.getTypedRuleContext(Del_targetsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDel_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDel_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDel_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_yield_stmt;
    }

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterYield_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitYield_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitYield_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_assert_stmt;
    }

	ASSERT() {
	    return this.getToken(PythonParser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAssert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAssert_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAssert_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_stmt;
    }

	import_name() {
	    return this.getTypedRuleContext(Import_nameContext,0);
	};

	import_from() {
	    return this.getTypedRuleContext(Import_fromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_name;
    }

	IMPORT() {
	    return this.getToken(PythonParser.IMPORT, 0);
	};

	dotted_as_names() {
	    return this.getTypedRuleContext(Dotted_as_namesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_from;
    }

	FROM() {
	    return this.getToken(PythonParser.FROM, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	IMPORT() {
	    return this.getToken(PythonParser.IMPORT, 0);
	};

	import_from_targets() {
	    return this.getTypedRuleContext(Import_from_targetsContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.DOT);
	    } else {
	        return this.getToken(PythonParser.DOT, i);
	    }
	};


	ELLIPSIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.ELLIPSIS);
	    } else {
	        return this.getToken(PythonParser.ELLIPSIS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_from(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_from(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_from_targetsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_from_targets;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	import_from_as_names() {
	    return this.getTypedRuleContext(Import_from_as_namesContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_from_targets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_from_targets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_from_targets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_from_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_from_as_names;
    }

	import_from_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_from_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Import_from_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_from_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_from_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_from_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_from_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_import_from_as_name;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NAME);
	    } else {
	        return this.getToken(PythonParser.NAME, i);
	    }
	};


	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImport_from_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImport_from_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImport_from_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_dotted_as_names;
    }

	dotted_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dotted_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Dotted_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDotted_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDotted_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDotted_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_dotted_as_name;
    }

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDotted_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDotted_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDotted_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_dotted_name;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDotted_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDotted_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDotted_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_block;
    }

	NEWLINE() {
	    return this.getToken(PythonParser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(PythonParser.INDENT, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	DEDENT() {
	    return this.getToken(PythonParser.DEDENT, 0);
	};

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_decorators;
    }

	AT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.AT);
	    } else {
	        return this.getToken(PythonParser.AT, i);
	    }
	};


	named_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Named_expressionContext,i);
	    }
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NEWLINE);
	    } else {
	        return this.getToken(PythonParser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDecorators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDecorators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDecorators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_class_def;
    }

	decorators() {
	    return this.getTypedRuleContext(DecoratorsContext,0);
	};

	class_def_raw() {
	    return this.getTypedRuleContext(Class_def_rawContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterClass_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitClass_def(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitClass_def(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_def_rawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_class_def_raw;
    }

	CLASS() {
	    return this.getToken(PythonParser.CLASS, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	type_params() {
	    return this.getTypedRuleContext(Type_paramsContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterClass_def_raw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitClass_def_raw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitClass_def_raw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_defContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_function_def;
    }

	decorators() {
	    return this.getTypedRuleContext(DecoratorsContext,0);
	};

	function_def_raw() {
	    return this.getTypedRuleContext(Function_def_rawContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFunction_def(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFunction_def(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFunction_def(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Function_def_rawContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_function_def_raw;
    }

	DEF() {
	    return this.getToken(PythonParser.DEF, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	type_params() {
	    return this.getTypedRuleContext(Type_paramsContext,0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	RARROW() {
	    return this.getToken(PythonParser.RARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	func_type_comment() {
	    return this.getTypedRuleContext(Func_type_commentContext,0);
	};

	ASYNC() {
	    return this.getToken(PythonParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFunction_def_raw(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFunction_def_raw(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFunction_def_raw(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_params;
    }

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_parameters;
    }

	slash_no_default() {
	    return this.getTypedRuleContext(Slash_no_defaultContext,0);
	};

	param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_no_defaultContext,i);
	    }
	};

	param_with_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_with_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_with_defaultContext,i);
	    }
	};

	star_etc() {
	    return this.getTypedRuleContext(Star_etcContext,0);
	};

	slash_with_default() {
	    return this.getTypedRuleContext(Slash_with_defaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Slash_no_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_slash_no_default;
    }

	SLASH() {
	    return this.getToken(PythonParser.SLASH, 0);
	};

	param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_no_defaultContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSlash_no_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSlash_no_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSlash_no_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Slash_with_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_slash_with_default;
    }

	SLASH() {
	    return this.getToken(PythonParser.SLASH, 0);
	};

	param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_no_defaultContext,i);
	    }
	};

	param_with_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_with_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_with_defaultContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSlash_with_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSlash_with_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSlash_with_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_etcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_etc;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	param_no_default() {
	    return this.getTypedRuleContext(Param_no_defaultContext,0);
	};

	param_maybe_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Param_maybe_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Param_maybe_defaultContext,i);
	    }
	};

	kwds() {
	    return this.getTypedRuleContext(KwdsContext,0);
	};

	param_no_default_star_annotation() {
	    return this.getTypedRuleContext(Param_no_default_star_annotationContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_etc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_etc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_etc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KwdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_kwds;
    }

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	param_no_default() {
	    return this.getTypedRuleContext(Param_no_defaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKwds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKwds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKwds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_no_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param_no_default;
    }

	param() {
	    return this.getTypedRuleContext(ParamContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam_no_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam_no_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam_no_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_no_default_star_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param_no_default_star_annotation;
    }

	param_star_annotation() {
	    return this.getTypedRuleContext(Param_star_annotationContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam_no_default_star_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam_no_default_star_annotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam_no_default_star_annotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_with_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param_with_default;
    }

	param() {
	    return this.getTypedRuleContext(ParamContext,0);
	};

	default_assignment() {
	    return this.getTypedRuleContext(Default_assignmentContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam_with_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam_with_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam_with_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_maybe_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param_maybe_default;
    }

	param() {
	    return this.getTypedRuleContext(ParamContext,0);
	};

	default_assignment() {
	    return this.getTypedRuleContext(Default_assignmentContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam_maybe_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam_maybe_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam_maybe_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_star_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_param_star_annotation;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	star_annotation() {
	    return this.getTypedRuleContext(Star_annotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterParam_star_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitParam_star_annotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitParam_star_annotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_annotation;
    }

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_annotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_annotation;
    }

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	star_expression() {
	    return this.getTypedRuleContext(Star_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_annotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_annotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_annotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Default_assignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_default_assignment;
    }

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDefault_assignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDefault_assignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDefault_assignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(PythonParser.IF, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	elif_stmt() {
	    return this.getTypedRuleContext(Elif_stmtContext,0);
	};

	else_block() {
	    return this.getTypedRuleContext(Else_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitIf_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitIf_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Elif_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_elif_stmt;
    }

	ELIF() {
	    return this.getToken(PythonParser.ELIF, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	elif_stmt() {
	    return this.getTypedRuleContext(Elif_stmtContext,0);
	};

	else_block() {
	    return this.getTypedRuleContext(Else_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterElif_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitElif_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitElif_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Else_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_else_block;
    }

	ELSE() {
	    return this.getToken(PythonParser.ELSE, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterElse_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitElse_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitElse_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class While_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_while_stmt;
    }

	WHILE() {
	    return this.getToken(PythonParser.WHILE, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	else_block() {
	    return this.getTypedRuleContext(Else_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterWhile_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitWhile_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitWhile_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(PythonParser.FOR, 0);
	};

	star_targets() {
	    return this.getTypedRuleContext(Star_targetsContext,0);
	};

	IN() {
	    return this.getToken(PythonParser.IN, 0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASYNC() {
	    return this.getToken(PythonParser.ASYNC, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	else_block() {
	    return this.getTypedRuleContext(Else_blockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFor_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFor_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_with_stmt;
    }

	WITH() {
	    return this.getToken(PythonParser.WITH, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	with_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(With_itemContext);
	    } else {
	        return this.getTypedRuleContext(With_itemContext,i);
	    }
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	ASYNC() {
	    return this.getToken(PythonParser.ASYNC, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterWith_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitWith_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitWith_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_with_item;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	star_target() {
	    return this.getTypedRuleContext(Star_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterWith_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitWith_item(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitWith_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Try_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_try_stmt;
    }

	TRY() {
	    return this.getToken(PythonParser.TRY, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	finally_block() {
	    return this.getTypedRuleContext(Finally_blockContext,0);
	};

	except_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Except_blockContext);
	    } else {
	        return this.getTypedRuleContext(Except_blockContext,i);
	    }
	};

	else_block() {
	    return this.getTypedRuleContext(Else_blockContext,0);
	};

	except_star_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Except_star_blockContext);
	    } else {
	        return this.getTypedRuleContext(Except_star_blockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterTry_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitTry_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitTry_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Except_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_except_block;
    }

	EXCEPT() {
	    return this.getToken(PythonParser.EXCEPT, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterExcept_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitExcept_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitExcept_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Except_star_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_except_star_block;
    }

	EXCEPT() {
	    return this.getToken(PythonParser.EXCEPT, 0);
	};

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterExcept_star_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitExcept_star_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitExcept_star_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Finally_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_finally_block;
    }

	FINALLY() {
	    return this.getToken(PythonParser.FINALLY, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFinally_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFinally_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFinally_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Match_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_match_stmt;
    }

	soft_kw_match() {
	    return this.getTypedRuleContext(Soft_kw_matchContext,0);
	};

	subject_expr() {
	    return this.getTypedRuleContext(Subject_exprContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	NEWLINE() {
	    return this.getToken(PythonParser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(PythonParser.INDENT, 0);
	};

	DEDENT() {
	    return this.getToken(PythonParser.DEDENT, 0);
	};

	case_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_blockContext);
	    } else {
	        return this.getTypedRuleContext(Case_blockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterMatch_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitMatch_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitMatch_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Subject_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_subject_expr;
    }

	star_named_expression() {
	    return this.getTypedRuleContext(Star_named_expressionContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	star_named_expressions() {
	    return this.getTypedRuleContext(Star_named_expressionsContext,0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSubject_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSubject_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSubject_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_case_block;
    }

	soft_kw_case() {
	    return this.getTypedRuleContext(Soft_kw_caseContext,0);
	};

	patterns() {
	    return this.getTypedRuleContext(PatternsContext,0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	guard() {
	    return this.getTypedRuleContext(GuardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterCase_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitCase_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitCase_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_guard;
    }

	IF() {
	    return this.getToken(PythonParser.IF, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_patterns;
    }

	open_sequence_pattern() {
	    return this.getTypedRuleContext(Open_sequence_patternContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPatterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPatterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPatterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_pattern;
    }

	as_pattern() {
	    return this.getTypedRuleContext(As_patternContext,0);
	};

	or_pattern() {
	    return this.getTypedRuleContext(Or_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class As_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_as_pattern;
    }

	or_pattern() {
	    return this.getTypedRuleContext(Or_patternContext,0);
	};

	AS() {
	    return this.getToken(PythonParser.AS, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAs_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAs_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAs_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Or_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_or_pattern;
    }

	closed_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Closed_patternContext);
	    } else {
	        return this.getTypedRuleContext(Closed_patternContext,i);
	    }
	};

	VBAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.VBAR);
	    } else {
	        return this.getToken(PythonParser.VBAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterOr_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitOr_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitOr_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Closed_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_closed_pattern;
    }

	literal_pattern() {
	    return this.getTypedRuleContext(Literal_patternContext,0);
	};

	capture_pattern() {
	    return this.getTypedRuleContext(Capture_patternContext,0);
	};

	wildcard_pattern() {
	    return this.getTypedRuleContext(Wildcard_patternContext,0);
	};

	value_pattern() {
	    return this.getTypedRuleContext(Value_patternContext,0);
	};

	group_pattern() {
	    return this.getTypedRuleContext(Group_patternContext,0);
	};

	sequence_pattern() {
	    return this.getTypedRuleContext(Sequence_patternContext,0);
	};

	mapping_pattern() {
	    return this.getTypedRuleContext(Mapping_patternContext,0);
	};

	class_pattern() {
	    return this.getTypedRuleContext(Class_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterClosed_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitClosed_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitClosed_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_literal_pattern;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	complex_number() {
	    return this.getTypedRuleContext(Complex_numberContext,0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	NONE() {
	    return this.getToken(PythonParser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(PythonParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(PythonParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLiteral_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLiteral_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLiteral_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_literal_expr;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	complex_number() {
	    return this.getTypedRuleContext(Complex_numberContext,0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	NONE() {
	    return this.getToken(PythonParser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(PythonParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(PythonParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLiteral_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLiteral_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLiteral_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Complex_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_complex_number;
    }

	signed_real_number() {
	    return this.getTypedRuleContext(Signed_real_numberContext,0);
	};

	imaginary_number() {
	    return this.getTypedRuleContext(Imaginary_numberContext,0);
	};

	PLUS() {
	    return this.getToken(PythonParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PythonParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterComplex_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitComplex_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitComplex_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_signed_number;
    }

	NUMBER() {
	    return this.getToken(PythonParser.NUMBER, 0);
	};

	MINUS() {
	    return this.getToken(PythonParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSigned_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSigned_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_real_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_signed_real_number;
    }

	real_number() {
	    return this.getTypedRuleContext(Real_numberContext,0);
	};

	MINUS() {
	    return this.getToken(PythonParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSigned_real_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSigned_real_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSigned_real_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_real_number;
    }

	NUMBER() {
	    return this.getToken(PythonParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterReal_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitReal_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitReal_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Imaginary_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_imaginary_number;
    }

	NUMBER() {
	    return this.getToken(PythonParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterImaginary_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitImaginary_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitImaginary_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Capture_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_capture_pattern;
    }

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterCapture_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitCapture_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitCapture_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pattern_capture_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_pattern_capture_target;
    }

	soft_kw__not__wildcard() {
	    return this.getTypedRuleContext(Soft_kw__not__wildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPattern_capture_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPattern_capture_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPattern_capture_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wildcard_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_wildcard_pattern;
    }

	soft_kw_wildcard() {
	    return this.getTypedRuleContext(Soft_kw_wildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterWildcard_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitWildcard_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitWildcard_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Value_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_value_pattern;
    }

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterValue_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitValue_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitValue_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_attr;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NAME);
	    } else {
	        return this.getToken(PythonParser.NAME, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.DOT);
	    } else {
	        return this.getToken(PythonParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAttr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAttr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Name_or_attrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_name_or_attr;
    }

	NAME = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.NAME);
	    } else {
	        return this.getToken(PythonParser.NAME, i);
	    }
	};


	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.DOT);
	    } else {
	        return this.getToken(PythonParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterName_or_attr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitName_or_attr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitName_or_attr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_group_pattern;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGroup_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGroup_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGroup_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_sequence_pattern;
    }

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	maybe_sequence_pattern() {
	    return this.getTypedRuleContext(Maybe_sequence_patternContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	open_sequence_pattern() {
	    return this.getTypedRuleContext(Open_sequence_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Open_sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_open_sequence_pattern;
    }

	maybe_star_pattern() {
	    return this.getTypedRuleContext(Maybe_star_patternContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	maybe_sequence_pattern() {
	    return this.getTypedRuleContext(Maybe_sequence_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterOpen_sequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitOpen_sequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitOpen_sequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Maybe_sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_maybe_sequence_pattern;
    }

	maybe_star_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Maybe_star_patternContext);
	    } else {
	        return this.getTypedRuleContext(Maybe_star_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterMaybe_sequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitMaybe_sequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitMaybe_sequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Maybe_star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_maybe_star_pattern;
    }

	star_pattern() {
	    return this.getTypedRuleContext(Star_patternContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterMaybe_star_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitMaybe_star_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitMaybe_star_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_pattern;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	wildcard_pattern() {
	    return this.getTypedRuleContext(Wildcard_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mapping_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_mapping_pattern;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	double_star_pattern() {
	    return this.getTypedRuleContext(Double_star_patternContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	items_pattern() {
	    return this.getTypedRuleContext(Items_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterMapping_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitMapping_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitMapping_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Items_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_items_pattern;
    }

	key_value_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_value_patternContext);
	    } else {
	        return this.getTypedRuleContext(Key_value_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterItems_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitItems_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitItems_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_value_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_key_value_pattern;
    }

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	literal_expr() {
	    return this.getTypedRuleContext(Literal_exprContext,0);
	};

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKey_value_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKey_value_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKey_value_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Double_star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_double_star_pattern;
    }

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDouble_star_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDouble_star_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDouble_star_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_class_pattern;
    }

	name_or_attr() {
	    return this.getTypedRuleContext(Name_or_attrContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	positional_patterns() {
	    return this.getTypedRuleContext(Positional_patternsContext,0);
	};

	keyword_patterns() {
	    return this.getTypedRuleContext(Keyword_patternsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterClass_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitClass_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitClass_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Positional_patternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_positional_patterns;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPositional_patterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPositional_patterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPositional_patterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Keyword_patternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_keyword_patterns;
    }

	keyword_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Keyword_patternContext);
	    } else {
	        return this.getTypedRuleContext(Keyword_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKeyword_patterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKeyword_patterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKeyword_patterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Keyword_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_keyword_pattern;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKeyword_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKeyword_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKeyword_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_aliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_alias;
    }

	soft_kw_type() {
	    return this.getTypedRuleContext(Soft_kw_typeContext,0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	type_params() {
	    return this.getTypedRuleContext(Type_paramsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_alias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_alias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_alias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_params;
    }

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	type_param_seq() {
	    return this.getTypedRuleContext(Type_param_seqContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_params(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_param_seqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_param_seq;
    }

	type_param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_paramContext);
	    } else {
	        return this.getTypedRuleContext(Type_paramContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_param_seq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_param_seq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_param_seq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_param;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	type_param_bound() {
	    return this.getTypedRuleContext(Type_param_boundContext,0);
	};

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_param(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_param(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_param_boundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_param_bound;
    }

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_param_bound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_param_bound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_param_bound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_expressions;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitExpressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitExpressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_expression;
    }

	disjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisjunctionContext);
	    } else {
	        return this.getTypedRuleContext(DisjunctionContext,i);
	    }
	};

	IF() {
	    return this.getToken(PythonParser.IF, 0);
	};

	ELSE() {
	    return this.getToken(PythonParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	lambdef() {
	    return this.getTypedRuleContext(LambdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_yield_expr;
    }

	YIELD() {
	    return this.getToken(PythonParser.YIELD, 0);
	};

	FROM() {
	    return this.getToken(PythonParser.FROM, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterYield_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitYield_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitYield_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_expressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_expressions;
    }

	star_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Star_expressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_expressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_expressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_expressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_expression;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_named_expressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_named_expressions;
    }

	star_named_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_named_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Star_named_expressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_named_expressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_named_expressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_named_expressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_named_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_named_expression;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_named_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_named_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_named_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assignment_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_assignment_expression;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	COLONEQUAL() {
	    return this.getToken(PythonParser.COLONEQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAssignment_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAssignment_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAssignment_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Named_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_named_expression;
    }

	assignment_expression() {
	    return this.getTypedRuleContext(Assignment_expressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterNamed_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitNamed_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitNamed_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DisjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_disjunction;
    }

	conjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConjunctionContext);
	    } else {
	        return this.getTypedRuleContext(ConjunctionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.OR);
	    } else {
	        return this.getToken(PythonParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDisjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDisjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDisjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_conjunction;
    }

	inversion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InversionContext);
	    } else {
	        return this.getTypedRuleContext(InversionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.AND);
	    } else {
	        return this.getToken(PythonParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitConjunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitConjunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InversionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_inversion;
    }

	NOT() {
	    return this.getToken(PythonParser.NOT, 0);
	};

	inversion() {
	    return this.getTypedRuleContext(InversionContext,0);
	};

	comparison() {
	    return this.getTypedRuleContext(ComparisonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterInversion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitInversion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitInversion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_comparison;
    }

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	compare_op_bitwise_or_pair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Compare_op_bitwise_or_pairContext);
	    } else {
	        return this.getTypedRuleContext(Compare_op_bitwise_or_pairContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compare_op_bitwise_or_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_compare_op_bitwise_or_pair;
    }

	eq_bitwise_or() {
	    return this.getTypedRuleContext(Eq_bitwise_orContext,0);
	};

	noteq_bitwise_or() {
	    return this.getTypedRuleContext(Noteq_bitwise_orContext,0);
	};

	lte_bitwise_or() {
	    return this.getTypedRuleContext(Lte_bitwise_orContext,0);
	};

	lt_bitwise_or() {
	    return this.getTypedRuleContext(Lt_bitwise_orContext,0);
	};

	gte_bitwise_or() {
	    return this.getTypedRuleContext(Gte_bitwise_orContext,0);
	};

	gt_bitwise_or() {
	    return this.getTypedRuleContext(Gt_bitwise_orContext,0);
	};

	notin_bitwise_or() {
	    return this.getTypedRuleContext(Notin_bitwise_orContext,0);
	};

	in_bitwise_or() {
	    return this.getTypedRuleContext(In_bitwise_orContext,0);
	};

	isnot_bitwise_or() {
	    return this.getTypedRuleContext(Isnot_bitwise_orContext,0);
	};

	is_bitwise_or() {
	    return this.getTypedRuleContext(Is_bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterCompare_op_bitwise_or_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitCompare_op_bitwise_or_pair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitCompare_op_bitwise_or_pair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Eq_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_eq_bitwise_or;
    }

	EQEQUAL() {
	    return this.getToken(PythonParser.EQEQUAL, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterEq_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitEq_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitEq_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Noteq_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_noteq_bitwise_or;
    }

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	NOTEQUAL() {
	    return this.getToken(PythonParser.NOTEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterNoteq_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitNoteq_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitNoteq_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lte_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lte_bitwise_or;
    }

	LESSEQUAL() {
	    return this.getToken(PythonParser.LESSEQUAL, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLte_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLte_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLte_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lt_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lt_bitwise_or;
    }

	LESS() {
	    return this.getToken(PythonParser.LESS, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLt_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLt_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLt_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Gte_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_gte_bitwise_or;
    }

	GREATEREQUAL() {
	    return this.getToken(PythonParser.GREATEREQUAL, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGte_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGte_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGte_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Gt_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_gt_bitwise_or;
    }

	GREATER() {
	    return this.getToken(PythonParser.GREATER, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGt_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGt_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGt_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Notin_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_notin_bitwise_or;
    }

	NOT() {
	    return this.getToken(PythonParser.NOT, 0);
	};

	IN() {
	    return this.getToken(PythonParser.IN, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterNotin_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitNotin_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitNotin_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class In_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_in_bitwise_or;
    }

	IN() {
	    return this.getToken(PythonParser.IN, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterIn_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitIn_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitIn_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Isnot_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_isnot_bitwise_or;
    }

	IS() {
	    return this.getToken(PythonParser.IS, 0);
	};

	NOT() {
	    return this.getToken(PythonParser.NOT, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterIsnot_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitIsnot_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitIsnot_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Is_bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_is_bitwise_or;
    }

	IS() {
	    return this.getToken(PythonParser.IS, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterIs_bitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitIs_bitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitIs_bitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bitwise_orContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_bitwise_or;
    }

	bitwise_xor() {
	    return this.getTypedRuleContext(Bitwise_xorContext,0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	VBAR() {
	    return this.getToken(PythonParser.VBAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterBitwise_or(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitBitwise_or(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitBitwise_or(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bitwise_xorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_bitwise_xor;
    }

	bitwise_and() {
	    return this.getTypedRuleContext(Bitwise_andContext,0);
	};

	bitwise_xor() {
	    return this.getTypedRuleContext(Bitwise_xorContext,0);
	};

	CIRCUMFLEX() {
	    return this.getToken(PythonParser.CIRCUMFLEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterBitwise_xor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitBitwise_xor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitBitwise_xor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bitwise_andContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_bitwise_and;
    }

	shift_expr() {
	    return this.getTypedRuleContext(Shift_exprContext,0);
	};

	bitwise_and() {
	    return this.getTypedRuleContext(Bitwise_andContext,0);
	};

	AMPER() {
	    return this.getToken(PythonParser.AMPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterBitwise_and(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitBitwise_and(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitBitwise_and(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Shift_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_shift_expr;
    }

	sum() {
	    return this.getTypedRuleContext(SumContext,0);
	};

	shift_expr() {
	    return this.getTypedRuleContext(Shift_exprContext,0);
	};

	LEFTSHIFT() {
	    return this.getToken(PythonParser.LEFTSHIFT, 0);
	};

	RIGHTSHIFT() {
	    return this.getToken(PythonParser.RIGHTSHIFT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterShift_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitShift_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitShift_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_sum;
    }

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	sum() {
	    return this.getTypedRuleContext(SumContext,0);
	};

	PLUS() {
	    return this.getToken(PythonParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(PythonParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_term;
    }

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	term() {
	    return this.getTypedRuleContext(TermContext,0);
	};

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	SLASH() {
	    return this.getToken(PythonParser.SLASH, 0);
	};

	DOUBLESLASH() {
	    return this.getToken(PythonParser.DOUBLESLASH, 0);
	};

	PERCENT() {
	    return this.getToken(PythonParser.PERCENT, 0);
	};

	AT() {
	    return this.getToken(PythonParser.AT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitTerm(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_factor;
    }

	PLUS() {
	    return this.getToken(PythonParser.PLUS, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	MINUS() {
	    return this.getToken(PythonParser.MINUS, 0);
	};

	TILDE() {
	    return this.getToken(PythonParser.TILDE, 0);
	};

	power() {
	    return this.getTypedRuleContext(PowerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFactor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PowerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_power;
    }

	await_primary() {
	    return this.getTypedRuleContext(Await_primaryContext,0);
	};

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	factor() {
	    return this.getTypedRuleContext(FactorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPower(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPower(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPower(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Await_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_await_primary;
    }

	AWAIT() {
	    return this.getToken(PythonParser.AWAIT, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAwait_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAwait_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAwait_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_primary;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	genexp() {
	    return this.getTypedRuleContext(GenexpContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	slices() {
	    return this.getTypedRuleContext(SlicesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlicesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_slices;
    }

	slice = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SliceContext);
	    } else {
	        return this.getTypedRuleContext(SliceContext,i);
	    }
	};

	starred_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Starred_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Starred_expressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSlices(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSlices(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSlices(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_slice;
    }

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COLON);
	    } else {
	        return this.getToken(PythonParser.COLON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSlice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSlice(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSlice(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_atom;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	TRUE() {
	    return this.getToken(PythonParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(PythonParser.FALSE, 0);
	};

	NONE() {
	    return this.getToken(PythonParser.NONE, 0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	NUMBER() {
	    return this.getToken(PythonParser.NUMBER, 0);
	};

	tuple() {
	    return this.getTypedRuleContext(TupleContext,0);
	};

	group() {
	    return this.getTypedRuleContext(GroupContext,0);
	};

	genexp() {
	    return this.getTypedRuleContext(GenexpContext,0);
	};

	list() {
	    return this.getTypedRuleContext(ListContext,0);
	};

	listcomp() {
	    return this.getTypedRuleContext(ListcompContext,0);
	};

	dict() {
	    return this.getTypedRuleContext(DictContext,0);
	};

	set() {
	    return this.getTypedRuleContext(SetContext,0);
	};

	dictcomp() {
	    return this.getTypedRuleContext(DictcompContext,0);
	};

	setcomp() {
	    return this.getTypedRuleContext(SetcompContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(PythonParser.ELLIPSIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_group;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambdef;
    }

	LAMBDA() {
	    return this.getToken(PythonParser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	lambda_params() {
	    return this.getTypedRuleContext(Lambda_paramsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_paramsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_params;
    }

	lambda_parameters() {
	    return this.getTypedRuleContext(Lambda_parametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_params(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_params(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_params(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_parametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_parameters;
    }

	lambda_slash_no_default() {
	    return this.getTypedRuleContext(Lambda_slash_no_defaultContext,0);
	};

	lambda_param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_no_defaultContext,i);
	    }
	};

	lambda_param_with_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_with_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_with_defaultContext,i);
	    }
	};

	lambda_star_etc() {
	    return this.getTypedRuleContext(Lambda_star_etcContext,0);
	};

	lambda_slash_with_default() {
	    return this.getTypedRuleContext(Lambda_slash_with_defaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_parameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_parameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_parameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_slash_no_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_slash_no_default;
    }

	SLASH() {
	    return this.getToken(PythonParser.SLASH, 0);
	};

	lambda_param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_no_defaultContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_slash_no_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_slash_no_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_slash_no_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_slash_with_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_slash_with_default;
    }

	SLASH() {
	    return this.getToken(PythonParser.SLASH, 0);
	};

	lambda_param_no_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_no_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_no_defaultContext,i);
	    }
	};

	lambda_param_with_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_with_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_with_defaultContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_slash_with_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_slash_with_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_slash_with_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_star_etcContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_star_etc;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	lambda_param_no_default() {
	    return this.getTypedRuleContext(Lambda_param_no_defaultContext,0);
	};

	lambda_param_maybe_default = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Lambda_param_maybe_defaultContext);
	    } else {
	        return this.getTypedRuleContext(Lambda_param_maybe_defaultContext,i);
	    }
	};

	lambda_kwds() {
	    return this.getTypedRuleContext(Lambda_kwdsContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_star_etc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_star_etc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_star_etc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_kwdsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_kwds;
    }

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	lambda_param_no_default() {
	    return this.getTypedRuleContext(Lambda_param_no_defaultContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_kwds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_kwds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_kwds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_param_no_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_param_no_default;
    }

	lambda_param() {
	    return this.getTypedRuleContext(Lambda_paramContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_param_no_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_param_no_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_param_no_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_param_with_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_param_with_default;
    }

	lambda_param() {
	    return this.getTypedRuleContext(Lambda_paramContext,0);
	};

	default_assignment() {
	    return this.getTypedRuleContext(Default_assignmentContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_param_with_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_param_with_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_param_with_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_param_maybe_defaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_param_maybe_default;
    }

	lambda_param() {
	    return this.getTypedRuleContext(Lambda_paramContext,0);
	};

	default_assignment() {
	    return this.getTypedRuleContext(Default_assignmentContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_param_maybe_default(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_param_maybe_default(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_param_maybe_default(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambda_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_lambda_param;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterLambda_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitLambda_param(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitLambda_param(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_middleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_middle;
    }

	fstring_replacement_field() {
	    return this.getTypedRuleContext(Fstring_replacement_fieldContext,0);
	};

	FSTRING_MIDDLE() {
	    return this.getToken(PythonParser.FSTRING_MIDDLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_middle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_middle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_middle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_replacement_fieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_replacement_field;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	star_expressions() {
	    return this.getTypedRuleContext(Star_expressionsContext,0);
	};

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	fstring_conversion() {
	    return this.getTypedRuleContext(Fstring_conversionContext,0);
	};

	fstring_full_format_spec() {
	    return this.getTypedRuleContext(Fstring_full_format_specContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_replacement_field(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_replacement_field(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_replacement_field(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_conversionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_conversion;
    }

	EXCLAMATION() {
	    return this.getToken(PythonParser.EXCLAMATION, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_conversion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_conversion(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_conversion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_full_format_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_full_format_spec;
    }

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	fstring_format_spec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fstring_format_specContext);
	    } else {
	        return this.getTypedRuleContext(Fstring_format_specContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_full_format_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_full_format_spec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_full_format_spec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fstring_format_specContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring_format_spec;
    }

	FSTRING_MIDDLE() {
	    return this.getToken(PythonParser.FSTRING_MIDDLE, 0);
	};

	fstring_replacement_field() {
	    return this.getTypedRuleContext(Fstring_replacement_fieldContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring_format_spec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring_format_spec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring_format_spec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FstringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_fstring;
    }

	FSTRING_START() {
	    return this.getToken(PythonParser.FSTRING_START, 0);
	};

	FSTRING_END() {
	    return this.getToken(PythonParser.FSTRING_END, 0);
	};

	fstring_middle = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fstring_middleContext);
	    } else {
	        return this.getTypedRuleContext(Fstring_middleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFstring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFstring(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFstring(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_string;
    }

	STRING() {
	    return this.getToken(PythonParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_strings;
    }

	fstring = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FstringContext);
	    } else {
	        return this.getTypedRuleContext(FstringContext,i);
	    }
	};

	string = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringContext);
	    } else {
	        return this.getTypedRuleContext(StringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStrings(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStrings(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_list;
    }

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	star_named_expressions() {
	    return this.getTypedRuleContext(Star_named_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_tuple;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	star_named_expression() {
	    return this.getTypedRuleContext(Star_named_expressionContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	star_named_expressions() {
	    return this.getTypedRuleContext(Star_named_expressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitTuple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitTuple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_set;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	star_named_expressions() {
	    return this.getTypedRuleContext(Star_named_expressionsContext,0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_dict;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	double_starred_kvpairs() {
	    return this.getTypedRuleContext(Double_starred_kvpairsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDict(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDict(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Double_starred_kvpairsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_double_starred_kvpairs;
    }

	double_starred_kvpair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Double_starred_kvpairContext);
	    } else {
	        return this.getTypedRuleContext(Double_starred_kvpairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDouble_starred_kvpairs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDouble_starred_kvpairs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDouble_starred_kvpairs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Double_starred_kvpairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_double_starred_kvpair;
    }

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	bitwise_or() {
	    return this.getTypedRuleContext(Bitwise_orContext,0);
	};

	kvpair() {
	    return this.getTypedRuleContext(KvpairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDouble_starred_kvpair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDouble_starred_kvpair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDouble_starred_kvpair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KvpairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_kvpair;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COLON() {
	    return this.getToken(PythonParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKvpair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKvpair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKvpair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_if_clausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_for_if_clauses;
    }

	for_if_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(For_if_clauseContext);
	    } else {
	        return this.getTypedRuleContext(For_if_clauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFor_if_clauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFor_if_clauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFor_if_clauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_if_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_for_if_clause;
    }

	FOR() {
	    return this.getToken(PythonParser.FOR, 0);
	};

	star_targets() {
	    return this.getTypedRuleContext(Star_targetsContext,0);
	};

	IN() {
	    return this.getToken(PythonParser.IN, 0);
	};

	disjunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DisjunctionContext);
	    } else {
	        return this.getTypedRuleContext(DisjunctionContext,i);
	    }
	};

	ASYNC() {
	    return this.getToken(PythonParser.ASYNC, 0);
	};

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.IF);
	    } else {
	        return this.getToken(PythonParser.IF, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFor_if_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFor_if_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFor_if_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ListcompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_listcomp;
    }

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	for_if_clauses() {
	    return this.getTypedRuleContext(For_if_clausesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterListcomp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitListcomp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitListcomp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetcompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_setcomp;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	named_expression() {
	    return this.getTypedRuleContext(Named_expressionContext,0);
	};

	for_if_clauses() {
	    return this.getTypedRuleContext(For_if_clausesContext,0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSetcomp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSetcomp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSetcomp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GenexpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_genexp;
    }

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	for_if_clauses() {
	    return this.getTypedRuleContext(For_if_clausesContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	assignment_expression() {
	    return this.getTypedRuleContext(Assignment_expressionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterGenexp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitGenexp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitGenexp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictcompContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_dictcomp;
    }

	LBRACE() {
	    return this.getToken(PythonParser.LBRACE, 0);
	};

	kvpair() {
	    return this.getTypedRuleContext(KvpairContext,0);
	};

	for_if_clauses() {
	    return this.getTypedRuleContext(For_if_clausesContext,0);
	};

	RBRACE() {
	    return this.getToken(PythonParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDictcomp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDictcomp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDictcomp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_arguments;
    }

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	COMMA() {
	    return this.getToken(PythonParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_args;
    }

	starred_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Starred_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Starred_expressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	kwargs() {
	    return this.getTypedRuleContext(KwargsContext,0);
	};

	assignment_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Assignment_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Assignment_expressionContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KwargsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_kwargs;
    }

	kwarg_or_starred = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Kwarg_or_starredContext);
	    } else {
	        return this.getTypedRuleContext(Kwarg_or_starredContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	kwarg_or_double_starred = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Kwarg_or_double_starredContext);
	    } else {
	        return this.getTypedRuleContext(Kwarg_or_double_starredContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKwargs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKwargs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKwargs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Starred_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_starred_expression;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStarred_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStarred_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStarred_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Kwarg_or_starredContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_kwarg_or_starred;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	starred_expression() {
	    return this.getTypedRuleContext(Starred_expressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKwarg_or_starred(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKwarg_or_starred(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKwarg_or_starred(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Kwarg_or_double_starredContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_kwarg_or_double_starred;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	EQUAL() {
	    return this.getToken(PythonParser.EQUAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterKwarg_or_double_starred(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitKwarg_or_double_starred(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitKwarg_or_double_starred(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_targetsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_targets;
    }

	star_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_targetContext);
	    } else {
	        return this.getTypedRuleContext(Star_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_targets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_targets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_targets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_targets_list_seqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_targets_list_seq;
    }

	star_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_targetContext);
	    } else {
	        return this.getTypedRuleContext(Star_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_targets_list_seq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_targets_list_seq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_targets_list_seq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_targets_tuple_seqContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_targets_tuple_seq;
    }

	star_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_targetContext);
	    } else {
	        return this.getTypedRuleContext(Star_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_targets_tuple_seq(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_targets_tuple_seq(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_targets_tuple_seq(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_target;
    }

	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	star_target() {
	    return this.getTypedRuleContext(Star_targetContext,0);
	};

	target_with_star_atom() {
	    return this.getTypedRuleContext(Target_with_star_atomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Target_with_star_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_target_with_star_atom;
    }

	t_primary() {
	    return this.getTypedRuleContext(T_primaryContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	slices() {
	    return this.getTypedRuleContext(SlicesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	star_atom() {
	    return this.getTypedRuleContext(Star_atomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterTarget_with_star_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitTarget_with_star_atom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitTarget_with_star_atom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_star_atom;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	target_with_star_atom() {
	    return this.getTypedRuleContext(Target_with_star_atomContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	star_targets_tuple_seq() {
	    return this.getTypedRuleContext(Star_targets_tuple_seqContext,0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	star_targets_list_seq() {
	    return this.getTypedRuleContext(Star_targets_list_seqContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterStar_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitStar_atom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitStar_atom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Single_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_single_target;
    }

	single_subscript_attribute_target() {
	    return this.getTypedRuleContext(Single_subscript_attribute_targetContext,0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	single_target() {
	    return this.getTypedRuleContext(Single_targetContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSingle_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSingle_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSingle_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Single_subscript_attribute_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_single_subscript_attribute_target;
    }

	t_primary() {
	    return this.getTypedRuleContext(T_primaryContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	slices() {
	    return this.getTypedRuleContext(SlicesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSingle_subscript_attribute_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSingle_subscript_attribute_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSingle_subscript_attribute_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class T_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_t_primary;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	t_primary() {
	    return this.getTypedRuleContext(T_primaryContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	slices() {
	    return this.getTypedRuleContext(SlicesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	genexp() {
	    return this.getTypedRuleContext(GenexpContext,0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterT_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitT_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitT_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_targetsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_del_targets;
    }

	del_target = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Del_targetContext);
	    } else {
	        return this.getTypedRuleContext(Del_targetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDel_targets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDel_targets(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDel_targets(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_del_target;
    }

	t_primary() {
	    return this.getTypedRuleContext(T_primaryContext,0);
	};

	DOT() {
	    return this.getToken(PythonParser.DOT, 0);
	};

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	slices() {
	    return this.getTypedRuleContext(SlicesContext,0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	del_t_atom() {
	    return this.getTypedRuleContext(Del_t_atomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDel_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDel_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDel_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_t_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_del_t_atom;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	LPAR() {
	    return this.getToken(PythonParser.LPAR, 0);
	};

	del_target() {
	    return this.getTypedRuleContext(Del_targetContext,0);
	};

	RPAR() {
	    return this.getToken(PythonParser.RPAR, 0);
	};

	del_targets() {
	    return this.getTypedRuleContext(Del_targetsContext,0);
	};

	LSQB() {
	    return this.getToken(PythonParser.LSQB, 0);
	};

	RSQB() {
	    return this.getToken(PythonParser.RSQB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterDel_t_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitDel_t_atom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitDel_t_atom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_expressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_type_expressions;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(PythonParser.COMMA);
	    } else {
	        return this.getToken(PythonParser.COMMA, i);
	    }
	};


	STAR() {
	    return this.getToken(PythonParser.STAR, 0);
	};

	DOUBLESTAR() {
	    return this.getToken(PythonParser.DOUBLESTAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterType_expressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitType_expressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitType_expressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Func_type_commentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_func_type_comment;
    }

	NEWLINE() {
	    return this.getToken(PythonParser.NEWLINE, 0);
	};

	TYPE_COMMENT() {
	    return this.getToken(PythonParser.TYPE_COMMENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterFunc_type_comment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitFunc_type_comment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitFunc_type_comment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Soft_kw_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_soft_kw_type;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSoft_kw_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSoft_kw_type(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSoft_kw_type(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Soft_kw_matchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_soft_kw_match;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSoft_kw_match(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSoft_kw_match(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSoft_kw_match(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Soft_kw_caseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_soft_kw_case;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSoft_kw_case(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSoft_kw_case(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSoft_kw_case(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Soft_kw_wildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_soft_kw_wildcard;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSoft_kw_wildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSoft_kw_wildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSoft_kw_wildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Soft_kw__not__wildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = PythonParser.RULE_soft_kw__not__wildcard;
    }

	NAME() {
	    return this.getToken(PythonParser.NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.enterSoft_kw__not__wildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof PythonParserListener ) {
	        listener.exitSoft_kw__not__wildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof PythonParserVisitor ) {
	        return visitor.visitSoft_kw__not__wildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




PythonParser.File_inputContext = File_inputContext; 
PythonParser.InteractiveContext = InteractiveContext; 
PythonParser.EvalContext = EvalContext; 
PythonParser.Func_typeContext = Func_typeContext; 
PythonParser.Fstring_inputContext = Fstring_inputContext; 
PythonParser.StatementsContext = StatementsContext; 
PythonParser.StatementContext = StatementContext; 
PythonParser.Statement_newlineContext = Statement_newlineContext; 
PythonParser.Simple_stmtsContext = Simple_stmtsContext; 
PythonParser.Simple_stmtContext = Simple_stmtContext; 
PythonParser.Compound_stmtContext = Compound_stmtContext; 
PythonParser.AssignmentContext = AssignmentContext; 
PythonParser.Annotated_rhsContext = Annotated_rhsContext; 
PythonParser.AugassignContext = AugassignContext; 
PythonParser.Return_stmtContext = Return_stmtContext; 
PythonParser.Raise_stmtContext = Raise_stmtContext; 
PythonParser.Global_stmtContext = Global_stmtContext; 
PythonParser.Nonlocal_stmtContext = Nonlocal_stmtContext; 
PythonParser.Del_stmtContext = Del_stmtContext; 
PythonParser.Yield_stmtContext = Yield_stmtContext; 
PythonParser.Assert_stmtContext = Assert_stmtContext; 
PythonParser.Import_stmtContext = Import_stmtContext; 
PythonParser.Import_nameContext = Import_nameContext; 
PythonParser.Import_fromContext = Import_fromContext; 
PythonParser.Import_from_targetsContext = Import_from_targetsContext; 
PythonParser.Import_from_as_namesContext = Import_from_as_namesContext; 
PythonParser.Import_from_as_nameContext = Import_from_as_nameContext; 
PythonParser.Dotted_as_namesContext = Dotted_as_namesContext; 
PythonParser.Dotted_as_nameContext = Dotted_as_nameContext; 
PythonParser.Dotted_nameContext = Dotted_nameContext; 
PythonParser.BlockContext = BlockContext; 
PythonParser.DecoratorsContext = DecoratorsContext; 
PythonParser.Class_defContext = Class_defContext; 
PythonParser.Class_def_rawContext = Class_def_rawContext; 
PythonParser.Function_defContext = Function_defContext; 
PythonParser.Function_def_rawContext = Function_def_rawContext; 
PythonParser.ParamsContext = ParamsContext; 
PythonParser.ParametersContext = ParametersContext; 
PythonParser.Slash_no_defaultContext = Slash_no_defaultContext; 
PythonParser.Slash_with_defaultContext = Slash_with_defaultContext; 
PythonParser.Star_etcContext = Star_etcContext; 
PythonParser.KwdsContext = KwdsContext; 
PythonParser.Param_no_defaultContext = Param_no_defaultContext; 
PythonParser.Param_no_default_star_annotationContext = Param_no_default_star_annotationContext; 
PythonParser.Param_with_defaultContext = Param_with_defaultContext; 
PythonParser.Param_maybe_defaultContext = Param_maybe_defaultContext; 
PythonParser.ParamContext = ParamContext; 
PythonParser.Param_star_annotationContext = Param_star_annotationContext; 
PythonParser.AnnotationContext = AnnotationContext; 
PythonParser.Star_annotationContext = Star_annotationContext; 
PythonParser.Default_assignmentContext = Default_assignmentContext; 
PythonParser.If_stmtContext = If_stmtContext; 
PythonParser.Elif_stmtContext = Elif_stmtContext; 
PythonParser.Else_blockContext = Else_blockContext; 
PythonParser.While_stmtContext = While_stmtContext; 
PythonParser.For_stmtContext = For_stmtContext; 
PythonParser.With_stmtContext = With_stmtContext; 
PythonParser.With_itemContext = With_itemContext; 
PythonParser.Try_stmtContext = Try_stmtContext; 
PythonParser.Except_blockContext = Except_blockContext; 
PythonParser.Except_star_blockContext = Except_star_blockContext; 
PythonParser.Finally_blockContext = Finally_blockContext; 
PythonParser.Match_stmtContext = Match_stmtContext; 
PythonParser.Subject_exprContext = Subject_exprContext; 
PythonParser.Case_blockContext = Case_blockContext; 
PythonParser.GuardContext = GuardContext; 
PythonParser.PatternsContext = PatternsContext; 
PythonParser.PatternContext = PatternContext; 
PythonParser.As_patternContext = As_patternContext; 
PythonParser.Or_patternContext = Or_patternContext; 
PythonParser.Closed_patternContext = Closed_patternContext; 
PythonParser.Literal_patternContext = Literal_patternContext; 
PythonParser.Literal_exprContext = Literal_exprContext; 
PythonParser.Complex_numberContext = Complex_numberContext; 
PythonParser.Signed_numberContext = Signed_numberContext; 
PythonParser.Signed_real_numberContext = Signed_real_numberContext; 
PythonParser.Real_numberContext = Real_numberContext; 
PythonParser.Imaginary_numberContext = Imaginary_numberContext; 
PythonParser.Capture_patternContext = Capture_patternContext; 
PythonParser.Pattern_capture_targetContext = Pattern_capture_targetContext; 
PythonParser.Wildcard_patternContext = Wildcard_patternContext; 
PythonParser.Value_patternContext = Value_patternContext; 
PythonParser.AttrContext = AttrContext; 
PythonParser.Name_or_attrContext = Name_or_attrContext; 
PythonParser.Group_patternContext = Group_patternContext; 
PythonParser.Sequence_patternContext = Sequence_patternContext; 
PythonParser.Open_sequence_patternContext = Open_sequence_patternContext; 
PythonParser.Maybe_sequence_patternContext = Maybe_sequence_patternContext; 
PythonParser.Maybe_star_patternContext = Maybe_star_patternContext; 
PythonParser.Star_patternContext = Star_patternContext; 
PythonParser.Mapping_patternContext = Mapping_patternContext; 
PythonParser.Items_patternContext = Items_patternContext; 
PythonParser.Key_value_patternContext = Key_value_patternContext; 
PythonParser.Double_star_patternContext = Double_star_patternContext; 
PythonParser.Class_patternContext = Class_patternContext; 
PythonParser.Positional_patternsContext = Positional_patternsContext; 
PythonParser.Keyword_patternsContext = Keyword_patternsContext; 
PythonParser.Keyword_patternContext = Keyword_patternContext; 
PythonParser.Type_aliasContext = Type_aliasContext; 
PythonParser.Type_paramsContext = Type_paramsContext; 
PythonParser.Type_param_seqContext = Type_param_seqContext; 
PythonParser.Type_paramContext = Type_paramContext; 
PythonParser.Type_param_boundContext = Type_param_boundContext; 
PythonParser.ExpressionsContext = ExpressionsContext; 
PythonParser.ExpressionContext = ExpressionContext; 
PythonParser.Yield_exprContext = Yield_exprContext; 
PythonParser.Star_expressionsContext = Star_expressionsContext; 
PythonParser.Star_expressionContext = Star_expressionContext; 
PythonParser.Star_named_expressionsContext = Star_named_expressionsContext; 
PythonParser.Star_named_expressionContext = Star_named_expressionContext; 
PythonParser.Assignment_expressionContext = Assignment_expressionContext; 
PythonParser.Named_expressionContext = Named_expressionContext; 
PythonParser.DisjunctionContext = DisjunctionContext; 
PythonParser.ConjunctionContext = ConjunctionContext; 
PythonParser.InversionContext = InversionContext; 
PythonParser.ComparisonContext = ComparisonContext; 
PythonParser.Compare_op_bitwise_or_pairContext = Compare_op_bitwise_or_pairContext; 
PythonParser.Eq_bitwise_orContext = Eq_bitwise_orContext; 
PythonParser.Noteq_bitwise_orContext = Noteq_bitwise_orContext; 
PythonParser.Lte_bitwise_orContext = Lte_bitwise_orContext; 
PythonParser.Lt_bitwise_orContext = Lt_bitwise_orContext; 
PythonParser.Gte_bitwise_orContext = Gte_bitwise_orContext; 
PythonParser.Gt_bitwise_orContext = Gt_bitwise_orContext; 
PythonParser.Notin_bitwise_orContext = Notin_bitwise_orContext; 
PythonParser.In_bitwise_orContext = In_bitwise_orContext; 
PythonParser.Isnot_bitwise_orContext = Isnot_bitwise_orContext; 
PythonParser.Is_bitwise_orContext = Is_bitwise_orContext; 
PythonParser.Bitwise_orContext = Bitwise_orContext; 
PythonParser.Bitwise_xorContext = Bitwise_xorContext; 
PythonParser.Bitwise_andContext = Bitwise_andContext; 
PythonParser.Shift_exprContext = Shift_exprContext; 
PythonParser.SumContext = SumContext; 
PythonParser.TermContext = TermContext; 
PythonParser.FactorContext = FactorContext; 
PythonParser.PowerContext = PowerContext; 
PythonParser.Await_primaryContext = Await_primaryContext; 
PythonParser.PrimaryContext = PrimaryContext; 
PythonParser.SlicesContext = SlicesContext; 
PythonParser.SliceContext = SliceContext; 
PythonParser.AtomContext = AtomContext; 
PythonParser.GroupContext = GroupContext; 
PythonParser.LambdefContext = LambdefContext; 
PythonParser.Lambda_paramsContext = Lambda_paramsContext; 
PythonParser.Lambda_parametersContext = Lambda_parametersContext; 
PythonParser.Lambda_slash_no_defaultContext = Lambda_slash_no_defaultContext; 
PythonParser.Lambda_slash_with_defaultContext = Lambda_slash_with_defaultContext; 
PythonParser.Lambda_star_etcContext = Lambda_star_etcContext; 
PythonParser.Lambda_kwdsContext = Lambda_kwdsContext; 
PythonParser.Lambda_param_no_defaultContext = Lambda_param_no_defaultContext; 
PythonParser.Lambda_param_with_defaultContext = Lambda_param_with_defaultContext; 
PythonParser.Lambda_param_maybe_defaultContext = Lambda_param_maybe_defaultContext; 
PythonParser.Lambda_paramContext = Lambda_paramContext; 
PythonParser.Fstring_middleContext = Fstring_middleContext; 
PythonParser.Fstring_replacement_fieldContext = Fstring_replacement_fieldContext; 
PythonParser.Fstring_conversionContext = Fstring_conversionContext; 
PythonParser.Fstring_full_format_specContext = Fstring_full_format_specContext; 
PythonParser.Fstring_format_specContext = Fstring_format_specContext; 
PythonParser.FstringContext = FstringContext; 
PythonParser.StringContext = StringContext; 
PythonParser.StringsContext = StringsContext; 
PythonParser.ListContext = ListContext; 
PythonParser.TupleContext = TupleContext; 
PythonParser.SetContext = SetContext; 
PythonParser.DictContext = DictContext; 
PythonParser.Double_starred_kvpairsContext = Double_starred_kvpairsContext; 
PythonParser.Double_starred_kvpairContext = Double_starred_kvpairContext; 
PythonParser.KvpairContext = KvpairContext; 
PythonParser.For_if_clausesContext = For_if_clausesContext; 
PythonParser.For_if_clauseContext = For_if_clauseContext; 
PythonParser.ListcompContext = ListcompContext; 
PythonParser.SetcompContext = SetcompContext; 
PythonParser.GenexpContext = GenexpContext; 
PythonParser.DictcompContext = DictcompContext; 
PythonParser.ArgumentsContext = ArgumentsContext; 
PythonParser.ArgsContext = ArgsContext; 
PythonParser.KwargsContext = KwargsContext; 
PythonParser.Starred_expressionContext = Starred_expressionContext; 
PythonParser.Kwarg_or_starredContext = Kwarg_or_starredContext; 
PythonParser.Kwarg_or_double_starredContext = Kwarg_or_double_starredContext; 
PythonParser.Star_targetsContext = Star_targetsContext; 
PythonParser.Star_targets_list_seqContext = Star_targets_list_seqContext; 
PythonParser.Star_targets_tuple_seqContext = Star_targets_tuple_seqContext; 
PythonParser.Star_targetContext = Star_targetContext; 
PythonParser.Target_with_star_atomContext = Target_with_star_atomContext; 
PythonParser.Star_atomContext = Star_atomContext; 
PythonParser.Single_targetContext = Single_targetContext; 
PythonParser.Single_subscript_attribute_targetContext = Single_subscript_attribute_targetContext; 
PythonParser.T_primaryContext = T_primaryContext; 
PythonParser.Del_targetsContext = Del_targetsContext; 
PythonParser.Del_targetContext = Del_targetContext; 
PythonParser.Del_t_atomContext = Del_t_atomContext; 
PythonParser.Type_expressionsContext = Type_expressionsContext; 
PythonParser.Func_type_commentContext = Func_type_commentContext; 
PythonParser.Soft_kw_typeContext = Soft_kw_typeContext; 
PythonParser.Soft_kw_matchContext = Soft_kw_matchContext; 
PythonParser.Soft_kw_caseContext = Soft_kw_caseContext; 
PythonParser.Soft_kw_wildcardContext = Soft_kw_wildcardContext; 
PythonParser.Soft_kw__not__wildcardContext = Soft_kw__not__wildcardContext; 
